name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      build_number:
        description: 'Build number to deploy (e.g., build-20241212-143052-abc1234)'
        required: true
        type: string
      deploy_frontend:
        description: 'Deploy Frontend'
        required: true
        default: true
        type: boolean
      deploy_backend:
        description: 'Deploy Backend'
        required: true
        default: true
        type: boolean
      deployment_type:
        description: 'Backend deployment type (container recommended - has architectural fixes)'
        required: true
        default: 'container'
        type: choice
        options:
        - 'container'
        - 'app-service'
      run_migrations:
        description: 'Run database migrations'
        required: true
        default: true
        type: boolean

env:
  RESOURCE_GROUP: gt-automotives-prod
  FRONTEND_APP_NAME: gt-automotives-frontend
  BACKEND_APP_NAME: gt-automotives-backend
  REGISTRY_NAME: gtautomotivesregistry
  CONTAINER_NAME: gt-backend-working

jobs:
  validate-build:
    runs-on: ubuntu-latest
    outputs:
      build-number: ${{ steps.validate.outputs.build-number }}
      frontend-artifact: ${{ steps.validate.outputs.frontend-artifact }}
      backend-artifact: ${{ steps.validate.outputs.backend-artifact }}
      build-valid: ${{ steps.validate.outputs.build-valid }}
    
    steps:
    - name: Validate build number format
      id: validate
      run: |
        BUILD_NUMBER="${{ github.event.inputs.build_number }}"
        
        # Validate format: build-YYYYMMDD-HHMMSS-shortsha
        if [[ $BUILD_NUMBER =~ ^build-[0-9]{8}-[0-9]{6}-[a-f0-9]{7}$ ]]; then
          echo "✅ Build number format is valid: $BUILD_NUMBER"
          echo "build-valid=true" >> $GITHUB_OUTPUT
          echo "build-number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
          echo "frontend-artifact=frontend-$BUILD_NUMBER" >> $GITHUB_OUTPUT
          echo "backend-artifact=backend-$BUILD_NUMBER" >> $GITHUB_OUTPUT
        else
          echo "❌ Invalid build number format: $BUILD_NUMBER"
          echo "Expected format: build-YYYYMMDD-HHMMSS-shortsha"
          echo "Example: build-20241212-143052-abc1234"
          echo "build-valid=false" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: Check artifact availability
      run: |
        echo "🔍 Checking if artifacts exist for build: ${{ github.event.inputs.build_number }}"
        echo "Will look for:"
        echo "- Frontend: ${{ steps.validate.outputs.frontend-artifact }}"
        echo "- Backend: ${{ steps.validate.outputs.backend-artifact }}"

  deploy-backend:
    runs-on: ubuntu-latest
    needs: validate-build
    if: github.event.inputs.deploy_backend == 'true' && github.event.inputs.deployment_type == 'app-service'
    
    steps:
    - name: Download backend artifact
      uses: dawidd6/action-download-artifact@v3
      with:
        workflow: build.yml
        workflow_conclusion: success
        name: ${{ needs.validate-build.outputs.backend-artifact }}
        path: ./backend-deploy

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Run database migrations
      if: github.event.inputs.run_migrations == 'true'
      run: |
        echo "🗄️ Running database migrations..."
        
        # Extract and prepare migration files
        cd backend-deploy
        unzip -q ${{ needs.validate-build.outputs.backend-artifact }}.zip
        
        # Install Prisma CLI temporarily
        npm install -g prisma
        
        # Run migrations
        export DATABASE_URL="${{ secrets.DATABASE_URL }}"
        
        if [ -f "prisma/schema.prisma" ]; then
          echo "📋 Found Prisma schema, running migrations..."
          prisma migrate deploy --schema=prisma/schema.prisma
          echo "✅ Migrations completed successfully"
        else
          echo "⚠️ No Prisma schema found, skipping migrations"
        fi
        
        cd ..

    - name: Configure App Service settings
      run: |
        echo "⚙️ Configuring App Service settings..."
        
        # Configure Node.js runtime and startup
        az webapp config appsettings set \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name ${{ env.BACKEND_APP_NAME }} \
          --settings \
            WEBSITE_NODE_DEFAULT_VERSION="~20" \
            SCM_DO_BUILD_DURING_DEPLOYMENT="false" \
            WEBSITE_RUN_FROM_PACKAGE="1" \
            WEBSITES_CONTAINER_START_TIME_LIMIT="1800"
        
        # Set startup command
        az webapp config set \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name ${{ env.BACKEND_APP_NAME }} \
          --startup-file "node main.js"

    - name: Deploy backend to App Service
      run: |
        echo "🚀 Deploying backend build: ${{ github.event.inputs.build_number }}"
        
        cd backend-deploy
        
        # Deploy to Azure App Service
        az webapp deploy \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name ${{ env.BACKEND_APP_NAME }} \
          --src-path ${{ needs.validate-build.outputs.backend-artifact }}.zip \
          --type zip
        
        echo "✅ Backend deployment completed"

    - name: Restart backend App Service
      run: |
        echo "🔄 Restarting backend App Service..."
        az webapp restart \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name ${{ env.BACKEND_APP_NAME }}
        
        echo "✅ Backend restarted successfully"

    - name: Verify backend deployment
      run: |
        echo "🔍 Verifying backend deployment..."
        
        # Wait for restart to complete
        sleep 30
        
        # Test health endpoint
        BACKEND_URL="https://${{ env.BACKEND_APP_NAME }}.azurewebsites.net"
        
        echo "Testing: $BACKEND_URL/health"
        
        for i in {1..5}; do
          if curl -f -s "$BACKEND_URL/health" > /dev/null; then
            echo "✅ Backend is responding (attempt $i)"
            break
          else
            echo "⏳ Backend not ready, waiting... (attempt $i/5)"
            sleep 15
          fi
        done

  deploy-backend-container:
    runs-on: ubuntu-latest
    needs: validate-build
    if: github.event.inputs.deploy_backend == 'true' && github.event.inputs.deployment_type == 'container'

    steps:
    - name: Checkout code for shared libraries
      uses: actions/checkout@v4
    - name: Download backend artifact
      uses: dawidd6/action-download-artifact@v3
      with:
        workflow: build.yml
        workflow_conclusion: success
        name: ${{ needs.validate-build.outputs.backend-artifact }}
        path: ./backend-deploy

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Login to Azure Container Registry
      run: |
        echo "🔐 Logging in to Azure Container Registry..."
        az acr login --name ${{ env.REGISTRY_NAME }}

    - name: Extract and prepare deployment files
      run: |
        echo "📦 Extracting deployment package with container fixes..."
        cd backend-deploy
        unzip -qo ${{ needs.validate-build.outputs.backend-artifact }}.zip

        echo "📋 Deployment structure:"
        ls -la

        echo "🔍 Verifying webpack externals and shared library structure:"
        ls -la node_modules/@gt-automotive/ || echo "Shared libraries not found - will copy from source"
        ls -la server/ || echo "Server files not found"

        # CRITICAL: Copy shared libraries from source (now we have checkout)
        echo "📚 Ensuring shared libraries are available from source..."
        if [ ! -d "shared-dto-temp" ]; then
          echo "Creating shared library files from checked out source..."
          mkdir -p shared-dto-temp

          # Copy from checked out source
          if [ -d "../libs/shared/dto/dist" ]; then
            echo "Found shared library dist files, copying..."
            cp -r ../libs/shared/dto/dist/* shared-dto-temp/ 2>/dev/null || echo "No dist files found"
            cp ../libs/shared/dto/package.json shared-dto-package.json 2>/dev/null || echo "No package.json found"
          else
            echo "⚠️ WARNING: Shared library dist not found. Building shared library..."
            cd ..
            yarn install --ignore-engines --frozen-lockfile
            yarn nx build @gt-automotive/shared-dto
            cd backend-deploy
            cp -r ../libs/shared/dto/dist/* shared-dto-temp/ 2>/dev/null || echo "Build failed"
            cp ../libs/shared/dto/package.json shared-dto-package.json 2>/dev/null || echo "No package.json found"
          fi
        fi

        echo "📋 Final deployment structure:"
        ls -la
        echo "📋 Shared library temp files:"
        ls -la shared-dto-temp/ 2>/dev/null || echo "No shared-dto-temp directory"

    - name: Create optimized Dockerfile with fixes
      run: |
        echo "🐳 Creating Dockerfile aligned with working direct deployment..."
        cd backend-deploy

        # First, reorganize the file structure to match working deployment
        echo "📁 Reorganizing file structure..."
        if [ -d "server" ]; then
          # Move server contents to root level (matching Dockerfile.simple)
          cp -r server/* ./
          rm -rf server
        fi

        # Ensure we have the shared libraries ready
        if [ -d "../libs/shared/dto/dist" ]; then
          mkdir -p shared-dto-temp
          cp -r ../libs/shared/dto/dist/* shared-dto-temp/
          cp ../libs/shared/dto/package.json shared-dto-package.json
        fi

        cat > Dockerfile << 'EOF'
        FROM node:20-slim

        WORKDIR /app

        # Install system dependencies for Prisma
        RUN apt-get update && apt-get install -y openssl && rm -rf /var/lib/apt/lists/*

        # Copy all files to container
        COPY . ./

        # Install dependencies and generate Prisma client
        RUN npm install --production && \
            npx prisma generate --schema=./prisma/schema.prisma

        # Create proper node_modules structure for shared libraries (critical fix from working deployment)
        RUN if [ -d "./shared-dto-temp" ]; then \
              mkdir -p ./node_modules/@gt-automotive/shared-dto/dist/ && \
              cp -r ./shared-dto-temp/* ./node_modules/@gt-automotive/shared-dto/dist/ && \
              cp ./shared-dto-package.json ./node_modules/@gt-automotive/shared-dto/package.json && \
              rm -rf ./shared-dto-temp ./shared-dto-package.json; \
            fi

        # Create non-root user for security
        RUN groupadd -r nodejs && useradd -r -g nodejs nodejs && \
            chown -R nodejs:nodejs /app
        USER nodejs

        EXPOSE 3000

        # Use direct node command matching Dockerfile.simple (working deployment)
        CMD ["node", "main.js"]
        EOF

    - name: Build and push Docker image
      run: |
        echo "🔨 Building Docker image with container fixes..."
        cd backend-deploy
        
        IMAGE_TAG="container-deploy-${{ needs.validate-build.outputs.build-number }}"
        FULL_IMAGE_NAME="${{ env.REGISTRY_NAME }}.azurecr.io/gt-backend:$IMAGE_TAG"
        
        echo "🏷️ Building image: $FULL_IMAGE_NAME"
        echo "📋 Build number from input: ${{ needs.validate-build.outputs.build-number }}"
        echo "📋 Complete tag: $IMAGE_TAG"
        
        # Build with no cache to ensure fresh build
        docker build -t "$FULL_IMAGE_NAME" . --no-cache
        
        echo "🚀 Pushing image to registry..."
        docker push "$FULL_IMAGE_NAME"
        
        echo "IMAGE_NAME=$FULL_IMAGE_NAME" >> $GITHUB_ENV

    - name: Run database migrations
      if: github.event.inputs.run_migrations == 'true'
      run: |
        echo "🗄️ Running database migrations directly on runner..."
        
        # Clean and extract deployment package to get Prisma schema
        cd backend-deploy
        rm -f build-info.json || true  # Remove any existing build-info.json
        unzip -o -q ${{ needs.validate-build.outputs.backend-artifact }}.zip
        
        # Install Prisma CLI and client dependencies on the runner
        npm install -g prisma@latest
        npm install @prisma/client@latest
        
        # Run migrations directly with proper error handling
        export DATABASE_URL="${{ secrets.DATABASE_URL }}"
        
        if [ -f "prisma/schema.prisma" ]; then
          echo "📋 Found Prisma schema, running migrations..."
          
          # Create a minimal package.json for proper Prisma client generation
          cat > package.json << 'EOF'
        {
          "name": "migration-temp",
          "version": "1.0.0",
          "dependencies": {
            "@prisma/client": "latest",
            "prisma": "latest"
          }
        }
        EOF
          
          # Install dependencies locally for proper Prisma client generation
          npm install --no-package-lock
          
          # Generate Prisma client with proper binary resolution
          echo "🔧 Generating Prisma client for migrations..."
          npx prisma generate --schema=prisma/schema.prisma
          
          # Run migrations
          echo "🚀 Running database migrations..."
          if npx prisma migrate deploy --schema=prisma/schema.prisma; then
            echo "✅ Migrations completed successfully"
          else
            echo "❌ Migration failed, but continuing with deployment..."
            echo "⚠️ You may need to run migrations manually after deployment"
            echo "💡 Check database connectivity and migration files"
            
            # Show more detailed error information
            echo "🔍 Database URL format check:"
            echo "Database URL starts with: ${DATABASE_URL:0:20}..."
            echo "🔍 Prisma client status:"
            ls -la node_modules/@prisma/client/ 2>/dev/null || echo "Prisma client not found"
          fi
        else
          echo "⚠️ No Prisma schema found, skipping migrations"
        fi
        
        cd ..

    - name: Deploy to Azure Container Instances
      run: |
        echo "🚀 Deploying to Azure Container Instances with fixes..."
        
        # Delete existing container if it exists
        az container delete \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name ${{ env.CONTAINER_NAME }} \
          --yes || echo "No existing container to delete"
        
        # Create new container instance with all required environment variables
        az container create \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name ${{ env.CONTAINER_NAME }} \
          --image ${{ env.IMAGE_NAME }} \
          --os-type Linux \
          --dns-name-label gt-automotives-backend-working \
          --ports 3000 \
          --cpu 2 \
          --memory 4 \
          --registry-login-server ${{ env.REGISTRY_NAME }}.azurecr.io \
          --registry-username ${{ env.REGISTRY_NAME }} \
          --registry-password $(az acr credential show --name ${{ env.REGISTRY_NAME }} --query "passwords[0].value" --output tsv) \
          --environment-variables \
            DATABASE_URL="${{ secrets.DATABASE_URL }}" \
            JWT_SECRET="${{ secrets.JWT_SECRET }}" \
            CLERK_SECRET_KEY="${{ secrets.CLERK_SECRET_KEY }}" \
            CLERK_API_URL="${{ secrets.CLERK_API_URL }}" \
            CLERK_PUBLISHABLE_KEY="${{ secrets.CLERK_PUBLISHABLE_KEY }}" \
            CLERK_JWKS_URL="${{ secrets.CLERK_JWKS_URL }}" \
            FRONTEND_URL="${{ secrets.FRONTEND_URL }}" \
            PORT="3000" \
            NODE_ENV="production"
        
        echo "✅ Container deployment completed"

    - name: Verify container deployment
      run: |
        echo "🔍 Verifying container deployment..."
        
        # Check container status before testing
        echo "🔍 Checking container status..."
        az container show --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.CONTAINER_NAME }} --query "{state: instanceView.state, restartCount: instanceView.restartCount, events: instanceView.events}" --output table || true
        
        # Wait for container to start
        sleep 60
        
        CONTAINER_URL="http://gt-automotives-backend-working.canadacentral.azurecontainer.io:3000"
        
        echo "Testing: $CONTAINER_URL/health"
        
        for i in {1..10}; do
          # Check container status on each attempt
          echo "📊 Container status (attempt $i):"
          az container show --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.CONTAINER_NAME }} --query "instanceView.state" --output tsv || echo "Status check failed"
          
          if curl -f -s "$CONTAINER_URL/health" > /dev/null; then
            echo "✅ Container backend is responding (attempt $i)"
            
            # Test a few endpoints to verify full functionality
            echo "🧪 Testing detailed health endpoint..."
            curl -s "$CONTAINER_URL/health/detailed" | head -10 || echo "Detailed health test failed"
            
            break
          else
            echo "⏳ Container not ready, waiting... (attempt $i/10)"
            
            # Show container logs if it's failing
            if [ $i -eq 5 ]; then
              echo "🔍 Mid-deployment container logs:"
              az container logs --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.CONTAINER_NAME }} || echo "Could not retrieve logs"
            fi
            
            sleep 30
          fi
        done
        
        # Always check container logs for debugging
        echo "📋 Final container logs:"
        az container logs --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.CONTAINER_NAME }} || echo "Could not retrieve container logs"
        
        # Show container events for debugging
        echo "📋 Container events:"
        az container show --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.CONTAINER_NAME }} --query "instanceView.events[*].[message,timeStamp]" --output table || echo "Could not retrieve container events"

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: validate-build
    if: github.event.inputs.deploy_frontend == 'true'
    
    steps:
    - name: Download frontend artifact
      uses: dawidd6/action-download-artifact@v3
      with:
        workflow: build.yml
        workflow_conclusion: success
        name: ${{ needs.validate-build.outputs.frontend-artifact }}
        path: ./frontend-deploy

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy frontend to App Service
      run: |
        echo "🌐 Deploying frontend build: ${{ github.event.inputs.build_number }}"
        
        cd frontend-deploy
        
        # Deploy to Azure App Service
        az webapp deploy \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name ${{ env.FRONTEND_APP_NAME }} \
          --src-path ${{ needs.validate-build.outputs.frontend-artifact }}.zip \
          --type zip
        
        echo "✅ Frontend deployment completed"

    - name: Restart frontend App Service
      run: |
        echo "🔄 Restarting frontend App Service..."
        az webapp restart \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name ${{ env.FRONTEND_APP_NAME }}
        
        echo "✅ Frontend restarted successfully"

    - name: Verify frontend deployment
      run: |
        echo "🔍 Verifying frontend deployment..."
        
        # Wait for restart to complete
        sleep 30
        
        # Test main site
        FRONTEND_URL="https://gt-automotives.com"
        
        echo "Testing: $FRONTEND_URL/health"
        
        for i in {1..5}; do
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$FRONTEND_URL/health" || echo "000")
          if [ "$HTTP_CODE" = "200" ]; then
            echo "✅ Frontend is responding (attempt $i)"
            break
          else
            echo "⏳ Frontend not ready (HTTP $HTTP_CODE), waiting... (attempt $i/5)"
            sleep 15
          fi
        done

  deployment-summary:
    runs-on: ubuntu-latest
    needs: [validate-build, deploy-backend, deploy-backend-container, deploy-frontend]
    if: always()
    
    steps:
    - name: Create deployment summary
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Build Number:** \`${{ github.event.inputs.build_number }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Triggered by:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "**Deployment Time:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Backend status (App Service vs Container)
        if [ "${{ github.event.inputs.deploy_backend }}" = "true" ]; then
          if [ "${{ github.event.inputs.deployment_type }}" = "container" ]; then
            if [ "${{ needs.deploy-backend-container.result }}" = "success" ]; then
              echo "✅ **Backend (Container):** Deployed successfully to Azure Container Instances" >> $GITHUB_STEP_SUMMARY
              echo "🐳 **Container URL:** http://gt-automotives-backend-working.canadacentral.azurecontainer.io:3000" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ **Backend (Container):** Deployment failed" >> $GITHUB_STEP_SUMMARY
            fi
          else
            if [ "${{ needs.deploy-backend.result }}" = "success" ]; then
              echo "✅ **Backend (App Service):** Deployed successfully to Azure App Service" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ **Backend (App Service):** Deployment failed" >> $GITHUB_STEP_SUMMARY
            fi
          fi
        else
          echo "⏭️ **Backend:** Skipped" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Frontend status
        if [ "${{ github.event.inputs.deploy_frontend }}" = "true" ]; then
          if [ "${{ needs.deploy-frontend.result }}" = "success" ]; then
            echo "✅ **Frontend:** Deployed successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Frontend:** Deployment failed" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "⏭️ **Frontend:** Skipped" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Migration status
        if [ "${{ github.event.inputs.run_migrations }}" = "true" ]; then
          echo "✅ **Database:** Migrations executed" >> $GITHUB_STEP_SUMMARY
        else
          echo "⏭️ **Database:** Migrations skipped" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🌐 Production URLs" >> $GITHUB_STEP_SUMMARY
        echo "- **Frontend:** https://gt-automotives.com" >> $GITHUB_STEP_SUMMARY
        if [ "${{ github.event.inputs.deployment_type }}" = "container" ]; then
          echo "- **Backend (Container):** http://gt-automotives-backend-working.canadacentral.azurecontainer.io:3000" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend Health:** http://gt-automotives-backend-working.canadacentral.azurecontainer.io:3000/health" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Backend (App Service):** https://gt-automotives-backend.azurewebsites.net" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend Health:** https://gt-automotives-backend.azurewebsites.net/health" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Notify deployment completion
      run: |
        # Check which backend deployment was used
        BACKEND_SUCCESS="false"
        if [ "${{ github.event.inputs.deployment_type }}" = "container" ]; then
          if [ "${{ needs.deploy-backend-container.result }}" = "success" ]; then
            BACKEND_SUCCESS="true"
          fi
        else
          if [ "${{ needs.deploy-backend.result }}" = "success" ]; then
            BACKEND_SUCCESS="true"
          fi
        fi
        
        if [ "$BACKEND_SUCCESS" = "true" ] && [ "${{ needs.deploy-frontend.result }}" = "success" ]; then
          echo "🎉 Deployment completed successfully!"
          echo "🌐 Site: https://gt-automotives.com"
          echo "🏗️ Build: ${{ github.event.inputs.build_number }}"
          if [ "${{ github.event.inputs.deployment_type }}" = "container" ]; then
            echo "🐳 Backend: Container deployment with architectural fixes"
            echo "📡 Container URL: http://gt-automotives-backend-working.canadacentral.azurecontainer.io:3000"
          else
            echo "🖥️ Backend: App Service deployment"
          fi
        else
          echo "⚠️ Deployment completed with some issues"
          echo "Check the logs above for details"
        fi