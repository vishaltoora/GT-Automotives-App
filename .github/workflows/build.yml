name: Build and Package

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY_NAME: gtautomotivesregistry
  RESOURCE_GROUP: gt-automotives-prod

jobs:
  build:
    runs-on: ubuntu-latest
    
    outputs:
      build-number: ${{ steps.build-info.outputs.build-number }}
      commit-sha: ${{ github.sha }}
      frontend-artifact: ${{ steps.build-info.outputs.frontend-artifact }}
      backend-artifact: ${{ steps.build-info.outputs.backend-artifact }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'yarn'

    - name: Generate build info
      id: build-info
      run: |
        BUILD_NUMBER="build-$(date +%Y%m%d-%H%M%S)-${GITHUB_SHA:0:7}"
        echo "build-number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
        echo "frontend-artifact=frontend-$BUILD_NUMBER" >> $GITHUB_OUTPUT
        echo "backend-artifact=backend-$BUILD_NUMBER" >> $GITHUB_OUTPUT
        echo "🏗️ Build Number: $BUILD_NUMBER"

    - name: Install dependencies
      run: |
        echo "📦 Installing dependencies..."
        yarn install --frozen-lockfile --ignore-engines

    - name: Generate Prisma Client
      run: |
        echo "🔧 Generating Prisma client..."
        yarn prisma generate --schema=libs/database/src/lib/prisma/schema.prisma

    - name: Run linting and type checking
      run: |
        echo "🔍 Running linting and type checking..."
        yarn lint
        yarn typecheck

    - name: Run tests
      run: |
        echo "🧪 Running tests..."
        yarn test

    - name: Build frontend
      run: |
        echo "🌐 Building frontend..."
        yarn build:web
      env:
        VITE_API_URL: https://gt-automotives.com
        VITE_CLERK_PUBLISHABLE_KEY: pk_live_Y2xlcmsuZ3QtYXV0b21vdGl2ZXMuY29tJA

    - name: Build backend
      run: |
        echo "🖥️ Building backend..."
        yarn build:server

    - name: Create frontend deployment package
      run: |
        echo "📦 Creating frontend deployment package..."
        cd apps/webApp/dist
        
        # Create Node.js server with API proxy functionality
        cat > server.js << 'EOF'
        const express = require('express');
        const { createProxyMiddleware } = require('http-proxy-middleware');
        const path = require('path');
        const app = express();
        const PORT = process.env.PORT || 8080;

        // Backend configuration
        const BACKEND_URL = 'https://gt-automotives-backend.azurewebsites.net';

        // CORS middleware for API routes
        app.use('/api', (req, res, next) => {
          res.header('Access-Control-Allow-Origin', 'https://gt-automotives.com');
          res.header('Access-Control-Allow-Credentials', 'true');
          res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS');
          res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');
          
          if (req.method === 'OPTIONS') {
            res.sendStatus(200);
          } else {
            next();
          }
        });

        // API Proxy - Forward all /api requests to backend
        app.use('/api', createProxyMiddleware({
          target: BACKEND_URL,
          changeOrigin: true,
          secure: true,
          timeout: 30000,
          logLevel: 'info',
          onError: (err, req, res) => {
            console.error('Proxy error:', err.message);
            res.status(500).json({ 
              error: 'Backend service unavailable',
              message: err.message 
            });
          },
          onProxyReq: (proxyReq, req, res) => {
            console.log(`Proxying: ${req.method} ${req.url} -> ${BACKEND_URL}${req.url}`);
          }
        }));

        // Health check endpoint
        app.get('/health', (req, res) => {
          res.json({ 
            status: 'healthy', 
            service: 'gt-automotive-web-app',
            backend: BACKEND_URL,
            build: '${{ steps.build-info.outputs.build-number }}',
            commit: '${{ github.sha }}',
            timestamp: new Date().toISOString()
          });
        });

        // Serve static files (React app)
        app.use(express.static(__dirname));

        // Handle client-side routing (SPA) - Must be last
        app.get('*', (req, res) => {
          res.sendFile(path.join(__dirname, 'index.html'));
        });

        app.listen(PORT, () => {
          console.log(`🚀 GT Automotive Web App running on port ${PORT}`);
          console.log(`📡 Proxying API requests to: ${BACKEND_URL}`);
          console.log(`🌐 Frontend: https://gt-automotives.com`);
          console.log(`🔗 API: https://gt-automotives.com/api`);
          console.log(`🏗️ Build: ${{ steps.build-info.outputs.build-number }}`);
        });
        EOF

        # Create package.json for Azure Web App with proxy dependencies
        cat > package.json << 'EOF'
        {
          "name": "gt-automotives-frontend",
          "version": "${{ steps.build-info.outputs.build-number }}",
          "description": "GT Automotive Web App with API Proxy",
          "scripts": {
            "start": "node server.js"
          },
          "dependencies": {
            "express": "^4.18.2",
            "http-proxy-middleware": "^2.0.6"
          },
          "engines": {
            "node": ">=20"
          }
        }
        EOF

        # Create build info file
        cat > build-info.json << 'EOF'
        {
          "buildNumber": "${{ steps.build-info.outputs.build-number }}",
          "commitSha": "${{ github.sha }}",
          "buildDate": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "branch": "${{ github.ref_name }}",
          "workflow": "${{ github.workflow }}"
        }
        EOF

        # Create deployment zip
        zip -r ../../../${{ steps.build-info.outputs.frontend-artifact }}.zip .
        cd ../../..

    - name: Create backend deployment package
      run: |
        echo "📦 Creating backend deployment package..."
        
        # Create deployment directory matching Azure's expected structure
        mkdir -p backend-deploy/server/dist
        
        # Copy built server files to Azure's expected location
        cp -r server/dist/* backend-deploy/server/dist/
        
        # Create minimal production package.json for Azure App Service
        cat > backend-deploy/package.json << 'EOF'
        {
          "name": "gt-automotives-backend",
          "version": "${{ steps.build-info.outputs.build-number }}",
          "description": "GT Automotive Backend API",
          "main": "server/dist/main.js",
          "scripts": {
            "start": "node server/dist/main.js"
          },
          "engines": {
            "node": ">=20"
          }
        }
        EOF
        
        # Generate Prisma client in the deployment package
        echo "🔧 Generating Prisma client for deployment..."
        cd backend-deploy
        
        # Copy Prisma schema to root for generation
        mkdir -p prisma
        cp ../libs/database/src/lib/prisma/schema.prisma prisma/
        cp -r ../libs/database/src/lib/prisma/migrations prisma/ 2>/dev/null || echo "No migrations directory found"
        
        # Install minimal dependencies needed for Prisma generation
        npm install --production --no-package-lock @prisma/client prisma > /dev/null 2>&1
        
        # Generate Prisma client (this will create node_modules/.prisma/client)
        npx prisma generate --schema=./prisma/schema.prisma
        
        # Clean up package-lock.json to reduce package size
        rm -f package-lock.json
        
        cd ..
        
        # Create build info file
        cat > backend-deploy/build-info.json << 'EOF'
        {
          "buildNumber": "${{ steps.build-info.outputs.build-number }}",
          "commitSha": "${{ github.sha }}",
          "buildDate": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "branch": "${{ github.ref_name }}",
          "workflow": "${{ github.workflow }}"
        }
        EOF
        
        # Create deployment zip
        cd backend-deploy
        zip -r ../${{ steps.build-info.outputs.backend-artifact }}.zip .
        cd ..

    - name: Upload frontend artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.build-info.outputs.frontend-artifact }}
        path: ${{ steps.build-info.outputs.frontend-artifact }}.zip
        retention-days: 30

    - name: Upload backend artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.build-info.outputs.backend-artifact }}
        path: ${{ steps.build-info.outputs.backend-artifact }}.zip
        retention-days: 30

    - name: Create deployment summary
      run: |
        echo "## 🚀 Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Build Number:** \`${{ steps.build-info.outputs.build-number }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 Artifacts Created" >> $GITHUB_STEP_SUMMARY
        echo "- **Frontend:** \`${{ steps.build-info.outputs.frontend-artifact }}.zip\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Backend:** \`${{ steps.build-info.outputs.backend-artifact }}.zip\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🎯 Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "To deploy this build, go to **Actions** → **Deploy to Production** and enter:" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Number:** \`${{ steps.build-info.outputs.build-number }}\`" >> $GITHUB_STEP_SUMMARY

    - name: Build completed
      run: |
        echo "✅ Build completed successfully!"
        echo "🏗️ Build Number: ${{ steps.build-info.outputs.build-number }}"
        echo "📦 Frontend Artifact: ${{ steps.build-info.outputs.frontend-artifact }}.zip"
        echo "📦 Backend Artifact: ${{ steps.build-info.outputs.backend-artifact }}.zip"