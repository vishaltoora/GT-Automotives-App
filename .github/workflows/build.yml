name: Build - Main Branch

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      skip_cache:
        description: 'Skip build cache'
        type: boolean
        default: false

env:
  NODE_VERSION: '20'
  BUILD_CACHE_KEY: build-${{ github.sha }}

jobs:
  build-and-store:
    name: 🏗️ Build Applications
    runs-on: ubuntu-latest
    outputs:
      build-version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate build version
        id: version
        run: |
          VERSION="${{ github.sha }}-$(date +%Y%m%d-%H%M%S)"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Build Version: $VERSION"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Generate Prisma Client
        run: yarn db:generate

      - name: Run tests before build
        env:
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/gt_automotive_test"
          NODE_ENV: test
        run: yarn test

      - name: Build Frontend
        env:
          VITE_CLERK_PUBLISHABLE_KEY: ${{ secrets.VITE_CLERK_PUBLISHABLE_KEY || 'pk_test_placeholder' }}
          VITE_API_URL: ${{ secrets.VITE_API_URL || 'https://api.gtautomotive.com' }}
          NODE_ENV: production
          VITE_BUILD_VERSION: ${{ steps.version.outputs.version }}
        run: yarn build:web

      - name: Build Backend
        env:
          NODE_ENV: production
          BUILD_VERSION: ${{ steps.version.outputs.version }}
        run: yarn build:server

      - name: Create deployment package
        run: |
          mkdir -p deployment-package
          cp -r dist/apps/webApp deployment-package/frontend
          cp -r dist/apps/server deployment-package/backend
          cp -r libs/database/src/lib/prisma deployment-package/prisma
          cp package.json deployment-package/
          cp yarn.lock deployment-package/
          
          # Create deployment info
          echo '{
            "version": "${{ steps.version.outputs.version }}",
            "commit": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "build_date": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'",
            "triggered_by": "${{ github.actor }}"
          }' > deployment-package/build-info.json

      - name: Upload Frontend Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build-${{ github.sha }}
          path: dist/apps/webApp
          retention-days: 30

      - name: Upload Backend Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-build-${{ github.sha }}
          path: dist/apps/server
          retention-days: 30

      - name: Upload Deployment Package
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package-${{ github.sha }}
          path: deployment-package/
          retention-days: 30

      - name: Create GitHub Release (Draft)
        if: github.event_name == 'push'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: build-${{ steps.version.outputs.version }}
          release_name: Build ${{ steps.version.outputs.version }}
          body: |
            ## 📦 Build Information
            - **Version:** ${{ steps.version.outputs.version }}
            - **Commit:** ${{ github.sha }}
            - **Built by:** ${{ github.actor }}
            - **Build Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
            
            ## 🎯 Artifacts
            - Frontend build available
            - Backend build available
            - Database migrations included
            
            ## 📝 Changes
            View changes: https://github.com/${{ github.repository }}/commit/${{ github.sha }}
            
            ---
            ⚠️ **Note:** This is a build artifact. Deployment to production requires manual approval.
          draft: true
          prerelease: true

  notify-build:
    name: 📢 Build Notification
    runs-on: ubuntu-latest
    needs: [build-and-store]
    if: always()
    steps:
      - name: Build Status Summary
        run: |
          echo "## 🏗️ Build Summary"
          echo "- **Status:** ${{ needs.build-and-store.result }}"
          echo "- **Version:** ${{ needs.build-and-store.outputs.build-version }}"
          echo "- **Commit:** ${{ github.sha }}"
          echo "- **Actor:** ${{ github.actor }}"
          
          if [[ "${{ needs.build-and-store.result }}" == "success" ]]; then
            echo "✅ Build completed successfully! Artifacts are ready for deployment."
          else
            echo "❌ Build failed. Please check the logs."
          fi