name: Deploy Backend to Production

on:
  workflow_dispatch:
    inputs:
      build_number:
        description: 'Build number from build workflow (optional)'
        required: false
        type: string

env:
  REGISTRY_NAME: gtautomotivesregistry
  RESOURCE_GROUP: gt-automotives-prod
  CONTAINER_NAME: gt-automotives-backend-prod

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate deployment info
      id: deploy-info
      run: |
        if [ -n "${{ github.event.inputs.build_number }}" ]; then
          BUILD_NUMBER="${{ github.event.inputs.build_number }}"
        else
          BUILD_NUMBER="deploy-$(date +%Y%m%d-%H%M%S)-${GITHUB_SHA:0:7}"
        fi
        echo "build-number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
        echo "image-tag=gt-backend:$BUILD_NUMBER" >> $GITHUB_OUTPUT
        echo "🏗️ Deployment Number: $BUILD_NUMBER"

    - name: Login to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Build and push Docker image (MyPersn pattern)
      run: |
        echo "🐳 Building Docker image with MyPersn source-based pattern..."

        # Build image using source-based Dockerfile
        docker build -t ${{ env.REGISTRY_NAME }}.azurecr.io/${{ steps.deploy-info.outputs.image-tag }} .

        echo "📤 Pushing image to Azure Container Registry..."
        docker push ${{ env.REGISTRY_NAME }}.azurecr.io/${{ steps.deploy-info.outputs.image-tag }}

        echo "✅ Image pushed: ${{ env.REGISTRY_NAME }}.azurecr.io/${{ steps.deploy-info.outputs.image-tag }}"

    - name: Login to Azure CLI
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Delete existing container (if exists)
      run: |
        echo "🗑️ Checking for existing container..."
        if az container show --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.CONTAINER_NAME }} --query "name" -o tsv 2>/dev/null; then
          echo "📋 Found existing container, deleting..."
          az container delete \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.CONTAINER_NAME }} \
            --yes
          echo "⏳ Waiting for container deletion to complete..."
          sleep 30
        else
          echo "ℹ️ No existing container found"
        fi

    - name: Deploy new container to Azure
      run: |
        echo "🚀 Deploying new container with MyPersn pattern..."

        az container create \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name ${{ env.CONTAINER_NAME }} \
          --image ${{ env.REGISTRY_NAME }}.azurecr.io/${{ steps.deploy-info.outputs.image-tag }} \
          --registry-login-server ${{ env.REGISTRY_NAME }}.azurecr.io \
          --registry-username ${{ secrets.ACR_USERNAME }} \
          --registry-password ${{ secrets.ACR_PASSWORD }} \
          --dns-name-label gt-automotives-backend-prod \
          --ports 3000 \
          --cpu 1 \
          --memory 2 \
          --environment-variables \
            NODE_ENV=production \
            HOST=0.0.0.0 \
            PORT=3000 \
            DATABASE_URL="${{ secrets.PRODUCTION_DATABASE_URL }}" \
            CLERK_PUBLISHABLE_KEY="${{ secrets.CLERK_PUBLISHABLE_KEY }}" \
            CLERK_SECRET_KEY="${{ secrets.CLERK_SECRET_KEY }}" \
            CLERK_JWKS_URL="${{ secrets.CLERK_JWKS_URL }}" \
            CLERK_API_URL="https://api.clerk.com" \
          --restart-policy Always

    - name: Wait for container startup
      run: |
        echo "⏳ Waiting for container to start..."
        sleep 60

        echo "🔍 Checking container status..."
        CONTAINER_STATE=$(az container show \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name ${{ env.CONTAINER_NAME }} \
          --query "containers[0].instanceView.currentState.state" -o tsv)

        echo "📊 Container state: $CONTAINER_STATE"

    - name: Verify deployment
      run: |
        echo "🔍 Getting container information..."

        CONTAINER_IP=$(az container show \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name ${{ env.CONTAINER_NAME }} \
          --query "ipAddress.ip" -o tsv)

        CONTAINER_FQDN=$(az container show \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name ${{ env.CONTAINER_NAME }} \
          --query "ipAddress.fqdn" -o tsv)

        echo "🌐 Container IP: $CONTAINER_IP"
        echo "🌐 Container FQDN: $CONTAINER_FQDN"

        # Test health endpoint
        echo "🏥 Testing health endpoint..."
        if curl -f "http://$CONTAINER_FQDN:3000/health" --max-time 10; then
          echo "✅ Health check successful!"
        else
          echo "❌ Health check failed, checking logs..."
          az container logs --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.CONTAINER_NAME }} --tail 50
        fi

    - name: Create deployment summary
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Build Number:** \`${{ steps.deploy-info.outputs.build-number }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Container Pattern:** MyPersn source-based build" >> $GITHUB_STEP_SUMMARY
        echo "**Image:** \`${{ env.REGISTRY_NAME }}.azurecr.io/${{ steps.deploy-info.outputs.image-tag }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🌐 Access Information" >> $GITHUB_STEP_SUMMARY
        echo "- **Health Check:** http://gt-automotives-backend-prod.canadacentral.azurecontainer.io:3000/health" >> $GITHUB_STEP_SUMMARY
        echo "- **API Base:** http://gt-automotives-backend-prod.canadacentral.azurecontainer.io:3000/api" >> $GITHUB_STEP_SUMMARY

    - name: Deployment completed
      run: |
        echo "✅ Deployment completed successfully!"
        echo "🏗️ Build: ${{ steps.deploy-info.outputs.build-number }}"
        echo "🐳 Image: ${{ env.REGISTRY_NAME }}.azurecr.io/${{ steps.deploy-info.outputs.image-tag }}"
        echo "🌐 Health: http://gt-automotives-backend-prod.canadacentral.azurecontainer.io:3000/health"