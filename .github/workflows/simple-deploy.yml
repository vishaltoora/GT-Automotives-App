name: Deploy Build

on:
  workflow_dispatch:
    inputs:
      build_commit:
        description: 'Build to deploy (commit SHA or "latest" for most recent)'
        required: true
        default: 'latest'
        type: string
      deploy_backend:
        description: 'Deploy Backend'
        required: true
        default: true
        type: boolean
      deploy_frontend:
        description: 'Deploy Frontend'  
        required: true
        default: true
        type: boolean

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Resolve build commit
      id: resolve_commit
      run: |
        if [ "${{ inputs.build_commit }}" = "latest" ]; then
          COMMIT_SHA="${{ github.sha }}"
          echo "Using latest commit from main branch: $COMMIT_SHA"
        else
          COMMIT_SHA="${{ inputs.build_commit }}"
          echo "Using specified commit: $COMMIT_SHA"
        fi
        echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
        echo "üì¶ Build to deploy: $COMMIT_SHA"
        
    - name: Checkout specific build
      uses: actions/checkout@v4
      with:
        ref: ${{ steps.resolve_commit.outputs.commit_sha }}
        
    - name: Validate build artifacts
      run: |
        echo "üîç Validating build artifacts for commit ${{ steps.resolve_commit.outputs.commit_sha }}"
        
        MISSING_ARTIFACTS=""
        
        if [ "${{ inputs.deploy_backend }}" == "true" ]; then
          if [ ! -f "server/dist/main.js" ]; then
            echo "‚ùå Backend build artifact missing: server/dist/main.js"
            MISSING_ARTIFACTS="backend "
          else
            echo "‚úÖ Backend build artifact found: server/dist/main.js"
          fi
        fi
        
        if [ "${{ inputs.deploy_frontend }}" == "true" ]; then
          if [ ! -f "apps/webApp/dist/index.html" ]; then
            echo "‚ùå Frontend build artifact missing: apps/webApp/dist/index.html"
            MISSING_ARTIFACTS="${MISSING_ARTIFACTS}frontend"
          else
            echo "‚úÖ Frontend build artifact found: apps/webApp/dist/index.html"
          fi
        fi
        
        if [ -n "$MISSING_ARTIFACTS" ]; then
          echo ""
          echo "‚ùå Build artifacts missing for: $MISSING_ARTIFACTS"
          echo "üí° Make sure to build and commit artifacts before deploying:"
          echo "   yarn nx build server --configuration=production"
          echo "   yarn nx build webApp --configuration=production"
          echo "   git add server/dist/ apps/webApp/dist/"
          echo "   git commit -m 'build: add production build artifacts'"
          exit 1
        fi
        
        echo "‚úÖ All required build artifacts found!"
        
    - name: Display build information
      run: |
        echo "üèóÔ∏è Build Information:"
        echo "Commit SHA: ${{ steps.resolve_commit.outputs.commit_sha }}"
        echo "Backend: ${{ inputs.deploy_backend == true && '‚úÖ Will deploy' || '‚è≠Ô∏è Skip' }}"
        echo "Frontend: ${{ inputs.deploy_frontend == true && '‚úÖ Will deploy' || '‚è≠Ô∏è Skip' }}"
        echo ""
        echo "üìÖ Commit details:"
        git log --oneline -1 ${{ steps.resolve_commit.outputs.commit_sha }}
        
    - name: Create deployment package
      run: |
        mkdir -p deployment
        
        if [ "${{ inputs.deploy_backend }}" == "true" ]; then
          cp -r server/dist deployment/server
          
          # Create production package.json with necessary dependencies
          cat > deployment/server-package.json << 'EOF'
        {
          "name": "gt-automotive-server",
          "version": "1.0.0",
          "main": "dist/main.js",
          "scripts": {
            "start": "node dist/main.js"
          },
          "dependencies": {
            "@nestjs/common": "^10.0.0",
            "@nestjs/core": "^10.0.0",
            "@nestjs/platform-express": "^10.0.0",
            "@prisma/client": "^5.0.0",
            "prisma": "^5.0.0",
            "reflect-metadata": "^0.1.13",
            "rxjs": "^7.8.1"
          }
        }
        EOF
          
          cp -r libs/database/src/lib/prisma deployment/
        fi
        
        if [ "${{ inputs.deploy_frontend }}" == "true" ]; then
          mkdir -p deployment/frontend
          cp -r apps/webApp/dist/* deployment/frontend/
        fi
        
        cp scripts/deploy/* deployment/ 2>/dev/null || true
        
        echo "DEPLOYMENT_DATE=$(date)" > deployment/deployment-info.txt
        echo "COMMIT_SHA=${{ steps.resolve_commit.outputs.commit_sha }}" >> deployment/deployment-info.txt
        echo "BUILD_TYPE=pre-built-artifacts" >> deployment/deployment-info.txt
        
    - name: Archive deployment package
      run: |
        tar -czf gt-automotive-deployment-${{ steps.resolve_commit.outputs.commit_sha }}.tar.gz -C deployment .
        
    - name: Configure AWS CLI
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: Upload to S3
      run: |
        aws s3 cp gt-automotive-deployment-${{ steps.resolve_commit.outputs.commit_sha }}.tar.gz \
          s3://${{ secrets.DEPLOYMENT_BUCKET }}/ --region us-east-1
        
    - name: Setup SSH key
      run: |
        echo "${{ secrets.LIGHTSAIL_SSH_KEY }}" > /tmp/lightsail-key.pem
        chmod 600 /tmp/lightsail-key.pem
        
    - name: Deploy to Lightsail
      run: |
        # Create simple deployment script
        cat > deploy-script.sh << 'EOF'
        #!/bin/bash
        set -e
        
        DEPLOYMENT_FILE="gt-automotive-deployment-${{ steps.resolve_commit.outputs.commit_sha }}.tar.gz"
        APP_DIR="/home/ubuntu/GT-Automotives-App"
        
        echo "üöÄ Starting deployment..."
        
        cd /tmp
        if [ ! -f "$DEPLOYMENT_FILE" ]; then
            echo "‚ùå Deployment file not found"
            exit 1
        fi
        
        echo "üì¶ Extracting deployment package..."
        rm -rf /tmp/deployment
        mkdir -p /tmp/deployment
        tar -xzf $DEPLOYMENT_FILE -C /tmp/deployment
        
        # Debug: List contents of deployment package
        echo "üìã Deployment package contents:"
        find /tmp/deployment -type f | head -20
        
        echo "‚èπÔ∏è Stopping services..."
        pm2 list | grep "gt-automotive-backend" && pm2 stop gt-automotive-backend || echo "Backend not running"
        pm2 list | grep "gt-automotive-frontend" && pm2 stop gt-automotive-frontend || echo "Frontend not running"
        
        echo "üìÅ Setting up directories..."
        mkdir -p $APP_DIR
        mkdir -p /home/ubuntu/logs
        
        echo "üóÑÔ∏è Setting up PostgreSQL..."
        # Install PostgreSQL if not already installed
        if ! command -v psql &> /dev/null; then
          echo "Installing PostgreSQL..."
          apt update
          apt install -y postgresql postgresql-contrib
          systemctl start postgresql
          systemctl enable postgresql
        else
          echo "PostgreSQL already installed"
        fi
        
        # Set up database and user
        echo "Setting up database and user..."
        sudo -u postgres psql -c "SELECT 1 FROM pg_database WHERE datname = 'gtautomotives_prod';" | grep -q 1 || sudo -u postgres createdb gtautomotives_prod
        sudo -u postgres psql -c "SELECT 1 FROM pg_roles WHERE rolname = 'gtautomotives';" | grep -q 1 || sudo -u postgres createuser --superuser gtautomotives
        sudo -u postgres psql -c "ALTER USER gtautomotives PASSWORD 'Vishal1234';"
        
        # Test database connection
        echo "Testing database connection..."
        PGPASSWORD=Vishal1234 psql -h localhost -U gtautomotives -d gtautomotives_prod -c "SELECT version();" || echo "Database connection test failed, but continuing..."
        
        if [ "${{ inputs.deploy_backend }}" == "true" ]; then
          echo "üîß Deploying backend..."
          echo "üîç DEBUG: Initial deployment package inspection:"
          echo "Contents of /tmp/deployment:"
          ls -la /tmp/deployment/ 2>/dev/null || echo "‚ùå No deployment directory"
          echo "Server files in deployment:"
          ls -la /tmp/deployment/server/ 2>/dev/null || echo "‚ùå No server in deployment"
          rm -rf $APP_DIR/server
          mkdir -p $APP_DIR/server/dist
          
          # Copy server dist files
          if [ -d "/tmp/deployment/server" ]; then
            cp -r /tmp/deployment/server/* $APP_DIR/server/dist/ 2>/dev/null || echo "Failed to copy server dist files"
          else
            echo "‚ùå No server directory in deployment package"
          fi
          
          # Copy package.json
          if [ -f "/tmp/deployment/server-package.json" ]; then
            cp /tmp/deployment/server-package.json $APP_DIR/server/package.json
          else
            echo "‚ùå No server-package.json found"
          fi
          
          # Copy prisma files
          if [ -d "/tmp/deployment/prisma" ]; then
            cp -r /tmp/deployment/prisma $APP_DIR/server/
          else
            echo "‚ùå No prisma directory found"
          fi
          
          # Debug: Check what was copied
          echo "üìã Server directory contents:"
          find $APP_DIR/server -type f | head -10
          echo "üìã Checking for main.js specifically:"
          ls -la $APP_DIR/server/dist/main.js 2>/dev/null || echo "‚ùå main.js not found"
          
          cd $APP_DIR/server
          npm install --production
          
          # Set up environment variables for Prisma
          export NODE_ENV=production
          export DATABASE_URL="postgresql://gtautomotives:Vishal1234@localhost:5432/gtautomotives_prod"
          
          npx prisma generate --schema=./prisma/schema.prisma
          npx prisma migrate deploy --schema=./prisma/schema.prisma
        fi
        
        if [ "${{ inputs.deploy_frontend }}" == "true" ]; then
          echo "üé® Deploying frontend..."
          rm -rf $APP_DIR/frontend
          mkdir -p $APP_DIR/frontend
          cp -r /tmp/deployment/frontend/* $APP_DIR/frontend/
        fi
        
        echo "‚öôÔ∏è Setting up environment and PM2 config..."
        
        # Create .env file for the application
        cat > $APP_DIR/.env << 'ENVEOF'
        NODE_ENV=production
        PORT=3000
        DATABASE_URL="postgresql://gtautomotives:Vishal1234@localhost:5432/gtautomotives_prod"
        
        # Clerk Configuration (add your production keys here)
        CLERK_SECRET_KEY=sk_test_your_key_here
        CLERK_WEBHOOK_SECRET=whsec_your_webhook_secret_here
        CLERK_JWKS_URL=https://clean-dove-53.clerk.accounts.dev/.well-known/jwks.json
        
        # JWT Configuration
        JWT_SECRET=your-very-strong-production-jwt-secret-minimum-32-characters
        
        # CORS
        CORS_ORIGIN=http://localhost:4200
        FRONTEND_URL=http://localhost:4200
        ENVEOF
        
        # Debug: Final check before PM2 setup
        echo "üîç FINAL DEBUG - Checking complete server structure:"
        find $APP_DIR -name "main.js" -type f 2>/dev/null || echo "‚ùå No main.js found anywhere"
        echo "üìÅ Complete server directory tree:"
        ls -la $APP_DIR/server/ 2>/dev/null || echo "‚ùå No server directory"
        ls -la $APP_DIR/server/dist/ 2>/dev/null || echo "‚ùå No server/dist directory"
        
        cat > $APP_DIR/ecosystem.config.js << 'ECOEOF'
        module.exports = {
          apps: [
            {
              name: 'gt-automotive-backend',
              script: '/home/ubuntu/GT-Automotives-App/server/dist/main.js',
              cwd: '/home/ubuntu/GT-Automotives-App',
              instances: 1,
              env_file: '/home/ubuntu/GT-Automotives-App/.env',
              error_file: '/home/ubuntu/logs/backend-err.log',
              out_file: '/home/ubuntu/logs/backend-out.log',
              time: true
            },
            {
              name: 'gt-automotive-frontend',
              script: 'serve',
              args: '-s frontend -l 4200 -C',
              cwd: '/home/ubuntu/GT-Automotives-App',
              instances: 1,
              env: { NODE_ENV: 'production' },
              error_file: '/home/ubuntu/logs/frontend-err.log',
              out_file: '/home/ubuntu/logs/frontend-out.log',
              time: true
            }
          ]
        };
        ECOEOF
        
        echo "‚ñ∂Ô∏è Starting services..."
        cd $APP_DIR
        if [ "${{ inputs.deploy_backend }}" == "true" ]; then
          pm2 start ecosystem.config.js --only gt-automotive-backend --update-env || pm2 reload gt-automotive-backend
        fi
        if [ "${{ inputs.deploy_frontend }}" == "true" ]; then
          pm2 start ecosystem.config.js --only gt-automotive-frontend --update-env || pm2 reload gt-automotive-frontend
        fi
        
        echo "‚úÖ Deployment completed!"
        pm2 status
        EOF
        
        chmod +x deploy-script.sh
        
        # Copy files and execute
        scp -o StrictHostKeyChecking=no -i /tmp/lightsail-key.pem \
          gt-automotive-deployment-${{ steps.resolve_commit.outputs.commit_sha }}.tar.gz ubuntu@${{ secrets.LIGHTSAIL_IP }}:/tmp/
        
        scp -o StrictHostKeyChecking=no -i /tmp/lightsail-key.pem \
          deploy-script.sh ubuntu@${{ secrets.LIGHTSAIL_IP }}:/tmp/
          
        ssh -o StrictHostKeyChecking=no -i /tmp/lightsail-key.pem \
          ubuntu@${{ secrets.LIGHTSAIL_IP }} 'chmod +x /tmp/deploy-script.sh && sudo /tmp/deploy-script.sh'
        
    - name: Deployment Summary
      run: |
        echo "‚úÖ Deployment completed successfully!"
        echo "Build: ${{ steps.resolve_commit.outputs.commit_sha }}"
        echo "Backend: ${{ inputs.deploy_backend && 'Deployed' || 'Skipped' }}"
        echo "Frontend: ${{ inputs.deploy_frontend && 'Deployed' || 'Skipped' }}"
        echo ""
        echo "üèóÔ∏è Build details:"
        git log --oneline -1 ${{ steps.resolve_commit.outputs.commit_sha }}