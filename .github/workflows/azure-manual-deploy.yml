name: Manual Azure Deployment

on:
  workflow_dispatch:
    inputs:
      component:
        description: 'Component to deploy'
        required: true
        type: choice
        options:
          - 'backend'
          - 'frontend'
          - 'both'
          - 'database-only'
        default: 'both'
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - 'production'
          - 'staging'
        default: 'production'
      skip_tests:
        description: 'Skip validation tests'
        required: false
        type: boolean
        default: false

env:
  NODE_VERSION: '20'
  AZURE_RESOURCE_GROUP: 'gt-automotive-prod'
  AZURE_CONTAINER_REGISTRY: 'gtautomotiveregistry'
  BACKEND_CONTAINER_NAME: 'gt-backend'

jobs:
  validate-inputs:
    name: üîç Validate Deployment
    runs-on: ubuntu-latest
    steps:
      - name: Validate deployment inputs
        run: |
          echo "üéØ Manual Deployment Configuration"
          echo "Component: ${{ github.event.inputs.component }}"
          echo "Environment: ${{ github.event.inputs.environment }}"
          echo "Skip Tests: ${{ github.event.inputs.skip_tests }}"
          echo "Triggered by: ${{ github.actor }}"
          echo "Commit: ${{ github.sha }}"
          echo ""
          
          if [ "${{ github.event.inputs.environment }}" = "production" ]; then
            echo "‚ö†Ô∏è  PRODUCTION DEPLOYMENT - Please ensure:"
            echo "1. All tests have passed"
            echo "2. Changes have been reviewed"
            echo "3. Database backups are current"
            echo "4. Stakeholders have been notified"
          fi

  quick-tests:
    name: üß™ Quick Validation
    runs-on: ubuntu-latest
    if: github.event.inputs.skip_tests != 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Quick lint check
        run: yarn lint --max-warnings=10
        continue-on-error: true

      - name: TypeScript check
        run: yarn typecheck
        continue-on-error: true

  deploy-backend:
    name: üê≥ Deploy Backend Container
    runs-on: ubuntu-latest
    needs: [validate-inputs]
    if: contains('backend,both', github.event.inputs.component)
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Build and deploy backend
        run: |
          echo "üê≥ Building backend container..."
          
          # Build directly in Azure Container Registry
          az acr build \
            --registry ${{ env.AZURE_CONTAINER_REGISTRY }} \
            --image gt-backend:manual-${{ github.run_number }} \
            --image gt-backend:latest \
            --file Dockerfile.backend \
            .

      - name: Update container instance
        run: |
          echo "üîÑ Updating container instance..."
          
          # Delete existing container
          az container delete \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name ${{ env.BACKEND_CONTAINER_NAME }} \
            --yes || true
          
          # Wait for deletion to complete
          sleep 30
          
          # Create new container with updated image
          az container create \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name ${{ env.BACKEND_CONTAINER_NAME }} \
            --image ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/gt-backend:latest \
            --cpu 1 \
            --memory 1.5 \
            --registry-login-server ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io \
            --registry-username ${{ env.AZURE_CONTAINER_REGISTRY }} \
            --registry-password ${{ secrets.ACR_PASSWORD }} \
            --ports 3000 \
            --dns-name-label gt-backend \
            --location eastus \
            --environment-variables \
              NODE_ENV=production \
              DATABASE_URL="${{ secrets.DATABASE_URL }}" \
              CLERK_SECRET_KEY="${{ secrets.CLERK_SECRET_KEY }}" \
              CLERK_PUBLISHABLE_KEY="${{ secrets.CLERK_PUBLISHABLE_KEY }}" \
              CLERK_JWKS_URL="${{ secrets.CLERK_JWKS_URL }}" \
              JWT_SECRET="${{ secrets.JWT_SECRET }}" \
              PORT=3000 \
              CORS_ORIGIN="${{ secrets.FRONTEND_URL }}" \
            --restart-policy OnFailure

      - name: Wait and verify backend
        run: |
          echo "‚è≥ Waiting for container to start..."
          sleep 60
          
          # Get container FQDN and test
          BACKEND_FQDN=$(az container show \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name ${{ env.BACKEND_CONTAINER_NAME }} \
            --query ipAddress.fqdn -o tsv)
          
          echo "Backend URL: http://$BACKEND_FQDN:3000"
          
          # Test health endpoint
          for i in {1..5}; do
            if curl -f "http://$BACKEND_FQDN:3000/api/health"; then
              echo "‚úÖ Backend deployment successful!"
              break
            else
              echo "‚è≥ Waiting for backend... (attempt $i/5)"
              sleep 30
            fi
          done

  deploy-frontend:
    name: üåê Deploy Frontend
    runs-on: ubuntu-latest
    needs: [validate-inputs]
    if: contains('frontend,both', github.event.inputs.component)
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies and build
        run: |
          yarn install --frozen-lockfile
          yarn db:generate

      - name: Build frontend
        env:
          VITE_API_URL: ${{ secrets.VITE_API_URL }}
          VITE_CLERK_PUBLISHABLE_KEY: ${{ secrets.VITE_CLERK_PUBLISHABLE_KEY }}
          NODE_ENV: production
        run: |
          echo "üé® Building frontend..."
          yarn nx build webApp --prod

      - name: Login to Azure and deploy
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Storage
        run: |
          echo "üöÄ Deploying to Azure Storage..."
          
          # Upload files
          az storage blob upload-batch \
            --account-name ${{ secrets.STORAGE_ACCOUNT_NAME }} \
            --account-key "${{ secrets.STORAGE_ACCOUNT_KEY }}" \
            --source dist/apps/webApp \
            --destination '$web' \
            --overwrite \
            --content-cache-control "public, max-age=31536000, immutable" \
            --exclude "index.html"
          
          # Upload index.html with no-cache
          az storage blob upload \
            --account-name ${{ secrets.STORAGE_ACCOUNT_NAME }} \
            --account-key "${{ secrets.STORAGE_ACCOUNT_KEY }}" \
            --container-name '$web' \
            --file dist/apps/webApp/index.html \
            --name index.html \
            --content-cache-control "no-cache, no-store, must-revalidate" \
            --content-type "text/html" \
            --overwrite

      - name: Purge CDN cache
        run: |
          if [ -n "${{ secrets.CDN_PROFILE_NAME }}" ]; then
            echo "üîÑ Purging CDN cache..."
            az cdn endpoint purge \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --profile-name ${{ secrets.CDN_PROFILE_NAME }} \
              --name ${{ secrets.CDN_ENDPOINT_NAME }} \
              --content-paths "/*" || echo "CDN purge failed"
          fi
          
          echo "‚úÖ Frontend deployment complete!"

  database-migration:
    name: üìä Database Migration
    runs-on: ubuntu-latest
    needs: [validate-inputs]
    if: contains('backend,both,database-only', github.event.inputs.component)
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: |
          yarn install --frozen-lockfile
          yarn db:generate

      - name: Run database migrations
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          echo "üìä Running database migrations..."
          
          # Show current migration status
          echo "Current migration status:"
          yarn prisma migrate status --schema=libs/database/src/lib/prisma/schema.prisma || true
          
          # Run migrations
          yarn prisma migrate deploy --schema=libs/database/src/lib/prisma/schema.prisma
          
          echo "‚úÖ Database migrations complete!"

      - name: Verify database schema
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          echo "üîç Verifying database schema..."
          yarn prisma db pull --schema=libs/database/src/lib/prisma/schema.prisma --print
          echo "‚úÖ Schema verification complete!"

  deployment-summary:
    name: üìã Manual Deployment Summary
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend, database-migration]
    if: always()
    
    steps:
      - name: Generate summary report
        run: |
          echo "## üöÄ Manual Azure Deployment Report"
          echo ""
          echo "**Deployment Details:**"
          echo "- Component: ${{ github.event.inputs.component }}"
          echo "- Environment: ${{ github.event.inputs.environment }}"
          echo "- Commit: ${{ github.sha }}"
          echo "- Triggered by: ${{ github.actor }}"
          echo "- Date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo ""
          
          echo "**Results:**"
          if [ "${{ contains(github.event.inputs.component, 'backend') || github.event.inputs.component == 'both' }}" = "true" ]; then
            echo "- Backend: ${{ needs.deploy-backend.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }}"
          fi
          
          if [ "${{ contains(github.event.inputs.component, 'frontend') || github.event.inputs.component == 'both' }}" = "true" ]; then
            echo "- Frontend: ${{ needs.deploy-frontend.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }}"
          fi
          
          if [ "${{ contains(github.event.inputs.component, 'backend') || github.event.inputs.component == 'both' || github.event.inputs.component == 'database-only' }}" = "true" ]; then
            echo "- Database: ${{ needs.database-migration.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }}"
          fi
          echo ""
          
          # Check if any deployment failed
          BACKEND_FAILED="${{ needs.deploy-backend.result == 'failure' }}"
          FRONTEND_FAILED="${{ needs.deploy-frontend.result == 'failure' }}"
          DATABASE_FAILED="${{ needs.database-migration.result == 'failure' }}"
          
          if [[ "$BACKEND_FAILED" == "true" || "$FRONTEND_FAILED" == "true" || "$DATABASE_FAILED" == "true" ]]; then
            echo "### ‚ùå Deployment Issues Detected"
            echo ""
            echo "**Troubleshooting Steps:**"
            echo "1. Check Azure Portal for resource status"
            echo "2. Verify GitHub secrets are configured"
            echo "3. Check container logs in Azure"
            echo "4. Ensure database connectivity"
            echo "5. Review GitHub Actions logs"
            exit 1
          else
            echo "### ‚úÖ Manual Deployment Successful!"
            echo ""
            echo "**Post-Deployment Checklist:**"
            echo "- [ ] Test authentication flows"
            echo "- [ ] Verify all user roles work"
            echo "- [ ] Test key functionality"
            echo "- [ ] Check application logs"
            echo "- [ ] Monitor resource usage"
          fi