name: GT-Automotive-Deploy
on:
  workflow_dispatch:
    inputs:
      buildNumber:
        type: string
        description: Build# (GT-Automotive-Build Run Number, e.g., 1, 2, 3)
        required: true
      target:
        type: choice
        description: Target Environment
        required: true
        default: 'production'
        options:
          - 'production'
          - 'staging'
      deploy_frontend:
        description: 'Deploy Frontend'
        required: true
        default: true
        type: boolean
      deploy_backend:
        description: 'Deploy Backend'
        required: true
        default: true
        type: boolean
      run_migrations:
        description: 'Run database migrations'
        required: true
        default: true
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/gt-backend
  RESOURCE_GROUP: gt-automotives-prod
  FRONTEND_APP_NAME: gt-automotives-frontend
  BACKEND_APP_NAME: gt-automotives-backend-api
  DISABLE_ERD: true
  PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: true

jobs:
  Deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.target }}
    env:
      TARGET: ${{ github.event.inputs.target }}
      BUILD_NUMBER: ${{ github.event.inputs.buildNumber }}

    steps:
      - uses: AutoModality/action-clean@v1

      - uses: actions/checkout@v4

      - name: Download Build Artifacts
        uses: dawidd6/action-download-artifact@v9
        with:
          workflow: gt-build.yml
          run_number: ${{ github.event.inputs.buildNumber }}
          workflow_conclusion: success
          if_no_artifact_found: fail
          path: ./artifacts

      - name: Extract Build Information
        run: |
          echo "üìã Extracting build information..."

          # Find and source build information from any build-info artifact
          BUILD_INFO_FILE=$(find ./artifacts -name "build-info.txt" -type f | head -1)

          if [ -f "$BUILD_INFO_FILE" ]; then
            source "$BUILD_INFO_FILE"
            echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV
            echo "BUILD_TAG=${BUILD_TAG}" >> $GITHUB_ENV
            echo "üê≥ Docker Image: ${IMAGE_TAG}"
          else
            echo "‚ùå Build information not found!"
            exit 1
          fi

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Backend Deployment (Web App with Docker container)
      - name: Deploy Backend to Web App
        if: github.event.inputs.deploy_backend == 'true'
        run: |
          echo "üöÄ Deploying backend to Azure Web App with pre-built image from GitHub Container Registry..."
          echo "üê≥ Using Docker image: ${{ env.IMAGE_TAG }}"

          # Update Web App to use new container image from GHCR
          az webapp config container set \
            --name ${{ env.BACKEND_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --docker-custom-image-name ${{ env.IMAGE_TAG }} \
            --docker-registry-server-url https://${{ env.REGISTRY }} \
            --docker-registry-server-user ${{ github.actor }} \
            --docker-registry-server-password ${{ secrets.GITHUB_TOKEN }}

          # Update environment variables
          az webapp config appsettings set \
            --name ${{ env.BACKEND_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --settings \
              DATABASE_URL="${{ secrets.DATABASE_URL }}" \
              JWT_SECRET="${{ secrets.JWT_SECRET }}" \
              CLERK_SECRET_KEY="${{ secrets.CLERK_SECRET_KEY }}" \
              CLERK_API_URL="${{ secrets.CLERK_API_URL }}" \
              CLERK_PUBLISHABLE_KEY="${{ secrets.CLERK_PUBLISHABLE_KEY }}" \
              CLERK_JWKS_URL="${{ secrets.CLERK_JWKS_URL }}" \
              FRONTEND_URL="${{ secrets.FRONTEND_URL }}" \
              INTERNAL_API_KEY="${{ secrets.INTERNAL_API_KEY }}" \
              AZURE_STORAGE_CONNECTION_STRING="${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}" \
              AZURE_STORAGE_ACCOUNT_NAME="${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}" \
              HOST="0.0.0.0" \
              PORT="8080" \
              NODE_ENV="production" \
              WEBSITES_PORT="8080"

          # Restart the Web App to pull new image
          echo "üîÑ Restarting backend Web App..."
          az webapp restart \
            --name ${{ env.BACKEND_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }}

          echo "‚úÖ Backend Web App deployment completed"

      # Database Migrations (MyPersn pattern with downloaded source)
      - name: Run Database Migrations
        if: github.event.inputs.run_migrations == 'true'
        run: |
          echo "üóÑÔ∏è Running database migrations from downloaded source..."

          # Find the repository artifact directory
          REPO_ARTIFACT=$(find ./artifacts -type d -name "repo-*" | head -1)

          if [ -z "$REPO_ARTIFACT" ]; then
            echo "‚ùå Repository artifact not found, skipping migrations"
            exit 0
          fi

          echo "üì¶ Found repository artifact: $REPO_ARTIFACT"
          cd "$REPO_ARTIFACT"

          # Setup Node.js environment for migrations
          export NVM_DIR="$HOME/.nvm"
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
          source $NVM_DIR/nvm.sh
          nvm install 20
          nvm use 20

          # Install only what's needed for migrations
          npm install -g prisma@latest
          npm install @prisma/client@latest

          # Set database URL
          export DATABASE_URL="${{ secrets.DATABASE_URL }}"
          SCHEMA_PATH="libs/database/src/lib/prisma/schema.prisma"

          if [ -f "$SCHEMA_PATH" ]; then
            echo "üìã Found Prisma schema, running migrations..."

            # Generate Prisma client
            npx prisma generate --schema="$SCHEMA_PATH"

            # Run migrations
            echo "üöÄ Running database migrations..."
            if npx prisma migrate deploy --schema="$SCHEMA_PATH"; then
              echo "‚úÖ Migrations completed successfully"
            else
              echo "‚ùå Migration failed, but continuing with deployment..."
              echo "‚ö†Ô∏è Check database connectivity and migration files"
            fi
          else
            echo "‚ö†Ô∏è No Prisma schema found at $SCHEMA_PATH, skipping migrations"
          fi

          cd ../..

      # Frontend Deployment
      - name: Deploy Frontend
        if: github.event.inputs.deploy_frontend == 'true'
        run: |
          echo "üåê Deploying frontend from pre-built artifact..."

          # Find the frontend artifact directory (not the repo artifact)
          FRONTEND_ARTIFACT_DIR=$(find ./artifacts -type d -name "frontend-build-*" | head -1)

          if [ -z "$FRONTEND_ARTIFACT_DIR" ]; then
            echo "‚ùå Frontend artifact directory not found!"
            exit 1
          fi

          # Find the zip file in the frontend artifact directory
          FRONTEND_ZIP=$(find "$FRONTEND_ARTIFACT_DIR" -name "frontend-*.zip" -type f | head -1)

          if [ -z "$FRONTEND_ZIP" ]; then
            echo "‚ùå Frontend artifact ZIP file not found!"
            echo "Searched in: $FRONTEND_ARTIFACT_DIR"
            ls -la "$FRONTEND_ARTIFACT_DIR"
            exit 1
          fi

          echo "üì¶ Found frontend artifact: $FRONTEND_ZIP"

          # Deploy to Azure App Service using pre-built artifact
          az webapp deploy \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.FRONTEND_APP_NAME }} \
            --src-path "$FRONTEND_ZIP" \
            --type zip

          echo "‚úÖ Frontend deployment completed"

      - name: Restart Frontend Service
        if: github.event.inputs.deploy_frontend == 'true'
        run: |
          echo "üîÑ Restarting frontend App Service..."
          az webapp restart \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.FRONTEND_APP_NAME }}
          echo "‚úÖ Frontend restarted successfully"

      - name: Verify Deployments
        run: |
          echo "üîç Verifying deployments..."

          # Wait for services to be ready
          sleep 30

          # Test backend if deployed
          if [ "${{ github.event.inputs.deploy_backend }}" = "true" ]; then
            echo "üîç Testing backend Web App..."
            BACKEND_URL="https://gt-automotives-backend-api.azurewebsites.net"

            for i in {1..10}; do
              echo "üìä Backend health check attempt $i..."

              HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$BACKEND_URL/health" || echo "000")
              if [ "$HTTP_CODE" = "200" ]; then
                echo "‚úÖ Backend is responding (HTTP 200, attempt $i)"
                break
              else
                echo "‚è≥ Backend not ready (HTTP $HTTP_CODE), waiting... (attempt $i/10)"
                if [ $i -eq 5 ]; then
                  echo "üîç Mid-deployment Web App status:"
                  az webapp show --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.BACKEND_APP_NAME }} --query "state" --output tsv || echo "Could not retrieve status"
                fi
                sleep 20
              fi
            done
          fi

          # Test frontend if deployed
          if [ "${{ github.event.inputs.deploy_frontend }}" = "true" ]; then
            echo "üîç Testing frontend..."
            FRONTEND_URL="https://gt-automotives.com"

            for i in {1..5}; do
              HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$FRONTEND_URL/health" || echo "000")
              if [ "$HTTP_CODE" = "200" ]; then
                echo "‚úÖ Frontend is responding (HTTP 200, attempt $i)"
                break
              else
                echo "‚è≥ Frontend not ready (HTTP $HTTP_CODE), waiting... (attempt $i/5)"
                sleep 15
              fi
            done
          fi

      - name: Create Deployment Summary
        run: |
          echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Build Number:** \`${{ env.BUILD_NUMBER }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Target Environment:** \`${{ env.TARGET }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Docker Image:** \`${{ env.IMAGE_TAG }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment Pattern:** Artifact-based Web App deployment" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment Time:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Component status
          if [ "${{ github.event.inputs.deploy_backend }}" = "true" ]; then
            echo "‚úÖ **Backend:** Deployed to Azure Web App (B1)" >> $GITHUB_STEP_SUMMARY
            echo "üê≥ **Backend URL:** https://gt-automotives-backend-api.azurewebsites.net" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚è≠Ô∏è **Backend:** Skipped" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ github.event.inputs.deploy_frontend }}" = "true" ]; then
            echo "‚úÖ **Frontend:** Deployed to Azure Web App (B1)" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚è≠Ô∏è **Frontend:** Skipped" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ github.event.inputs.run_migrations }}" = "true" ]; then
            echo "‚úÖ **Database:** Migrations executed from source" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚è≠Ô∏è **Database:** Migrations skipped" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üåê Production URLs" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend:** https://gt-automotives.com" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend API:** https://gt-automotives-backend-api.azurewebsites.net" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend Health:** https://gt-automotives-backend-api.azurewebsites.net/health" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üí∞ Cost Optimization" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Using GitHub Container Registry (FREE, was \$5-7/mo for ACR)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Migrated from Container Instance (\$73/mo) to Web App B1 (\$13/mo)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Total monthly cost: ~\$42-47 (down from \$109-129)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **62% total cost reduction**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ‚ö° Deployment Optimizations" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ No rebuild during deployment (uses pre-built artifacts)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Artifact-based deployment pattern" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Pre-built Docker images from build phase" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Fast Web App container updates" >> $GITHUB_STEP_SUMMARY

      - name: Deployment Completed
        run: |
          echo "üéâ Deployment completed successfully!"
          echo "üèóÔ∏è Build: ${{ env.BUILD_NUMBER }}"
          echo "üê≥ Docker Image: ${{ env.IMAGE_TAG }}"
          echo "üåê Frontend: https://gt-automotives.com"
          echo "üîß Backend: https://gt-automotives-backend-api.azurewebsites.net"
          echo "‚ö° Deployed using artifact-based pattern"
          echo "üí∞ Cost-optimized Web App B1 deployment"