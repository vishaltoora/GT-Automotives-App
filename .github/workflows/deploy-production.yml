name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      deploy_backend:
        description: 'Deploy Backend'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'
      deploy_frontend:
        description: 'Deploy Frontend'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

env:
  AWS_REGION: ca-central-1
  BUCKET_NAME: gt-automotive-frontend
  CONTAINER_SERVICE_NAME: gt-automotives-backend

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'yarn'
          
      - name: Install dependencies
        run: yarn install --frozen-lockfile
        
      - name: Run linting
        run: yarn lint
        continue-on-error: true
        
      - name: Run type checking
        run: yarn typecheck
        continue-on-error: true
        
      - name: Run tests
        run: yarn test --passWithNoTests
        continue-on-error: true

  deploy-backend:
    name: Deploy Backend to Lightsail
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.inputs.deploy_backend == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Login to Amazon Lightsail Container Service
        run: |
          aws lightsail get-container-service-powers --service-name ${{ env.CONTAINER_SERVICE_NAME }} || true
          
      - name: Build Docker image
        run: |
          docker build -f Dockerfile.server -t ${{ env.CONTAINER_SERVICE_NAME }}:${{ github.sha }} .
          
      - name: Push Docker image to Lightsail
        run: |
          aws lightsail push-container-image \
            --service-name ${{ env.CONTAINER_SERVICE_NAME }} \
            --label api-${{ github.sha }} \
            --image ${{ env.CONTAINER_SERVICE_NAME }}:${{ github.sha }}
            
      - name: Get pushed image name
        id: image
        run: |
          IMAGE=$(aws lightsail get-container-images \
            --service-name ${{ env.CONTAINER_SERVICE_NAME }} \
            --query "containerImages[0].image" \
            --output text)
          echo "name=$IMAGE" >> $GITHUB_OUTPUT
          
      - name: Create deployment configuration
        run: |
          cat > container-deployment.json <<EOF
          {
            "containers": {
              "api": {
                "image": "${{ steps.image.outputs.name }}",
                "ports": {
                  "3000": "HTTP"
                },
                "environment": {
                  "NODE_ENV": "production",
                  "PORT": "3000",
                  "DATABASE_URL": "${{ secrets.DATABASE_URL_PROD }}",
                  "CLERK_SECRET_KEY": "${{ secrets.CLERK_SECRET_KEY_PROD }}",
                  "CLERK_PUBLISHABLE_KEY": "${{ secrets.CLERK_PUBLISHABLE_KEY_PROD }}",
                  "CORS_ORIGIN": "${{ secrets.FRONTEND_URL }}"
                }
              }
            },
            "publicEndpoint": {
              "containerName": "api",
              "containerPort": 3000,
              "healthCheck": {
                "healthyThreshold": 2,
                "unhealthyThreshold": 3,
                "timeoutSeconds": 5,
                "intervalSeconds": 30,
                "path": "/api/health",
                "successCodes": "200-299"
              }
            }
          }
          EOF
          
      - name: Deploy to Lightsail Container Service
        run: |
          aws lightsail create-container-service-deployment \
            --service-name ${{ env.CONTAINER_SERVICE_NAME }} \
            --cli-input-json file://container-deployment.json
            
      - name: Wait for deployment to complete
        run: |
          echo "Waiting for deployment to complete..."
          sleep 30
          
          for i in {1..20}; do
            STATUS=$(aws lightsail get-container-service-deployments \
              --service-name ${{ env.CONTAINER_SERVICE_NAME }} \
              --query "deployments[0].state" \
              --output text)
            
            echo "Deployment status: $STATUS"
            
            if [ "$STATUS" = "ACTIVE" ]; then
              echo "Deployment successful!"
              break
            elif [ "$STATUS" = "FAILED" ]; then
              echo "Deployment failed!"
              exit 1
            fi
            
            sleep 15
          done

  deploy-frontend:
    name: Deploy Frontend to Lightsail Bucket
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.inputs.deploy_frontend == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'yarn'
          
      - name: Install dependencies
        run: yarn install --frozen-lockfile
        
      - name: Build frontend
        run: yarn nx build webApp --prod
        env:
          VITE_API_URL: ${{ secrets.API_URL }}
          VITE_CLERK_PUBLISHABLE_KEY: ${{ secrets.CLERK_PUBLISHABLE_KEY_PROD }}
          NODE_ENV: production
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Deploy to S3/Lightsail Bucket
        run: |
          # Upload all files except index.html with cache headers
          aws s3 sync apps/webApp/dist s3://${{ env.BUCKET_NAME }} \
            --delete \
            --cache-control "public, max-age=31536000, immutable" \
            --exclude "index.html" \
            --exclude "*.map"
            
          # Upload index.html with no-cache headers
          aws s3 cp apps/webApp/dist/index.html s3://${{ env.BUCKET_NAME }}/ \
            --cache-control "no-cache, no-store, must-revalidate" \
            --content-type "text/html"
            
      - name: Invalidate CDN cache
        run: |
          # Get distribution name associated with bucket
          DISTRIBUTION=$(aws lightsail get-distributions \
            --query "distributions[?origin.name=='${{ env.BUCKET_NAME }}'].name" \
            --output text)
          
          if [ -n "$DISTRIBUTION" ]; then
            echo "Invalidating CDN distribution: $DISTRIBUTION"
            aws lightsail reset-distribution-cache \
              --distribution-name $DISTRIBUTION \
              --paths "/*"
          else
            echo "No CDN distribution found for bucket"
          fi
          
  notify:
    name: Deployment Notification
    needs: [deploy-backend, deploy-frontend]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Deployment Status
        run: |
          if [ "${{ needs.deploy-backend.result }}" = "success" ] && [ "${{ needs.deploy-frontend.result }}" = "success" ]; then
            echo "✅ Deployment successful!"
          else
            echo "❌ Deployment failed!"
            exit 1
          fi