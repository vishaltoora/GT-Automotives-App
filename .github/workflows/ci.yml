name: CI - Pull Request Validation

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: '18'
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}

jobs:
  lint:
    name: üîç Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run linting
        run: yarn lint

      - name: Run type checking
        run: yarn typecheck

  test:
    name: üß™ Run Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: gt_automotive_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Generate Prisma Client
        run: yarn db:generate

      - name: Run database migrations
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/gt_automotive_test
        run: yarn prisma migrate deploy --schema=libs/database/src/lib/prisma/schema.prisma

      - name: Run tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/gt_automotive_test
          NODE_ENV: test
        run: yarn test

  build-validation:
    name: üèóÔ∏è Validate Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Generate Prisma Client
        run: yarn db:generate

      - name: Build applications
        env:
          VITE_CLERK_PUBLISHABLE_KEY: "pk_test_placeholder"
          VITE_API_URL: "http://localhost:3000"
          NODE_ENV: production
        run: yarn build

  affected-check:
    name: üìä Affected Projects Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Derive SHAs for base and head
        uses: nrwl/nx-set-shas@v4

      - name: List affected projects
        run: |
          echo "üîç Affected Projects:"
          yarn nx affected:apps --base=${{ env.NX_BASE }} --head=${{ env.NX_HEAD }}
          echo "üì¶ Affected Libraries:"
          yarn nx affected:libs --base=${{ env.NX_BASE }} --head=${{ env.NX_HEAD }}

  security-scan:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    continue-on-error: true  # Don't block PR on security warnings
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run security audit
        run: yarn audit --audit-level=high || echo "::warning::Security vulnerabilities found"

  pr-status:
    name: ‚úÖ PR Status Check
    runs-on: ubuntu-latest
    needs: [lint, test, build-validation]
    if: always()
    steps:
      - name: Check status
        run: |
          if [[ "${{ needs.lint.result }}" == "failure" || 
                "${{ needs.test.result }}" == "failure" || 
                "${{ needs.build-validation.result }}" == "failure" ]]; then
            echo "‚ùå PR validation failed"
            exit 1
          else
            echo "‚úÖ PR validation passed"
          fi