import { QuotationsService } from './quotations.service';
import { CreateQuoteDto } from '../common/dto/quotation.dto';
import { UpdateQuoteDto } from '../common/dto/quotation.dto';
export declare class QuotationsController {
    private readonly quotationsService;
    constructor(quotationsService: QuotationsService);
    create(createQuoteDto: CreateQuoteDto, req: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        email: string | null;
        status: import("@prisma/client").$Enums.QuotationStatus;
        notes: string | null;
        phone: string | null;
        address: string | null;
        businessName: string | null;
        taxAmount: import(".prisma/client/runtime/library").Decimal;
        createdBy: string;
        total: import(".prisma/client/runtime/library").Decimal;
        subtotal: import(".prisma/client/runtime/library").Decimal;
        taxRate: import(".prisma/client/runtime/library").Decimal;
        gstRate: import(".prisma/client/runtime/library").Decimal | null;
        gstAmount: import(".prisma/client/runtime/library").Decimal | null;
        pstRate: import(".prisma/client/runtime/library").Decimal | null;
        pstAmount: import(".prisma/client/runtime/library").Decimal | null;
        customerName: string;
        vehicleMake: string | null;
        vehicleModel: string | null;
        vehicleYear: number | null;
        validUntil: Date | null;
        quotationNumber: string;
        convertedToInvoiceId: string | null;
    }>;
    findAll(): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        email: string | null;
        status: import("@prisma/client").$Enums.QuotationStatus;
        notes: string | null;
        phone: string | null;
        address: string | null;
        businessName: string | null;
        taxAmount: import(".prisma/client/runtime/library").Decimal;
        createdBy: string;
        total: import(".prisma/client/runtime/library").Decimal;
        subtotal: import(".prisma/client/runtime/library").Decimal;
        taxRate: import(".prisma/client/runtime/library").Decimal;
        gstRate: import(".prisma/client/runtime/library").Decimal | null;
        gstAmount: import(".prisma/client/runtime/library").Decimal | null;
        pstRate: import(".prisma/client/runtime/library").Decimal | null;
        pstAmount: import(".prisma/client/runtime/library").Decimal | null;
        customerName: string;
        vehicleMake: string | null;
        vehicleModel: string | null;
        vehicleYear: number | null;
        validUntil: Date | null;
        quotationNumber: string;
        convertedToInvoiceId: string | null;
    }[]>;
    search(customerName?: string, quotationNumber?: string, status?: string, startDate?: string, endDate?: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        email: string | null;
        status: import("@prisma/client").$Enums.QuotationStatus;
        notes: string | null;
        phone: string | null;
        address: string | null;
        businessName: string | null;
        taxAmount: import(".prisma/client/runtime/library").Decimal;
        createdBy: string;
        total: import(".prisma/client/runtime/library").Decimal;
        subtotal: import(".prisma/client/runtime/library").Decimal;
        taxRate: import(".prisma/client/runtime/library").Decimal;
        gstRate: import(".prisma/client/runtime/library").Decimal | null;
        gstAmount: import(".prisma/client/runtime/library").Decimal | null;
        pstRate: import(".prisma/client/runtime/library").Decimal | null;
        pstAmount: import(".prisma/client/runtime/library").Decimal | null;
        customerName: string;
        vehicleMake: string | null;
        vehicleModel: string | null;
        vehicleYear: number | null;
        validUntil: Date | null;
        quotationNumber: string;
        convertedToInvoiceId: string | null;
    }[]>;
    findOne(id: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        email: string | null;
        status: import("@prisma/client").$Enums.QuotationStatus;
        notes: string | null;
        phone: string | null;
        address: string | null;
        businessName: string | null;
        taxAmount: import(".prisma/client/runtime/library").Decimal;
        createdBy: string;
        total: import(".prisma/client/runtime/library").Decimal;
        subtotal: import(".prisma/client/runtime/library").Decimal;
        taxRate: import(".prisma/client/runtime/library").Decimal;
        gstRate: import(".prisma/client/runtime/library").Decimal | null;
        gstAmount: import(".prisma/client/runtime/library").Decimal | null;
        pstRate: import(".prisma/client/runtime/library").Decimal | null;
        pstAmount: import(".prisma/client/runtime/library").Decimal | null;
        customerName: string;
        vehicleMake: string | null;
        vehicleModel: string | null;
        vehicleYear: number | null;
        validUntil: Date | null;
        quotationNumber: string;
        convertedToInvoiceId: string | null;
    }>;
    update(id: string, updateQuoteDto: UpdateQuoteDto): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        email: string | null;
        status: import("@prisma/client").$Enums.QuotationStatus;
        notes: string | null;
        phone: string | null;
        address: string | null;
        businessName: string | null;
        taxAmount: import(".prisma/client/runtime/library").Decimal;
        createdBy: string;
        total: import(".prisma/client/runtime/library").Decimal;
        subtotal: import(".prisma/client/runtime/library").Decimal;
        taxRate: import(".prisma/client/runtime/library").Decimal;
        gstRate: import(".prisma/client/runtime/library").Decimal | null;
        gstAmount: import(".prisma/client/runtime/library").Decimal | null;
        pstRate: import(".prisma/client/runtime/library").Decimal | null;
        pstAmount: import(".prisma/client/runtime/library").Decimal | null;
        customerName: string;
        vehicleMake: string | null;
        vehicleModel: string | null;
        vehicleYear: number | null;
        validUntil: Date | null;
        quotationNumber: string;
        convertedToInvoiceId: string | null;
    }>;
    remove(id: string): Promise<void>;
    convertToInvoice(id: string, body: {
        customerId: string;
        vehicleId?: string;
    }): Promise<any>;
}
//# sourceMappingURL=quotations.controller.d.ts.map