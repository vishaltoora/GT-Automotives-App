{"version":3,"file":"main.js","mappings":";;;;;;;AAAA,2C;;;;;;ACAA,yC;;;;;;ACAa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,iBAAiB;AACjB,gBAAgB,mBAAO,CAAC,CAAO;AAC/B,iBAAiB,mBAAO,CAAC,CAAgB;AACzC,iBAAiB,mBAAO,CAAC,CAAgB;AACzC,eAAe,mBAAO,CAAC,CAAc;AACrC,yBAAyB,mBAAO,CAAC,CAAkB;AACnD,sBAAsB,mBAAO,CAAC,CAAe;AAC7C,sBAAsB,mBAAO,CAAC,CAAqB;AACnD,uBAAuB,mBAAO,CAAC,EAAuB;AACtD,uBAAuB,mBAAO,CAAC,EAAuB;AACtD,2BAA2B,mBAAO,CAAC,EAA+B;AAClE,0BAA0B,mBAAO,CAAC,EAA6B;AAC/D,0BAA0B,mBAAO,CAAC,EAA6B;AAC/D,4BAA4B,mBAAO,CAAC,EAAiC;AACrE,yBAAyB,mBAAO,CAAC,EAA+B;AAChE,qBAAqB,mBAAO,CAAC,EAA2B;AACxD;AACA;AACA,iBAAiB;AACjB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;;;;;;;ACjDA,kC;;;;;;ACAA,2C;;;;;;ACAa;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,qBAAqB;AACrB,gBAAgB,mBAAO,CAAC,CAAO;AAC/B,iBAAiB,mBAAO,CAAC,CAAgB;AACzC,sBAAsB,mBAAO,CAAC,CAAe;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;;;;;;;ACzBa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,kBAAkB;AAClB,gBAAgB,mBAAO,CAAC,CAAO;AAC/B,iBAAiB,mBAAO,CAAC,CAAgB;AACzC;AACA;AACA,iBAAiB;AACjB;AACA;AACA,kBAAkB;AAClB,kBAAkB;AAClB;AACA;;;;;;;ACba;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,kBAAkB;AAClB,gBAAgB,mBAAO,CAAC,CAAO;AAC/B,iBAAiB,mBAAO,CAAC,CAAgB;AACzC,cAAc,mBAAO,CAAC,CAAa;AACnC,mBAAmB,mBAAO,CAAC,EAAkB;AAC7C,iBAAiB,mBAAO,CAAC,CAAgB;AACzC,uBAAuB,mBAAO,CAAC,EAAgB;AAC/C,0BAA0B,mBAAO,CAAC,EAAmB;AACrD,uBAAuB,mBAAO,CAAC,EAA2B;AAC1D,6BAA6B,mBAAO,CAAC,EAAiC;AACtE,yBAAyB,mBAAO,CAAC,EAAyB;AAC1D,qBAAqB,mBAAO,CAAC,EAAqB;AAClD,mCAAmC,mBAAO,CAAC,EAAqC;AAChF,0BAA0B,mBAAO,CAAC,EAAuC;AACzE,0BAA0B,mBAAO,CAAC,EAAuC;AACzE,2BAA2B,mBAAO,CAAC,EAAwC;AAC3E,mBAAmB,mBAAO,CAAC,EAAyB;AACpD;AACA;AACA,kBAAkB;AAClB,kBAAkB;AAClB;AACA;AACA,iDAAiD,8BAA8B;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;;;;;;ACpDA,wC;;;;;;ACAA,6C;;;;;;ACAa;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,mBAAmB;AACnB,gBAAgB,mBAAO,CAAC,CAAO;AAC/B,iBAAiB,mBAAO,CAAC,CAAgB;AACzC,cAAc,mBAAO,CAAC,CAAa;AACnC,iBAAiB,mBAAO,CAAC,CAAgB;AACzC,0BAA0B,mBAAO,CAAC,EAAuC;AACzE,0BAA0B,mBAAO,CAAC,EAAuC;AACzE,2BAA2B,mBAAO,CAAC,EAAwC;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,cAAc,QAAQ,6FAA+B;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,qBAAqB;AACpD,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,2BAA2B,yBAAyB;AACpD,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,qBAAqB;AACpD,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,2BAA2B,sBAAsB;AACjD,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,kBAAkB;AACnD;AACA;AACA;AACA;AACA,mBAAmB;AACnB,mBAAmB;AACnB;AACA;AACA;;;;;;;ACtJa;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,sBAAsB;AACtB,gBAAgB,mBAAO,CAAC,CAAO;AAC/B,iBAAiB,mBAAO,CAAC,CAAgB;AACzC,mBAAmB,mBAAO,CAAC,EAAyB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,qBAAqB,IAAI;AACzB;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,qBAAqB,OAAO;AAC5B;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,qBAAqB,SAAS;AAC9B;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,qBAAqB,IAAI;AACzB;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,yBAAyB,IAAI;AAC7B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,YAAY;AACjC,oBAAoB,QAAQ;AAC5B;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA,sBAAsB;AACtB,sBAAsB;AACtB;AACA;AACA;;;;;;;AC/Ga;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gBAAgB,mBAAO,CAAC,CAAO;AAC/B,qBAAqB,mBAAO,CAAC,EAAuB;AACpD,qBAAqB,mBAAO,CAAC,EAAsB;;;;;;;ACJtC;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,sBAAsB;AACtB,gBAAgB,mBAAO,CAAC,CAAO;AAC/B,iBAAiB,mBAAO,CAAC,CAAgB;AACzC,yBAAyB,mBAAO,CAAC,EAAkB;AACnD;AACA;AACA,sBAAsB;AACtB,sBAAsB;AACtB;AACA;AACA;AACA;AACA,KAAK;AACL;;;;;;;ACfa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,qBAAqB;AACrB,gBAAgB,mBAAO,CAAC,CAAO;AAC/B,iBAAiB,mBAAO,CAAC,CAAgB;AACzC,iBAAiB,mBAAO,CAAC,EAAgB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,qBAAqB;AACrB;AACA;;;;;;;ACjBA,2C;;;;;;ACAa;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,sBAAsB;AACtB,gBAAgB,mBAAO,CAAC,CAAO;AAC/B,iBAAiB,mBAAO,CAAC,CAAgB;AACzC,mBAAmB,mBAAO,CAAC,EAAyB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,IAAI;AACzB,SAAS;AACT;AACA;AACA;AACA,qBAAqB,YAAY;AACjC,SAAS;AACT;AACA;AACA;AACA,qBAAqB,QAAQ;AAC7B;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,sBAAsB;AACtB,sBAAsB;AACtB;AACA;AACA;;;;;;;AC/Ca;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,uBAAuB;AACvB,gBAAgB,mBAAO,CAAC,CAAO;AAC/B,iBAAiB,mBAAO,CAAC,CAAgB;AACzC,mBAAmB,mBAAO,CAAC,EAAyB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,qBAAqB,QAAQ;AAC7B,uBAAuB,mBAAmB;AAC1C;AACA,SAAS;AACT;AACA;AACA;AACA,qBAAqB,QAAQ;AAC7B,uBAAuB,mBAAmB;AAC1C;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,uBAAuB,mBAAmB;AAC1C,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C,SAAS;AACT;AACA;AACA,uBAAuB;AACvB,uBAAuB;AACvB;AACA;AACA;;;;;;;ACxEa;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,sBAAsB;AACtB,gBAAgB,mBAAO,CAAC,CAAO;AAC/B,iBAAiB,mBAAO,CAAC,CAAgB;AACzC,uBAAuB,mBAAO,CAAC,EAAgB;AAC/C,2BAA2B,mBAAO,CAAC,EAA+B;AAClE,iCAAiC,mBAAO,CAAC,EAAqC;AAC9E,yBAAyB,mBAAO,CAAC,EAAyB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;;;;;;;AC3Fa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,cAAc,GAAG,qBAAqB;AACtC,iBAAiB,mBAAO,CAAC,CAAgB;AACzC,qBAAqB;AACrB;AACA,cAAc;;;;;;;ACND;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,mBAAmB;AACnB,iBAAiB,mBAAO,CAAC,CAAgB;AACzC,mBAAmB;AACnB;AACA;AACA,CAAC;;;;;;;ACPY;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,oBAAoB;AACpB,gBAAgB,mBAAO,CAAC,CAAO;AAC/B,iBAAiB,mBAAO,CAAC,CAAgB;AACzC,eAAe,mBAAO,CAAC,CAAc;AACrC,mBAAmB,mBAAO,CAAC,EAAkB;AAC7C,2BAA2B,mBAAO,CAAC,EAAgC;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,eAAe;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,oBAAoB;AACpB;AACA;AACA;;;;;;;AC9Ca;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,mBAAmB;AACnB,gBAAgB,mBAAO,CAAC,CAAO;AAC/B,iBAAiB,mBAAO,CAAC,CAAgB;AACzC,mBAAmB,mBAAO,CAAC,EAAkB;AAC7C,uBAAuB,mBAAO,CAAC,EAAc;AAC7C,iBAAiB,mBAAO,CAAC,CAAgB;AACzC,0BAA0B,mBAAO,CAAC,EAA0C;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,mBAAmB;AACnB;AACA;AACA;;;;;;;ACjDA,yC;;;;;;ACAa;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,wBAAwB;AACxB,gBAAgB,mBAAO,CAAC,CAAO;AAC/B,iBAAiB,mBAAO,CAAC,CAAgB;AACzC,mBAAmB,mBAAO,CAAC,EAAkB;AAC7C,uBAAuB,mBAAO,CAAC,EAAc;AAC7C,iBAAiB,mBAAO,CAAC,CAAgB;AACzC,0BAA0B,mBAAO,CAAC,EAA0C;AAC5E,mBAAmB,mBAAO,CAAC,EAAU;AACrC,mBAAmB,mBAAO,CAAC,EAAyB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA,oCAAoC;AACpC;AACA;AACA;AACA,yBAAyB;AACzB,aAAa;AACb;AACA,iEAAiE,UAAU;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,WAAW,eAAe;AACtD;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB,wBAAwB;AACxB;AACA;AACA;;;;;;;AC/FA,qC;;;;;;ACAa;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,iBAAiB;AACjB,gBAAgB,mBAAO,CAAC,CAAO;AAC/B,iBAAiB,mBAAO,CAAC,CAAgB;AACzC,eAAe,mBAAO,CAAC,CAAc;AACrC,0BAA0B,mBAAO,CAAC,EAA+B;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,iBAAiB;AACjB;AACA;AACA;;;;;;;AC/Ba;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,aAAa,GAAG,iBAAiB;AACjC,iBAAiB,mBAAO,CAAC,CAAgB;AACzC,iBAAiB;AACjB;AACA,aAAa;;;;;;;ACNA;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,8BAA8B;AAC9B,gBAAgB,mBAAO,CAAC,CAAO;AAC/B,iBAAiB,mBAAO,CAAC,CAAgB;AACzC,iBAAiB,mBAAO,CAAC,CAAgB;AACzC,eAAe,mBAAO,CAAC,EAAM;AAC7B,uBAAuB,mBAAO,CAAC,EAAiB;AAChD,2BAA2B,mBAAO,CAAC,EAAgC;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,SAAS;AACtE;AACA,iBAAiB;AACjB;AACA;AACA,gBAAgB,sBAAsB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,KAAK;AACrB;AACA,4BAA4B,IAAI;AAChC;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;;;;;;;AC3EA,iC;;;;;;ACAa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,mBAAmB;AACnB,gBAAgB,mBAAO,CAAC,CAAO;AAC/B,iBAAiB,mBAAO,CAAC,CAAgB;AACzC,wBAAwB,mBAAO,CAAC,EAAiB;AACjD,2BAA2B,mBAAO,CAAC,EAAoB;AACvD,0BAA0B,mBAAO,CAAC,EAAgC;AAClE,0BAA0B,mBAAO,CAAC,EAAuC;AACzE,2BAA2B,mBAAO,CAAC,EAAwC;AAC3E,mBAAmB,mBAAO,CAAC,EAAyB;AACpD;AACA;AACA,mBAAmB;AACnB,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;;;;;;AC1Ba;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,oBAAoB;AACpB,gBAAgB,mBAAO,CAAC,CAAO;AAC/B,iBAAiB,mBAAO,CAAC,CAAgB;AACzC,iBAAiB,mBAAO,CAAC,CAAgB;AACzC,0BAA0B,mBAAO,CAAC,EAAgC;AAClE,0BAA0B,mBAAO,CAAC,EAAuC;AACzE,2BAA2B,mBAAO,CAAC,EAAwC;AAC3E,oCAAoC,mBAAO,CAAC,EAAU;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,uBAAuB,wCAAwC;AAC/D,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,eAAe;AACxE;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,cAAc,QAAQ,6FAA+B;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA,mGAAmG,mBAAmB;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,oBAAoB;AACpB;AACA;AACA;;;;;;;AC7MA,qC;;;;;;ACAa;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,uBAAuB;AACvB,gBAAgB,mBAAO,CAAC,CAAO;AAC/B,iBAAiB,mBAAO,CAAC,CAAgB;AACzC,wBAAwB,mBAAO,CAAC,EAAiB;AACjD,yBAAyB,mBAAO,CAAC,EAA+B;AAChE,qBAAqB,mBAAO,CAAC,EAA2B;AACxD,0BAA0B,mBAAO,CAAC,EAAoC;AACtE,iCAAiC,mBAAO,CAAC,EAA2C;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,uBAAuB;AACvuBAAuB;AACvB;AACA;AACA;AACA;;;;;;;AC/Ka;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,mBAAmB;AACnB,gBAAgB,mBAAO,CAAC,CAAO;AAC/B,iBAAiB,mBAAO,CAAC,CAAgB;AACzC,2BAA2B,mBAAO,CAAC,EAAoB;AACvD,wBAAwB,mBAAO,CAAC,EAAiB;AACjD,0BAA0B,mBAAO,CAAC,EAAgC;AAClE,2BAA2B,mBAAO,CAAC,EAAwC;AAC3E,mBAAmB,mBAAO,CAAC,EAAyB;AACpD;AACA;AACA,mBAAmB;AACnB,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;;;;;;ACpBa;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,uBAAuB;AACvB,gBAAgB,mBAAO,CAAC,CAAO;AAC/B,iBAAiB,mBAAO,CAAC,CAAgB;AACzC,wBAAwB,mBAAO,CAAC,EAAiB;AACjD,yBAAyB,mBAAO,CAAC,EAA+B;AAChE,qBAAqB,mBAAO,CAAC,EAA2B;AACxD,0BAA0B,mBAAO,CAAC,EAAoC;AACtE,iCAAiC,mBAAO,CAAC,EAA2C;AACpF,2BAA2B,mBAAO,CAAC,EAAqC;AACxE,qBAAqB,mBAAO,CAAC,EAA2B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,yEAAyE,iBAAiB;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,iBAAiB;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,iBAAiB;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,iBAAiB;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;;;;;;;AC5Pa;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,oBAAoB;AACpB,gBAAgB,mBAAO,CAAC,CAAO;AAC/B,iBAAiB,mBAAO,CAAC,CAAgB;AACzC,0BAA0B,mBAAO,CAAC,EAAgC;AAClE,2BAA2B,mBAAO,CAAC,EAAwC;AAC3E,qBAAqB,mBAAO,CAAC,EAA2B;AACxD,kBAAkB,mBAAO,CAAC,EAAgC;AAC1D,4BAA4B,mBAAO,CAAC,EAAmB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,wBAAwB,cAAc,uBAAuB;AACjI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,oBAAoB;AACpB;AACA;AACA;;;;;;;AC7Oa;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,sBAAsB;AACtB,gBAAgB,mBAAO,CAAC,CAAO;AAC/B,iBAAiB,mBAAO,CAAC,CAAgB;AACzC,mBAAmB,mBAAO,CAAC,EAAyB;AACpD,0BAA0B,mBAAO,CAAC,EAA2C;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C,SAAS;AACT;AACA;AACA;AACA,qBAAqB,IAAI;AACzB,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,qBAAqB,IAAI;AACzB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,yBAAyB,IAAI;AAC7B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mFAAmF;AACnG;AACA;AACA;AACA;AACA;AACA,2BAA2B,qBAAqB;AAChD;AACA;AACA,aAAa;AACb,qCAAqC,OAAO;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,IAAI;AAC7B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,IAAI;AAC7B,wBAAwB,uBAAuB;AAC/C,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,OAAO;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,IAAI;AACb;AACA;AACA;AACA,SAAS,IAAI;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,cAAc,IAAI,aAAa;AACvD,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA,mCAAmC,UAAU;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,aAAa;AACnC;AACA,uBAAuB,cAAc;AACrC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,YAAY;AAClC;AACA,uBAAuB,aAAa;AACpC,SAAS;AACT;AACA;AACA;AACA,sBAAsB;AACtB,sBAAsB;AACtB;AACA;AACA;;;;;;;ACjQa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,IAAI;AACzB,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,qBAAqB,IAAI;AACzB;AACA,SAAS;AACT;AACA;AACA;AACA,qBAAqB,IAAI;AACzB,SAAS;AACT;AACA;AACA;AACA,sBAAsB;;;;;;;AClCtB,sD;;;;;;ACAA,2D;;;;;;ACAA,8C;;;;;;ACAa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,uBAAuB;AACvB,gBAAgB,mBAAO,CAAC,CAAO;AAC/B,iBAAiB,mBAAO,CAAC,CAAgB;AACzC,4BAA4B,mBAAO,CAAC,EAAqB;AACzD,+BAA+B,mBAAO,CAAC,EAAwB;AAC/D,8BAA8B,mBAAO,CAAC,EAAoC;AAC1E,0BAA0B,mBAAO,CAAC,EAAuC;AACzE,2BAA2B,mBAAO,CAAC,EAAwC;AAC3E,mBAAmB,mBAAO,CAAC,EAAyB;AACpD;AACA;AACA,uBAAuB;AACvB,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;;;;;;AC1Ba;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,wBAAwB;AACxB,gBAAgB,mBAAO,CAAC,CAAO;AAC/B,iBAAiB,mBAAO,CAAC,CAAgB;AACzC,8BAA8B,mBAAO,CAAC,EAAoC;AAC1E,2BAA2B,mBAAO,CAAC,EAAwC;AAC3E,mBAAmB,mBAAO,CAAC,EAAyB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,IAAI;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,IAAI;AACzE;AACA;AACA;AACA,qBAAqB,IAAI;AACzB;AACA,qDAAqD,wCAAwC;AAC7F,oDAAoD,sCAAsC;AAC1F,+DAA+D,gCAAgC;AAC/F,+DAA+D,gCAAgC;AAC/F,iEAAiE,oCAAoC;AACrG,sEAAsE,8CAA8C;AACpH,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qCAAqC;AAC5D,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,qEAAqE,IAAI;AACzE;AACA;AACA;AACA,qBAAqB,gBAAgB;AACrC,SAAS;AACT;AACA,qBAAqB,gBAAgB;AACrC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,qBAAqB,IAAI;AACzB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB,wBAAwB;AACxB;AACA;AACA;;;;;;;AC/Ha;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,0BAA0B;AAC1B,gBAAgB,mBAAO,CAAC,CAAO;AAC/B,iBAAiB,mBAAO,CAAC,CAAgB;AACzC,mBAAmB,mBAAO,CAAC,EAAyB;AACpD,0BAA0B,mBAAO,CAAC,EAA2C;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,qBAAqB,IAAI;AACzB;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,sBAAsB,aAAa,6CAA6C;AAChF,sBAAsB,YAAY,6CAA6C;AAC/E,sBAAsB,SAAS,6CAA6C;AAC5E,sBAAsB,SAAS,6CAA6C;AAC5E,sBAAsB,WAAW,6CAA6C;AAC9E,sBAAsB,gBAAgB,6CAA6C;AACnF;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA,yBAAyB,YAAY;AACrC,aAAa;AACb;AACA;AACA,yBAAyB,YAAY;AACrC,aAAa;AACb;AACA;AACA,yBAAyB,YAAY;AACrC,2BAA2B,mBAAmB;AAC9C,0BAA0B,iBAAiB;AAC3C,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,IAAI;AACzB,SAAS;AACT;AACA;AACA,0BAA0B;AAC1B,0BAA0B;AAC1B;AACA;AACA;;;;;;;ACjJa;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,2BAA2B;AAC3B,gBAAgB,mBAAO,CAAC,CAAO;AAC/B,iBAAiB,mBAAO,CAAC,CAAgB;AACzC,4BAA4B,mBAAO,CAAC,EAAqB;AACzD,8BAA8B,mBAAO,CAAC,EAA2B;AACjE,8BAA8B,mBAAO,CAAC,EAA2B;AACjE,yBAAyB,mBAAO,CAAC,EAA+B;AAChE,qBAAqB,mBAAO,CAAC,EAA2B;AACxD,0BAA0B,mBAAO,CAAC,EAAoC;AACtE,iCAAiC,mBAAO,CAAC,EAA2C;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;;;;;;;AC/Fa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,yBAAyB;AACzB,gBAAgB,mBAAO,CAAC,CAAO;AAC/B,0BAA0B,mBAAO,CAAC,EAAiB;AACnD;AACA;AACA,yBAAyB;AACzB;AACA;AACA,qCAAqC,IAAI,+CAA+C;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACrCA,4C;;;;;;ACAa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,yBAAyB;AACzB,uBAAuB,mBAAO,CAAC,EAAsB;AACrD,8BAA8B,mBAAO,CAAC,EAAuB;AAC7D;AACA;AACA,yBAAyB;;;;;;;ACPzB,iD;;;;;;ACAa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,sBAAsB;AACtB,gBAAgB,mBAAO,CAAC,CAAO;AAC/B,iBAAiB,mBAAO,CAAC,CAAgB;AACzC,2BAA2B,mBAAO,CAAC,EAAoB;AACvD,8BAA8B,mBAAO,CAAC,EAAuB;AAC7D,6BAA6B,mBAAO,CAAC,EAAmC;AACxE,8BAA8B,mBAAO,CAAC,EAA+C;AACrF,2BAA2B,mBAAO,CAAC,EAAwC;AAC3E,mBAAmB,mBAAO,CAAC,EAAyB;AACpD;AACA;AACA,sBAAsB;AACtB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;;;;;;AC1Ba;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,uBAAuB;AACvB,gBAAgB,mBAAO,CAAC,CAAO;AAC/B,iBAAiB,mBAAO,CAAC,CAAgB;AACzC,6BAA6B,mBAAO,CAAC,EAAmC;AACxE,8BAA8B,mBAAO,CAAC,EAA+C;AACrF,2BAA2B,mBAAO,CAAC,EAAwC;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,WAAW,mCAAmC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,IAAI;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,IAAI;AACnE;AACA,oEAAoE,IAAI;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,IAAI;AACzE,2CAA2C,6BAA6B;AACxE,4CAA4C,+BAA+B;AAC3E,2CAA2C,6BAA6B;AACxE,wDAAwD,2BAA2B;AACnF,iEAAiE,6CAA6C;AAC9G,4DAA4D,mCAAmC;AAC/F,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,+DAA+D,IAAI;AACnE;AACA,oEAAoE,IAAI;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,eAAe;AACpC,SAAS;AACT;AACA,qBAAqB,eAAe;AACpC,SAAS;AACT;AACA;AACA;AACA,8CAA8C,IAAI;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,IAAI;AACnE;AACA,oEAAoE,IAAI;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,IAAI,IAAI,SAAS;AACtF;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,0BAA0B;AAClD,wBAAwB,SAAS;AACjC,SAAS;AACT;AACA;AACA;AACA,uBAAuB;AACvB,uBAAuB;AACvB;AACA;AACA;;;;;;;ACtNa;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,yBAAyB;AACzB,gBAAgB,mBAAO,CAAC,CAAO;AAC/B,iBAAiB,mBAAO,CAAC,CAAgB;AACzC,mBAAmB,mBAAO,CAAC,EAAyB;AACpD,0BAA0B,mBAAO,CAAC,EAA2C;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,qBAAqB,YAAY;AACjC;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,qBAAqB,IAAI;AACzB;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,qBAAqB,KAAK;AAC1B;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,sBAAsB,QAAQ,6CAA6C;AAC3E,sBAAsB,SAAS,6CAA6C;AAC5E,sBAAsB,OAAO,6CAA6C;AAC1E,sBAAsB,gBAAgB,6CAA6C;AACnF;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,yBAAyB,WAAW;AACpC,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA,yBAAyB,WAAW;AACpC,2BAA2B,mBAAmB;AAC9C,0BAA0B,iBAAiB;AAC3C,aAAa;AACb;AACA;AACA;AACA;AACA,8BAA8B,gCAAgC;AAC9D,qCAAqC,iBAAiB;AACtD,iBAAiB;AACjB,2BAA2B,sBAAsB;AACjD;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,yBAAyB;AACzB;AACA;AACA;;;;;;;ACpKa;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,0BAA0B;AAC1B,gBAAgB,mBAAO,CAAC,CAAO;AAC/B,iBAAiB,mBAAO,CAAC,CAAgB;AACzC,2BAA2B,mBAAO,CAAC,EAAoB;AACvD,6BAA6B,mBAAO,CAAC,EAA0B;AAC/D,6BAA6B,mBAAO,CAAC,EAA0B;AAC/D,yBAAyB,mBAAO,CAAC,EAA+B;AAChE,iCAAiC,mBAAO,CAAC,EAA2C;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;;;;;;;AC9Ga;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,wBAAwB;AACxB,gBAAgB,mBAAO,CAAC,CAAO;AAC/B,0BAA0B,mBAAO,CAAC,EAAiB;AACnD;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC5Ca;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,wBAAwB;AACxB,uBAAuB,mBAAO,CAAC,EAAsB;AACrD,6BAA6B,mBAAO,CAAC,EAAsB;AAC3D;AACA;AACA,wBAAwB;;;;;;;ACPX;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,sBAAsB;AACtB,gBAAgB,mBAAO,CAAC,CAAO;AAC/B,iBAAiB,mBAAO,CAAC,CAAgB;AACzC,2BAA2B,mBAAO,CAAC,EAAoB;AACvD,8BAA8B,mBAAO,CAAC,EAAuB;AAC7D,6BAA6B,mBAAO,CAAC,EAAmC;AACxE,2BAA2B,mBAAO,CAAC,EAAwC;AAC3E,8BAA8B,mBAAO,CAAC,EAA+C;AACrF,mBAAmB,mBAAO,CAAC,EAAyB;AACpD;AACA;AACA,sBAAsB;AACtB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;;;;;;AC1Ba;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,uBAAuB;AACvB,gBAAgB,mBAAO,CAAC,CAAO;AAC/B,iBAAiB,mBAAO,CAAC,CAAgB;AACzC,6BAA6B,mBAAO,CAAC,EAAmC;AACxE,2BAA2B,mBAAO,CAAC,EAAwC;AAC3E,8BAA8B,mBAAO,CAAC,EAA+C;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,2DAA2D;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qFAAqF,yDAAyD;AAC9I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,wBAAwB,WAAW,kBAAkB;AACrD,oDAAoD,WAAW,mCAAmC;AAClG;AACA;AACA;AACA,2CAA2C,SAAS;AACpD,6CAA6C,WAAW;AACxD,2CAA2C,SAAS;AACpD,6CAA6C,WAAW;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb,uBAAuB,mBAAmB;AAC1C,SAAS;AACT;AACA;AACA;AACA;AACA,oEAAoE,IAAI;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,IAAI;AACxE;AACA;AACA;AACA,wFAAwF,eAAe;AACvG;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,oEAAoE,IAAI;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,IAAI;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mCAAmC;AAC3D,SAAS;AACT;AACA;AACA;AACA,uBAAuB;AACvB,uBAAuB;AACvB;AACA;AACA;;;;;;;ACzPa;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,yBAAyB;AACzB,gBAAgB,mBAAO,CAAC,CAAO;AAC/B,iBAAiB,mBAAO,CAAC,CAAgB;AACzC,0BAA0B,mBAAO,CAAC,EAA2C;AAC7E,mBAAmB,mBAAO,CAAC,EAAyB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,YAAY;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,kBAAkB;AAClB,aAAa;AACb,uBAAuB,mBAAmB;AAC1C,SAAS;AACT;AACA;AACA;AACA,qBAAqB,QAAQ;AAC7B;AACA;AACA;AACA,aAAa;AACb,uBAAuB,mBAAmB;AAC1C,SAAS;AACT;AACA;AACA;AACA,qBAAqB,IAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA,iCAAiC,iBAAiB;AAClD;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,qBAAqB,IAAI;AACzB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,uBAAuB,mBAAmB;AAC1C,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,KAAK,EAAE,MAAM;AACpD,iBAAiB;AACjB,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,sBAAsB,KAAK,EAAE,MAAM,GAAG,kCAAkC;AACxE;AACA;AACA,yBAAyB;AACzB,yBAAyB;AACzB;AACA;AACA;;;;;;;ACzNa;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,0BAA0B;AAC1B,gBAAgB,mBAAO,CAAC,CAAO;AAC/B,iBAAiB,mBAAO,CAAC,CAAgB;AACzC,2BAA2B,mBAAO,CAAC,EAAoB;AACvD,6BAA6B,mBAAO,CAAC,EAA0B;AAC/D,6BAA6B,mBAAO,CAAC,EAA0B;AAC/D,yBAAyB,mBAAO,CAAC,EAA+B;AAChE,qBAAqB,mBAAO,CAAC,EAA2B;AACxD,0BAA0B,mBAAO,CAAC,EAAoC;AACtE,iCAAiC,mBAAO,CAAC,EAA2C;AACpF,iBAAiB,mBAAO,CAAC,EAAgB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;;;;;;;ACjJa;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,wBAAwB,GAAG,yBAAyB,GAAG,4BAA4B;AACnF,gBAAgB,mBAAO,CAAC,CAAO;AAC/B,0BAA0B,mBAAO,CAAC,EAAiB;AACnD,4BAA4B,mBAAO,CAAC,EAAmB;AACvD,iBAAiB,mBAAO,CAAC,EAAgB;AACzC;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,YAAY;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACrHa;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,wBAAwB;AACxB,gBAAgB,mBAAO,CAAC,CAAO;AAC/B,0BAA0B,mBAAO,CAAC,EAAiB;AACnD,iBAAiB,mBAAO,CAAC,EAAgB;AACzC;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC7Ba;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,wBAAwB;AACxB,gBAAgB,mBAAO,CAAC,CAAO;AAC/B,iBAAiB,mBAAO,CAAC,CAAgB;AACzC,6BAA6B,mBAAO,CAAC,EAAsB;AAC3D,gCAAgC,mBAAO,CAAC,EAAyB;AACjE,+BAA+B,mBAAO,CAAC,EAAqC;AAC5E,mBAAmB,mBAAO,CAAC,EAAyB;AACpD;AACA;AACA,wBAAwB;AACxB,wBAAwB;AACxB;AACA;AACA;AACA;AACA,KAAK;AACL;;;;;;;AClBa;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,yBAAyB;AACzB,gBAAgB,mBAAO,CAAC,CAAO;AAC/B,iBAAiB,mBAAO,CAAC,CAAgB;AACzC,+BAA+B,mBAAO,CAAC,EAAqC;AAC5E,mBAAmB,mBAAO,CAAC,EAAyB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,sBAAsB;AAC1C;AACA,wCAAwC,gCAAgC,GAAG,sDAAsD;AACjI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,uDAAuD;AACvD,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,IAAI;AAC1E;AACA;AACA;AACA;AACA;AACA,gBAAgB,sBAAsB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,yBAAyB;AACzB;AACA;AACA;;;;;;;ACxLa;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,2BAA2B;AAC3B,gBAAgB,mBAAO,CAAC,CAAO;AAC/B,iBAAiB,mBAAO,CAAC,CAAgB;AACzC,mBAAmB,mBAAO,CAAC,EAAyB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,qBAAqB,IAAI;AACzB;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,qBAAqB,iBAAiB;AACtC;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,qBAAqB,IAAI;AACzB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,qBAAqB,IAAI;AACzB,SAAS;AACT;AACA;AACA;AACA,qBAAqB,aAAa;AAClC,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,qBAAqB,iBAAiB;AACtC;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,2BAA2B;AAC3B,2BAA2B;AAC3B;AACA;AACA;;;;;;;ACzJa;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,4BAA4B;AAC5B,gBAAgB,mBAAO,CAAC,CAAO;AAC/B,iBAAiB,mBAAO,CAAC,CAAgB;AACzC,6BAA6B,mBAAO,CAAC,EAAsB;AAC3D,+BAA+B,mBAAO,CAAC,EAA4B;AACnE,+BAA+B,mBAAO,CAAC,EAA4B;AACnE,yBAAyB,mBAAO,CAAC,EAA+B;AAChE,qBAAqB,mBAAO,CAAC,EAA2B;AACxD,0BAA0B,mBAAO,CAAC,EAAoC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;;;;;;;ACjHa;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,sBAAsB,GAAG,0BAA0B;AACnD,gBAAgB,mBAAO,CAAC,CAAO;AAC/B,0BAA0B,mBAAO,CAAC,EAAiB;AACnD,4BAA4B,mBAAO,CAAC,EAAmB;AACvD,iBAAiB,mBAAO,CAAC,EAAgB;AACzC;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,YAAY;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACxGa;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,sBAAsB;AACtB,gBAAgB,mBAAO,CAAC,CAAO;AAC/B,0BAA0B,mBAAO,CAAC,EAAiB;AACnD,4BAA4B,mBAAO,CAAC,EAAmB;AACvD,iBAAiB,mBAAO,CAAC,EAAgB;AACzC,+BAA+B,mBAAO,CAAC,EAAwB;AAC/D;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,YAAY;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACnFA,kD;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,sDAAsD;WACtD,sCAAsC,iEAAiE;WACvG;WACA;WACA;WACA;WACA;WACA,E;;;;;WCzBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA,E;;;;;WCPA,wF;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D,E;;;;;;;;ACNa;AACb;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,iBAAiB,mBAAO,CAAC,CAAgB;AACzC,eAAe,mBAAO,CAAC,CAAc;AACrC,qBAAqB,mBAAO,CAAC,CAAkB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,0EAA0E,KAAK;AAC/E;AACA","sources":["webpack://@gt-automotive-workspace/server/external commonjs \"@nestjs/common\"","webpack://@gt-automotive-workspace/server/external commonjs \"@nestjs/core\"","webpack://@gt-automotive-workspace/server/./src/app/app.module.ts","webpack://@gt-automotive-workspace/server/external commonjs \"tslib\"","webpack://@gt-automotive-workspace/server/external commonjs \"@nestjs/config\"","webpack://@gt-automotive-workspace/server/./src/app/app.controller.ts","webpack://@gt-automotive-workspace/server/./src/app/app.service.ts","webpack://@gt-automotive-workspace/server/./src/auth/auth.module.ts","webpack://@gt-automotive-workspace/server/external commonjs \"@nestjs/jwt\"","webpack://@gt-automotive-workspace/server/external commonjs \"@nestjs/passport\"","webpack://@gt-automotive-workspace/server/./src/auth/auth.service.ts","webpack://@gt-automotive-workspace/server/./src/users/repositories/user.repository.ts","webpack://@gt-automotive-workspace/server/../libs/database/src/index.ts","webpack://@gt-automotive-workspace/server/../libs/database/src/lib/database.module.ts","webpack://@gt-automotive-workspace/server/../libs/database/src/lib/prisma.service.ts","webpack://@gt-automotive-workspace/server/external commonjs \"@prisma/client\"","webpack://@gt-automotive-workspace/server/./src/roles/repositories/role.repository.ts","webpack://@gt-automotive-workspace/server/./src/audit/repositories/audit.repository.ts","webpack://@gt-automotive-workspace/server/./src/auth/auth.controller.ts","webpack://@gt-automotive-workspace/server/./src/auth/decorators/public.decorator.ts","webpack://@gt-automotive-workspace/server/./src/auth/decorators/current-user.decorator.ts","webpack://@gt-automotive-workspace/server/./src/auth/guards/jwt-auth.guard.ts","webpack://@gt-automotive-workspace/server/./src/auth/strategies/jwt.strategy.ts","webpack://@gt-automotive-workspace/server/external commonjs \"passport-jwt\"","webpack://@gt-automotive-workspace/server/./src/auth/strategies/clerk-jwt.strategy.ts","webpack://@gt-automotive-workspace/server/external commonjs \"jwks-rsa\"","webpack://@gt-automotive-workspace/server/./src/auth/guards/role.guard.ts","webpack://@gt-automotive-workspace/server/./src/auth/decorators/roles.decorator.ts","webpack://@gt-automotive-workspace/server/./src/auth/webhooks/clerk-webhook.controller.ts","webpack://@gt-automotive-workspace/server/external commonjs \"svix\"","webpack://@gt-automotive-workspace/server/./src/users/users.module.ts","webpack://@gt-automotive-workspace/server/./src/users/users.service.ts","webpack://@gt-automotive-workspace/server/external commonjs \"bcryptjs\"","webpack://@gt-automotive-workspace/server/./src/users/users.controller.ts","webpack://@gt-automotive-workspace/server/./src/tires/tires.module.ts","webpack://@gt-automotive-workspace/server/./src/tires/tires.controller.ts","webpack://@gt-automotive-workspace/server/./src/tires/tires.service.ts","webpack://@gt-automotive-workspace/server/./src/tires/repositories/tire.repository.ts","webpack://@gt-automotive-workspace/server/./src/common/repositories/base.repository.ts","webpack://@gt-automotive-workspace/server/external commonjs \"@gt-automotive/shared-dto\"","webpack://@gt-automotive-workspace/server/external commonjs \"@prisma/client/runtime/library\"","webpack://@gt-automotive-workspace/server/external commonjs \"class-transformer\"","webpack://@gt-automotive-workspace/server/./src/customers/customers.module.ts","webpack://@gt-automotive-workspace/server/./src/customers/customers.service.ts","webpack://@gt-automotive-workspace/server/./src/customers/repositories/customer.repository.ts","webpack://@gt-automotive-workspace/server/./src/customers/customers.controller.ts","webpack://@gt-automotive-workspace/server/./src/customers/dto/create-customer.dto.ts","webpack://@gt-automotive-workspace/server/external commonjs \"class-validator\"","webpack://@gt-automotive-workspace/server/./src/customers/dto/update-customer.dto.ts","webpack://@gt-automotive-workspace/server/external commonjs \"@nestjs/mapped-types\"","webpack://@gt-automotive-workspace/server/./src/vehicles/vehicles.module.ts","webpack://@gt-automotive-workspace/server/./src/vehicles/vehicles.service.ts","webpack://@gt-automotive-workspace/server/./src/vehicles/repositories/vehicle.repository.ts","webpack://@gt-automotive-workspace/server/./src/vehicles/vehicles.controller.ts","webpack://@gt-automotive-workspace/server/./src/vehicles/dto/create-vehicle.dto.ts","webpack://@gt-automotive-workspace/server/./src/vehicles/dto/update-vehicle.dto.ts","webpack://@gt-automotive-workspace/server/./src/invoices/invoices.module.ts","webpack://@gt-automotive-workspace/server/./src/invoices/invoices.service.ts","webpack://@gt-automotive-workspace/server/./src/invoices/repositories/invoice.repository.ts","webpack://@gt-automotive-workspace/server/./src/invoices/invoices.controller.ts","webpack://@gt-automotive-workspace/server/./src/invoices/dto/create-invoice.dto.ts","webpack://@gt-automotive-workspace/server/./src/invoices/dto/update-invoice.dto.ts","webpack://@gt-automotive-workspace/server/./src/quotations/quotations.module.ts","webpack://@gt-automotive-workspace/server/./src/quotations/quotations.service.ts","webpack://@gt-automotive-workspace/server/./src/quotations/repositories/quotation.repository.ts","webpack://@gt-automotive-workspace/server/./src/quotations/quotations.controller.ts","webpack://@gt-automotive-workspace/server/./src/quotations/dto/create-quotation.dto.ts","webpack://@gt-automotive-workspace/server/./src/quotations/dto/update-quotation.dto.ts","webpack://@gt-automotive-workspace/server/external commonjs \"@clerk/clerk-sdk-node\"","webpack://@gt-automotive-workspace/server/webpack/bootstrap","webpack://@gt-automotive-workspace/server/webpack/runtime/create fake namespace object","webpack://@gt-automotive-workspace/server/webpack/runtime/define property getters","webpack://@gt-automotive-workspace/server/webpack/runtime/hasOwnProperty shorthand","webpack://@gt-automotive-workspace/server/webpack/runtime/make namespace object","webpack://@gt-automotive-workspace/server/./src/main.ts"],"sourcesContent":["module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/core\");","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AppModule = void 0;\nconst tslib_1 = require(\"tslib\");\nconst common_1 = require(\"@nestjs/common\");\nconst config_1 = require(\"@nestjs/config\");\nconst core_1 = require(\"@nestjs/core\");\nconst app_controller_1 = require(\"./app.controller\");\nconst app_service_1 = require(\"./app.service\");\nconst auth_module_1 = require(\"../auth/auth.module\");\nconst users_module_1 = require(\"../users/users.module\");\nconst tires_module_1 = require(\"../tires/tires.module\");\nconst customers_module_1 = require(\"../customers/customers.module\");\nconst vehicles_module_1 = require(\"../vehicles/vehicles.module\");\nconst invoices_module_1 = require(\"../invoices/invoices.module\");\nconst quotations_module_1 = require(\"../quotations/quotations.module\");\nconst jwt_auth_guard_1 = require(\"../auth/guards/jwt-auth.guard\");\nconst role_guard_1 = require(\"../auth/guards/role.guard\");\nlet AppModule = class AppModule {\n};\nexports.AppModule = AppModule;\nexports.AppModule = AppModule = tslib_1.__decorate([\n    (0, common_1.Module)({\n        imports: [\n            config_1.ConfigModule.forRoot({\n                isGlobal: true,\n                envFilePath: ['.env.local', '.env'],\n            }),\n            auth_module_1.AuthModule,\n            users_module_1.UsersModule,\n            tires_module_1.TiresModule,\n            customers_module_1.CustomersModule,\n            vehicles_module_1.VehiclesModule,\n            invoices_module_1.InvoicesModule,\n            quotations_module_1.QuotationsModule,\n        ],\n        controllers: [app_controller_1.AppController],\n        providers: [\n            app_service_1.AppService,\n            {\n                provide: core_1.APP_GUARD,\n                useClass: jwt_auth_guard_1.JwtAuthGuard,\n            },\n            {\n                provide: core_1.APP_GUARD,\n                useClass: role_guard_1.RoleGuard,\n            },\n        ],\n    })\n], AppModule);\n","module.exports = require(\"tslib\");","module.exports = require(\"@nestjs/config\");","\"use strict\";\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AppController = void 0;\nconst tslib_1 = require(\"tslib\");\nconst common_1 = require(\"@nestjs/common\");\nconst app_service_1 = require(\"./app.service\");\nlet AppController = class AppController {\n    constructor(appService) {\n        this.appService = appService;\n    }\n    getData() {\n        return this.appService.getData();\n    }\n};\nexports.AppController = AppController;\ntslib_1.__decorate([\n    (0, common_1.Get)(),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", []),\n    tslib_1.__metadata(\"design:returntype\", void 0)\n], AppController.prototype, \"getData\", null);\nexports.AppController = AppController = tslib_1.__decorate([\n    (0, common_1.Controller)(),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof app_service_1.AppService !== \"undefined\" && app_service_1.AppService) === \"function\" ? _a : Object])\n], AppController);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AppService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst common_1 = require(\"@nestjs/common\");\nlet AppService = class AppService {\n    getData() {\n        return { message: 'Hello API' };\n    }\n};\nexports.AppService = AppService;\nexports.AppService = AppService = tslib_1.__decorate([\n    (0, common_1.Injectable)()\n], AppService);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AuthModule = void 0;\nconst tslib_1 = require(\"tslib\");\nconst common_1 = require(\"@nestjs/common\");\nconst jwt_1 = require(\"@nestjs/jwt\");\nconst passport_1 = require(\"@nestjs/passport\");\nconst config_1 = require(\"@nestjs/config\");\nconst auth_service_1 = require(\"./auth.service\");\nconst auth_controller_1 = require(\"./auth.controller\");\nconst jwt_strategy_1 = require(\"./strategies/jwt.strategy\");\nconst clerk_jwt_strategy_1 = require(\"./strategies/clerk-jwt.strategy\");\nconst jwt_auth_guard_1 = require(\"./guards/jwt-auth.guard\");\nconst role_guard_1 = require(\"./guards/role.guard\");\nconst clerk_webhook_controller_1 = require(\"./webhooks/clerk-webhook.controller\");\nconst user_repository_1 = require(\"../users/repositories/user.repository\");\nconst role_repository_1 = require(\"../roles/repositories/role.repository\");\nconst audit_repository_1 = require(\"../audit/repositories/audit.repository\");\nconst database_1 = require(\"@gt-automotive/database\");\nlet AuthModule = class AuthModule {\n};\nexports.AuthModule = AuthModule;\nexports.AuthModule = AuthModule = tslib_1.__decorate([\n    (0, common_1.Module)({\n        imports: [\n            passport_1.PassportModule.register({ defaultStrategy: 'clerk-jwt' }),\n            jwt_1.JwtModule.registerAsync({\n                imports: [config_1.ConfigModule],\n                useFactory: async (configService) => ({\n                    secret: configService.get('JWT_SECRET', 'default-jwt-secret'),\n                    signOptions: {\n                        expiresIn: configService.get('JWT_EXPIRES_IN', '24h'),\n                    },\n                }),\n                inject: [config_1.ConfigService],\n            }),\n            config_1.ConfigModule,\n        ],\n        controllers: [auth_controller_1.AuthController, clerk_webhook_controller_1.ClerkWebhookController],\n        providers: [\n            auth_service_1.AuthService,\n            jwt_strategy_1.JwtStrategy,\n            clerk_jwt_strategy_1.ClerkJwtStrategy,\n            jwt_auth_guard_1.JwtAuthGuard,\n            role_guard_1.RoleGuard,\n            user_repository_1.UserRepository,\n            role_repository_1.RoleRepository,\n            audit_repository_1.AuditRepository,\n            database_1.PrismaService,\n        ],\n        exports: [auth_service_1.AuthService, jwt_auth_guard_1.JwtAuthGuard, role_guard_1.RoleGuard],\n    })\n], AuthModule);\n","module.exports = require(\"@nestjs/jwt\");","module.exports = require(\"@nestjs/passport\");","\"use strict\";\nvar _a, _b, _c, _d, _e;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AuthService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst common_1 = require(\"@nestjs/common\");\nconst jwt_1 = require(\"@nestjs/jwt\");\nconst config_1 = require(\"@nestjs/config\");\nconst user_repository_1 = require(\"../users/repositories/user.repository\");\nconst role_repository_1 = require(\"../roles/repositories/role.repository\");\nconst audit_repository_1 = require(\"../audit/repositories/audit.repository\");\nlet AuthService = class AuthService {\n    constructor(userRepository, roleRepository, auditRepository, jwtService, configService) {\n        this.userRepository = userRepository;\n        this.roleRepository = roleRepository;\n        this.auditRepository = auditRepository;\n        this.jwtService = jwtService;\n        this.configService = configService;\n    }\n    async validateClerkUser(clerkUserId) {\n        let user = await this.userRepository.findByClerkId(clerkUserId);\n        if (!user) {\n            // Try to get Clerk client if available\n            let clerkUser;\n            try {\n                const clerkSecretKey = this.configService.get('CLERK_SECRET_KEY');\n                if (clerkSecretKey) {\n                    const { clerkClient } = await import('@clerk/clerk-sdk-node');\n                    clerkUser = await clerkClient.users.getUser(clerkUserId);\n                }\n                else {\n                    throw new Error('Clerk not configured');\n                }\n            }\n            catch (error) {\n                console.warn('Clerk client not available:', error);\n                return null;\n            }\n            const customerRole = await this.roleRepository.findByName('customer');\n            if (!customerRole) {\n                throw new Error('Customer role not found in database');\n            }\n            user = await this.userRepository.create({\n                clerkId: clerkUserId,\n                email: clerkUser.emailAddresses[0].emailAddress,\n                firstName: clerkUser.firstName || '',\n                lastName: clerkUser.lastName || '',\n                role: {\n                    connect: { id: customerRole.id },\n                },\n            });\n            await this.auditRepository.create({\n                userId: user.id,\n                action: 'USER_CREATED',\n                entityType: 'user',\n                entityId: user.id,\n                details: { source: 'clerk_webhook' },\n            });\n        }\n        return user;\n    }\n    async login(email, password) {\n        // Since we're using Clerk for authentication, this method is deprecated\n        // It's kept for backward compatibility or local testing without Clerk\n        throw new common_1.UnauthorizedException('Please use Clerk authentication through the UI');\n    }\n    async register(data) {\n        // Since we're using Clerk for authentication, this method is deprecated\n        // Registration should be done through Clerk UI\n        throw new common_1.ConflictException('Please use Clerk registration through the UI');\n    }\n    async validateToken(token) {\n        try {\n            const payload = this.jwtService.verify(token);\n            const user = await this.userRepository.findById(payload.sub);\n            if (!user || !user.isActive) {\n                throw new common_1.UnauthorizedException('Invalid token');\n            }\n            return user;\n        }\n        catch (error) {\n            throw new common_1.UnauthorizedException('Invalid token');\n        }\n    }\n    async generateJWT(user) {\n        const payload = {\n            sub: user.id,\n            email: user.email,\n            role: user.role?.name || 'customer',\n        };\n        return this.jwtService.sign(payload);\n    }\n    async syncUserFromClerk(data) {\n        // Check if user already exists\n        let user = await this.userRepository.findByClerkId(data.clerkId);\n        if (!user) {\n            // Check if email exists with different clerkId\n            const emailUser = await this.userRepository.findByEmail(data.email);\n            if (emailUser && emailUser.clerkId && emailUser.clerkId !== data.clerkId) {\n                throw new common_1.ConflictException('Email already registered with different account');\n            }\n            // Get customer role\n            const customerRole = await this.roleRepository.findByName('customer');\n            if (!customerRole) {\n                throw new Error('Customer role not found in database');\n            }\n            // Create new user\n            user = await this.userRepository.create({\n                clerkId: data.clerkId,\n                email: data.email,\n                firstName: data.firstName,\n                lastName: data.lastName,\n                role: {\n                    connect: { id: customerRole.id },\n                },\n            });\n            await this.auditRepository.create({\n                userId: user.id,\n                action: 'USER_SYNCED',\n                entityType: 'user',\n                entityId: user.id,\n                details: { source: 'clerk_sync' },\n            });\n        }\n        else {\n            // Update existing user if needed\n            if (user.email !== data.email ||\n                user.firstName !== data.firstName ||\n                user.lastName !== data.lastName) {\n                user = await this.userRepository.update(user.id, {\n                    email: data.email,\n                    firstName: data.firstName,\n                    lastName: data.lastName,\n                });\n            }\n        }\n        return {\n            id: user.id,\n            email: user.email,\n            firstName: user.firstName,\n            lastName: user.lastName,\n            role: user.role || { name: 'customer' },\n            isActive: user.isActive,\n        };\n    }\n};\nexports.AuthService = AuthService;\nexports.AuthService = AuthService = tslib_1.__decorate([\n    (0, common_1.Injectable)(),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof user_repository_1.UserRepository !== \"undefined\" && user_repository_1.UserRepository) === \"function\" ? _a : Object, typeof (_b = typeof role_repository_1.RoleRepository !== \"undefined\" && role_repository_1.RoleRepository) === \"function\" ? _b : Object, typeof (_c = typeof audit_repository_1.AuditRepository !== \"undefined\" && audit_repository_1.AuditRepository) === \"function\" ? _c : Object, typeof (_d = typeof jwt_1.JwtService !== \"undefined\" && jwt_1.JwtService) === \"function\" ? _d : Object, typeof (_e = typeof config_1.ConfigService !== \"undefined\" && config_1.ConfigService) === \"function\" ? _e : Object])\n], AuthService);\n","\"use strict\";\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UserRepository = void 0;\nconst tslib_1 = require(\"tslib\");\nconst common_1 = require(\"@nestjs/common\");\nconst database_1 = require(\"@gt-automotive/database\");\nlet UserRepository = class UserRepository {\n    constructor(prisma) {\n        this.prisma = prisma;\n    }\n    async findAll(filters) {\n        return this.prisma.user.findMany({\n            where: {\n                ...filters,\n                role: {\n                    name: {\n                        not: 'CUSTOMER' // Exclude CUSTOMER role users from user management\n                    }\n                }\n            },\n            include: {\n                role: true,\n            },\n        });\n    }\n    async findById(id) {\n        return this.prisma.user.findUnique({\n            where: { id },\n            include: {\n                role: true,\n            },\n        });\n    }\n    async findByEmail(email) {\n        return this.prisma.user.findUnique({\n            where: { email },\n            include: {\n                role: true,\n            },\n        });\n    }\n    async findByClerkId(clerkId) {\n        return this.prisma.user.findUnique({\n            where: { clerkId },\n            include: {\n                role: true,\n            },\n        });\n    }\n    async create(data) {\n        return this.prisma.user.create({\n            data,\n            include: {\n                role: true,\n            },\n        });\n    }\n    async update(id, data) {\n        return this.prisma.user.update({\n            where: { id },\n            data,\n            include: {\n                role: true,\n            },\n        });\n    }\n    async delete(id) {\n        try {\n            await this.prisma.user.delete({\n                where: { id },\n            });\n            return true;\n        }\n        catch (error) {\n            return false;\n        }\n    }\n    async assignRole(userId, roleId) {\n        return this.prisma.user.update({\n            where: { id: userId },\n            data: { roleId },\n            include: {\n                role: true,\n            },\n        });\n    }\n    async findAllWithRoles(filters) {\n        return this.prisma.user.findMany({\n            where: {\n                ...filters,\n                role: {\n                    name: {\n                        not: 'CUSTOMER' // Exclude CUSTOMER role users from user management\n                    }\n                }\n            },\n            include: {\n                role: {\n                    include: {\n                        permissions: true,\n                    },\n                },\n            },\n        });\n    }\n};\nexports.UserRepository = UserRepository;\nexports.UserRepository = UserRepository = tslib_1.__decorate([\n    (0, common_1.Injectable)(),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof database_1.PrismaService !== \"undefined\" && database_1.PrismaService) === \"function\" ? _a : Object])\n], UserRepository);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./lib/database.module\"), exports);\ntslib_1.__exportStar(require(\"./lib/prisma.service\"), exports);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DatabaseModule = void 0;\nconst tslib_1 = require(\"tslib\");\nconst common_1 = require(\"@nestjs/common\");\nconst prisma_service_1 = require(\"./prisma.service\");\nlet DatabaseModule = class DatabaseModule {\n};\nexports.DatabaseModule = DatabaseModule;\nexports.DatabaseModule = DatabaseModule = tslib_1.__decorate([\n    (0, common_1.Global)(),\n    (0, common_1.Module)({\n        providers: [prisma_service_1.PrismaService],\n        exports: [prisma_service_1.PrismaService],\n    })\n], DatabaseModule);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PrismaService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst common_1 = require(\"@nestjs/common\");\nconst client_1 = require(\"@prisma/client\");\nlet PrismaService = class PrismaService extends client_1.PrismaClient {\n    async onModuleInit() {\n        await this.$connect();\n    }\n    async onModuleDestroy() {\n        await this.$disconnect();\n    }\n};\nexports.PrismaService = PrismaService;\nexports.PrismaService = PrismaService = tslib_1.__decorate([\n    (0, common_1.Injectable)()\n], PrismaService);\n","module.exports = require(\"@prisma/client\");","\"use strict\";\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RoleRepository = void 0;\nconst tslib_1 = require(\"tslib\");\nconst common_1 = require(\"@nestjs/common\");\nconst database_1 = require(\"@gt-automotive/database\");\nlet RoleRepository = class RoleRepository {\n    constructor(prisma) {\n        this.prisma = prisma;\n    }\n    async findAll() {\n        return this.prisma.role.findMany();\n    }\n    async findById(id) {\n        return this.prisma.role.findUnique({\n            where: { id },\n        });\n    }\n    async findByName(name) {\n        return this.prisma.role.findUnique({\n            where: { name: name },\n        });\n    }\n    async getPermissions(roleId) {\n        const rolePermissions = await this.prisma.rolePermission.findMany({\n            where: { roleId },\n            include: {\n                permission: true,\n            },\n        });\n        return rolePermissions.map(rp => rp.permission);\n    }\n    async hasPermission(roleId, permissionName) {\n        // Simplified version - just check if role has any permissions\n        const rolePermissions = await this.prisma.rolePermission.count({\n            where: {\n                roleId,\n            },\n        });\n        return rolePermissions > 0;\n    }\n};\nexports.RoleRepository = RoleRepository;\nexports.RoleRepository = RoleRepository = tslib_1.__decorate([\n    (0, common_1.Injectable)(),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof database_1.PrismaService !== \"undefined\" && database_1.PrismaService) === \"function\" ? _a : Object])\n], RoleRepository);\n","\"use strict\";\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AuditRepository = void 0;\nconst tslib_1 = require(\"tslib\");\nconst common_1 = require(\"@nestjs/common\");\nconst database_1 = require(\"@gt-automotive/database\");\nlet AuditRepository = class AuditRepository {\n    constructor(prisma) {\n        this.prisma = prisma;\n    }\n    async create(data) {\n        return this.prisma.auditLog.create({\n            data: {\n                userId: data.userId,\n                action: data.action,\n                resource: data.entityType || 'unknown',\n                resourceId: data.entityId || '',\n                oldValue: undefined,\n                newValue: data.details || undefined,\n                ipAddress: data.ipAddress,\n            },\n        });\n    }\n    async findByUser(userId, limit = 100) {\n        return this.prisma.auditLog.findMany({\n            where: { userId },\n            orderBy: { createdAt: 'desc' },\n            take: limit,\n        });\n    }\n    async findByAction(action, limit = 100) {\n        return this.prisma.auditLog.findMany({\n            where: { action },\n            orderBy: { createdAt: 'desc' },\n            take: limit,\n        });\n    }\n    async findByEntity(entityType, entityId) {\n        return this.prisma.auditLog.findMany({\n            where: {\n                resource: entityType,\n                resourceId: entityId,\n            },\n            orderBy: { createdAt: 'desc' },\n        });\n    }\n    async findAll(filters) {\n        const where = {};\n        if (filters?.userId)\n            where.userId = filters.userId;\n        if (filters?.action)\n            where.action = filters.action;\n        if (filters?.entityType)\n            where.resource = filters.entityType;\n        if (filters?.startDate || filters?.endDate) {\n            where.createdAt = {};\n            if (filters?.startDate)\n                where.createdAt.gte = filters.startDate;\n            if (filters?.endDate)\n                where.createdAt.lte = filters.endDate;\n        }\n        return this.prisma.auditLog.findMany({\n            where,\n            orderBy: { createdAt: 'desc' },\n        });\n    }\n};\nexports.AuditRepository = AuditRepository;\nexports.AuditRepository = AuditRepository = tslib_1.__decorate([\n    (0, common_1.Injectable)(),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof database_1.PrismaService !== \"undefined\" && database_1.PrismaService) === \"function\" ? _a : Object])\n], AuditRepository);\n","\"use strict\";\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AuthController = void 0;\nconst tslib_1 = require(\"tslib\");\nconst common_1 = require(\"@nestjs/common\");\nconst auth_service_1 = require(\"./auth.service\");\nconst public_decorator_1 = require(\"./decorators/public.decorator\");\nconst current_user_decorator_1 = require(\"./decorators/current-user.decorator\");\nconst jwt_auth_guard_1 = require(\"./guards/jwt-auth.guard\");\nlet AuthController = class AuthController {\n    constructor(authService) {\n        this.authService = authService;\n    }\n    async login(loginDto) {\n        return this.authService.login(loginDto.email, loginDto.password);\n    }\n    async register(registerDto) {\n        return this.authService.register(registerDto);\n    }\n    async getCurrentUser(user) {\n        return user;\n    }\n    async logout(user) {\n        // In a JWT-based system, logout is typically handled on the client side\n        // by removing the token. Here we can log the logout action.\n        return { message: 'Logged out successfully' };\n    }\n    async refreshToken(body) {\n        // Implement refresh token logic if needed\n        return { message: 'Token refresh not implemented yet' };\n    }\n    async syncUser(syncDto) {\n        // Sync user from Clerk to our database\n        return this.authService.syncUserFromClerk(syncDto);\n    }\n};\nexports.AuthController = AuthController;\ntslib_1.__decorate([\n    (0, public_decorator_1.Public)(),\n    (0, common_1.Post)('login'),\n    (0, common_1.HttpCode)(common_1.HttpStatus.OK),\n    tslib_1.__param(0, (0, common_1.Body)()),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [Object]),\n    tslib_1.__metadata(\"design:returntype\", Promise)\n], AuthController.prototype, \"login\", null);\ntslib_1.__decorate([\n    (0, public_decorator_1.Public)(),\n    (0, common_1.Post)('register'),\n    tslib_1.__param(0, (0, common_1.Body)(new common_1.ValidationPipe())),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [Object]),\n    tslib_1.__metadata(\"design:returntype\", Promise)\n], AuthController.prototype, \"register\", null);\ntslib_1.__decorate([\n    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard),\n    (0, common_1.Get)('me'),\n    tslib_1.__param(0, (0, current_user_decorator_1.CurrentUser)()),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [Object]),\n    tslib_1.__metadata(\"design:returntype\", Promise)\n], AuthController.prototype, \"getCurrentUser\", null);\ntslib_1.__decorate([\n    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard),\n    (0, common_1.Post)('logout'),\n    (0, common_1.HttpCode)(common_1.HttpStatus.OK),\n    tslib_1.__param(0, (0, current_user_decorator_1.CurrentUser)()),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [Object]),\n    tslib_1.__metadata(\"design:returntype\", Promise)\n], AuthController.prototype, \"logout\", null);\ntslib_1.__decorate([\n    (0, public_decorator_1.Public)(),\n    (0, common_1.Post)('refresh'),\n    tslib_1.__param(0, (0, common_1.Body)()),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [Object]),\n    tslib_1.__metadata(\"design:returntype\", Promise)\n], AuthController.prototype, \"refreshToken\", null);\ntslib_1.__decorate([\n    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard),\n    (0, common_1.Post)('sync'),\n    tslib_1.__param(0, (0, common_1.Body)()),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [Object]),\n    tslib_1.__metadata(\"design:returntype\", Promise)\n], AuthController.prototype, \"syncUser\", null);\nexports.AuthController = AuthController = tslib_1.__decorate([\n    (0, common_1.Controller)('api/auth'),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof auth_service_1.AuthService !== \"undefined\" && auth_service_1.AuthService) === \"function\" ? _a : Object])\n], AuthController);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Public = exports.IS_PUBLIC_KEY = void 0;\nconst common_1 = require(\"@nestjs/common\");\nexports.IS_PUBLIC_KEY = 'isPublic';\nconst Public = () => (0, common_1.SetMetadata)(exports.IS_PUBLIC_KEY, true);\nexports.Public = Public;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CurrentUser = void 0;\nconst common_1 = require(\"@nestjs/common\");\nexports.CurrentUser = (0, common_1.createParamDecorator)((data, ctx) => {\n    const request = ctx.switchToHttp().getRequest();\n    return request.user;\n});\n","\"use strict\";\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JwtAuthGuard = void 0;\nconst tslib_1 = require(\"tslib\");\nconst common_1 = require(\"@nestjs/common\");\nconst core_1 = require(\"@nestjs/core\");\nconst passport_1 = require(\"@nestjs/passport\");\nconst public_decorator_1 = require(\"../decorators/public.decorator\");\nlet JwtAuthGuard = class JwtAuthGuard extends (0, passport_1.AuthGuard)(['clerk-jwt', 'jwt']) {\n    constructor(reflector) {\n        super();\n        this.reflector = reflector;\n    }\n    canActivate(context) {\n        const isPublic = this.reflector.getAllAndOverride(public_decorator_1.IS_PUBLIC_KEY, [\n            context.getHandler(),\n            context.getClass(),\n        ]);\n        if (isPublic) {\n            return true;\n        }\n        // In development mode, check for mock token\n        if (process.env.NODE_ENV === 'development') {\n            const request = context.switchToHttp().getRequest();\n            const authHeader = request.headers.authorization;\n            if (authHeader === 'Bearer mock-jwt-token-development') {\n                // Set mock user for development\n                request.user = {\n                    id: 'dev-user-1',\n                    email: 'customer@example.com',\n                    role: { name: 'STAFF' }, // Give STAFF role for testing invoice creation\n                    firstName: 'Test',\n                    lastName: 'User',\n                    customerId: 'dev-customer-1',\n                };\n                return true;\n            }\n        }\n        return super.canActivate(context);\n    }\n};\nexports.JwtAuthGuard = JwtAuthGuard;\nexports.JwtAuthGuard = JwtAuthGuard = tslib_1.__decorate([\n    (0, common_1.Injectable)(),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof core_1.Reflector !== \"undefined\" && core_1.Reflector) === \"function\" ? _a : Object])\n], JwtAuthGuard);\n","\"use strict\";\nvar _a, _b;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JwtStrategy = void 0;\nconst tslib_1 = require(\"tslib\");\nconst common_1 = require(\"@nestjs/common\");\nconst passport_1 = require(\"@nestjs/passport\");\nconst passport_jwt_1 = require(\"passport-jwt\");\nconst config_1 = require(\"@nestjs/config\");\nconst user_repository_1 = require(\"../../users/repositories/user.repository\");\nlet JwtStrategy = class JwtStrategy extends (0, passport_1.PassportStrategy)(passport_jwt_1.Strategy) {\n    constructor(configService, userRepository) {\n        super({\n            jwtFromRequest: passport_jwt_1.ExtractJwt.fromAuthHeaderAsBearerToken(),\n            ignoreExpiration: false,\n            secretOrKey: configService.get('JWT_SECRET', 'default-jwt-secret'),\n        });\n        this.userRepository = userRepository;\n    }\n    async validate(payload) {\n        // Development mode bypass for mock token\n        if (process.env.NODE_ENV === 'development' && payload === 'mock-jwt-token-development') {\n            // Return a mock user for development\n            return {\n                id: 'dev-user-1',\n                email: 'customer@example.com',\n                role: { name: 'CUSTOMER' },\n                firstName: 'Test',\n                lastName: 'Customer',\n                customerId: 'dev-customer-1',\n            };\n        }\n        const user = await this.userRepository.findById(payload.sub);\n        if (!user || !user.isActive) {\n            throw new common_1.UnauthorizedException('User not found or inactive');\n        }\n        return {\n            id: user.id,\n            email: user.email,\n            role: user.role,\n            firstName: user.firstName,\n            lastName: user.lastName,\n        };\n    }\n};\nexports.JwtStrategy = JwtStrategy;\nexports.JwtStrategy = JwtStrategy = tslib_1.__decorate([\n    (0, common_1.Injectable)(),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof config_1.ConfigService !== \"undefined\" && config_1.ConfigService) === \"function\" ? _a : Object, typeof (_b = typeof user_repository_1.UserRepository !== \"undefined\" && user_repository_1.UserRepository) === \"function\" ? _b : Object])\n], JwtStrategy);\n","module.exports = require(\"passport-jwt\");","\"use strict\";\nvar _a, _b, _c;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ClerkJwtStrategy = void 0;\nconst tslib_1 = require(\"tslib\");\nconst common_1 = require(\"@nestjs/common\");\nconst passport_1 = require(\"@nestjs/passport\");\nconst passport_jwt_1 = require(\"passport-jwt\");\nconst config_1 = require(\"@nestjs/config\");\nconst user_repository_1 = require(\"../../users/repositories/user.repository\");\nconst jwks_rsa_1 = require(\"jwks-rsa\");\nconst database_1 = require(\"@gt-automotive/database\");\nlet ClerkJwtStrategy = class ClerkJwtStrategy extends (0, passport_1.PassportStrategy)(passport_jwt_1.Strategy, 'clerk-jwt') {\n    constructor(userRepository, prismaService, configService) {\n        const jwksUrl = configService.get('CLERK_JWKS_URL', 'https://clean-dove-53.clerk.accounts.dev/.well-known/jwks.json');\n        super({\n            jwtFromRequest: passport_jwt_1.ExtractJwt.fromAuthHeaderAsBearerToken(),\n            ignoreExpiration: false,\n            secretOrKeyProvider: (0, jwks_rsa_1.passportJwtSecret)({\n                cache: true,\n                rateLimit: true,\n                jwksRequestsPerMinute: 5,\n                jwksUri: jwksUrl,\n            }),\n            algorithms: ['RS256'],\n        });\n        this.userRepository = userRepository;\n        this.prismaService = prismaService;\n    }\n    async validate(payload) {\n        // Clerk JWT payload contains 'sub' as the Clerk user ID\n        const clerkUserId = payload.sub;\n        if (!clerkUserId) {\n            throw new common_1.UnauthorizedException('Invalid token: no user ID');\n        }\n        // Find user by Clerk ID\n        let user = await this.userRepository.findByClerkId(clerkUserId);\n        if (!user) {\n            // Auto-create user if they don't exist\n            // This handles the case where Clerk webhook hasn't fired yet\n            const email = payload.email;\n            const firstName = payload.given_name || payload.first_name || 'User';\n            const lastName = payload.family_name || payload.last_name || '';\n            if (!email) {\n                throw new common_1.UnauthorizedException('Invalid token: no email found');\n            }\n            // Determine role based on email\n            let roleName = 'CUSTOMER'; // Default to customer role\n            if (email === 'vishal.alawalpuria@gmail.com') {\n                roleName = 'ADMIN'; // Admin role\n            }\n            // Look up the role ID by name\n            const role = await this.prismaService.role.findUnique({\n                where: { name: roleName }\n            });\n            if (!role) {\n                throw new common_1.UnauthorizedException(`Role ${roleName} not found in database`);\n            }\n            try {\n                user = await this.userRepository.create({\n                    clerkId: clerkUserId,\n                    email,\n                    firstName,\n                    lastName,\n                    role: { connect: { id: role.id } },\n                    isActive: true,\n                });\n            }\n            catch (error) {\n                // If creation fails, maybe the user was created in parallel\n                user = await this.userRepository.findByClerkId(clerkUserId);\n                if (!user) {\n                    throw new common_1.UnauthorizedException('Failed to create or find user');\n                }\n            }\n        }\n        if (!user.isActive) {\n            throw new common_1.UnauthorizedException('User account is inactive');\n        }\n        // Return user with role information\n        return {\n            id: user.id,\n            clerkId: user.clerkId,\n            email: user.email,\n            firstName: user.firstName,\n            lastName: user.lastName,\n            role: user.role,\n            isActive: user.isActive,\n        };\n    }\n};\nexports.ClerkJwtStrategy = ClerkJwtStrategy;\nexports.ClerkJwtStrategy = ClerkJwtStrategy = tslib_1.__decorate([\n    (0, common_1.Injectable)(),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof user_repository_1.UserRepository !== \"undefined\" && user_repository_1.UserRepository) === \"function\" ? _a : Object, typeof (_b = typeof database_1.PrismaService !== \"undefined\" && database_1.PrismaService) === \"function\" ? _b : Object, typeof (_c = typeof config_1.ConfigService !== \"undefined\" && config_1.ConfigService) === \"function\" ? _c : Object])\n], ClerkJwtStrategy);\n","module.exports = require(\"jwks-rsa\");","\"use strict\";\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RoleGuard = void 0;\nconst tslib_1 = require(\"tslib\");\nconst common_1 = require(\"@nestjs/common\");\nconst core_1 = require(\"@nestjs/core\");\nconst roles_decorator_1 = require(\"../decorators/roles.decorator\");\nlet RoleGuard = class RoleGuard {\n    constructor(reflector) {\n        this.reflector = reflector;\n    }\n    canActivate(context) {\n        const requiredRoles = this.reflector.getAllAndOverride(roles_decorator_1.ROLES_KEY, [\n            context.getHandler(),\n            context.getClass(),\n        ]);\n        if (!requiredRoles) {\n            return true;\n        }\n        const { user } = context.switchToHttp().getRequest();\n        if (!user || !user.role) {\n            return false;\n        }\n        return requiredRoles.includes(user.role.name);\n    }\n};\nexports.RoleGuard = RoleGuard;\nexports.RoleGuard = RoleGuard = tslib_1.__decorate([\n    (0, common_1.Injectable)(),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof core_1.Reflector !== \"undefined\" && core_1.Reflector) === \"function\" ? _a : Object])\n], RoleGuard);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Roles = exports.ROLES_KEY = void 0;\nconst common_1 = require(\"@nestjs/common\");\nexports.ROLES_KEY = 'roles';\nconst Roles = (...roles) => (0, common_1.SetMetadata)(exports.ROLES_KEY, roles);\nexports.Roles = Roles;\n","\"use strict\";\nvar _a, _b;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ClerkWebhookController = void 0;\nconst tslib_1 = require(\"tslib\");\nconst common_1 = require(\"@nestjs/common\");\nconst config_1 = require(\"@nestjs/config\");\nconst svix_1 = require(\"svix\");\nconst auth_service_1 = require(\"../auth.service\");\nconst public_decorator_1 = require(\"../decorators/public.decorator\");\nlet ClerkWebhookController = class ClerkWebhookController {\n    constructor(authService, configService) {\n        this.authService = authService;\n        this.configService = configService;\n    }\n    async handleClerkWebhook(body, svixId, svixTimestamp, svixSignature) {\n        const webhookSecret = this.configService.get('CLERK_WEBHOOK_SECRET');\n        if (!webhookSecret) {\n            console.warn('Clerk webhook secret not configured, skipping webhook processing');\n            return { received: true, message: 'Webhook not configured' };\n        }\n        const wh = new svix_1.Webhook(webhookSecret);\n        let evt;\n        try {\n            evt = wh.verify(JSON.stringify(body), {\n                'svix-id': svixId,\n                'svix-timestamp': svixTimestamp,\n                'svix-signature': svixSignature,\n            });\n        }\n        catch (err) {\n            throw new common_1.BadRequestException('Invalid webhook signature');\n        }\n        switch (evt.type) {\n            case 'user.created':\n            case 'user.updated':\n                await this.handleUserEvent(evt);\n                break;\n            case 'user.deleted':\n                await this.handleUserDeleted(evt);\n                break;\n            default:\n                console.log(`Unhandled webhook event type: ${evt.type}`);\n        }\n        return { received: true };\n    }\n    async handleUserEvent(evt) {\n        const { id, email_addresses } = evt.data;\n        if (!email_addresses || email_addresses.length === 0) {\n            return;\n        }\n        await this.authService.validateClerkUser(id);\n    }\n    async handleUserDeleted(evt) {\n        const { id } = evt.data;\n        // Implement user deactivation logic\n        console.log(`User ${id} deleted in Clerk`);\n    }\n};\nexports.ClerkWebhookController = ClerkWebhookController;\ntslib_1.__decorate([\n    (0, public_decorator_1.Public)(),\n    (0, common_1.Post)('clerk'),\n    (0, common_1.HttpCode)(common_1.HttpStatus.OK),\n    tslib_1.__param(0, (0, common_1.Body)()),\n    tslib_1.__param(1, (0, common_1.Headers)('svix-id')),\n    tslib_1.__param(2, (0, common_1.Headers)('svix-timestamp')),\n    tslib_1.__param(3, (0, common_1.Headers)('svix-signature')),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [Object, String, String, String]),\n    tslib_1.__metadata(\"design:returntype\", Promise)\n], ClerkWebhookController.prototype, \"handleClerkWebhook\", null);\nexports.ClerkWebhookController = ClerkWebhookController = tslib_1.__decorate([\n    (0, common_1.Controller)('api/webhooks'),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof auth_service_1.AuthService !== \"undefined\" && auth_service_1.AuthService) === \"function\" ? _a : Object, typeof (_b = typeof config_1.ConfigService !== \"undefined\" && config_1.ConfigService) === \"function\" ? _b : Object])\n], ClerkWebhookController);\n","module.exports = require(\"svix\");","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UsersModule = void 0;\nconst tslib_1 = require(\"tslib\");\nconst common_1 = require(\"@nestjs/common\");\nconst users_service_1 = require(\"./users.service\");\nconst users_controller_1 = require(\"./users.controller\");\nconst user_repository_1 = require(\"./repositories/user.repository\");\nconst role_repository_1 = require(\"../roles/repositories/role.repository\");\nconst audit_repository_1 = require(\"../audit/repositories/audit.repository\");\nconst database_1 = require(\"@gt-automotive/database\");\nlet UsersModule = class UsersModule {\n};\nexports.UsersModule = UsersModule;\nexports.UsersModule = UsersModule = tslib_1.__decorate([\n    (0, common_1.Module)({\n        controllers: [users_controller_1.UsersController],\n        providers: [\n            users_service_1.UsersService,\n            user_repository_1.UserRepository,\n            role_repository_1.RoleRepository,\n            audit_repository_1.AuditRepository,\n            database_1.PrismaService,\n        ],\n        exports: [users_service_1.UsersService, user_repository_1.UserRepository],\n    })\n], UsersModule);\n","\"use strict\";\nvar _a, _b, _c, _d;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UsersService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst common_1 = require(\"@nestjs/common\");\nconst config_1 = require(\"@nestjs/config\");\nconst user_repository_1 = require(\"./repositories/user.repository\");\nconst role_repository_1 = require(\"../roles/repositories/role.repository\");\nconst audit_repository_1 = require(\"../audit/repositories/audit.repository\");\nconst bcrypt = tslib_1.__importStar(require(\"bcryptjs\"));\nlet UsersService = class UsersService {\n    constructor(userRepository, roleRepository, auditRepository, configService) {\n        this.userRepository = userRepository;\n        this.roleRepository = roleRepository;\n        this.auditRepository = auditRepository;\n        this.configService = configService;\n    }\n    async findAll(filters) {\n        return this.userRepository.findAll(filters);\n    }\n    async findById(id) {\n        const user = await this.userRepository.findById(id);\n        if (!user) {\n            throw new common_1.NotFoundException('User not found');\n        }\n        return user;\n    }\n    async findByEmail(email) {\n        return this.userRepository.findByEmail(email);\n    }\n    async create(data) {\n        const existingUser = await this.userRepository.findByEmail(data.email);\n        if (existingUser) {\n            throw new common_1.ConflictException('User with this email already exists');\n        }\n        const role = await this.roleRepository.findById(data.roleId);\n        if (!role) {\n            throw new common_1.NotFoundException('Role not found');\n        }\n        const hashedPassword = data.password\n            ? await bcrypt.hash(data.password, 10)\n            : undefined;\n        const user = await this.userRepository.create({\n            clerkId: '', // Will need proper Clerk ID if using Clerk\n            email: data.email,\n            firstName: data.firstName,\n            lastName: data.lastName,\n            roleId: data.roleId,\n        });\n        await this.auditRepository.create({\n            userId: data.createdBy,\n            action: 'USER_CREATED',\n            entityType: 'user',\n            entityId: user.id,\n            details: { email: data.email, roleId: data.roleId },\n        });\n        return user;\n    }\n    async createAdminOrStaff(data) {\n        // Check if user already exists in our database\n        const existingUser = await this.userRepository.findByEmail(data.email);\n        if (existingUser) {\n            throw new common_1.ConflictException('User with this email already exists');\n        }\n        // Get role by name\n        const role = await this.roleRepository.findByName(data.roleName);\n        if (!role) {\n            throw new common_1.NotFoundException(`Role ${data.roleName} not found`);\n        }\n        let clerkUserId = null;\n        // Create user in Clerk if configured\n        const clerkSecretKey = this.configService.get('CLERK_SECRET_KEY');\n        if (clerkSecretKey) {\n            try {\n                const { clerkClient } = await import('@clerk/clerk-sdk-node');\n                const clerkUser = await clerkClient.users.createUser({\n                    emailAddress: [data.email],\n                    username: data.username,\n                    firstName: data.firstName,\n                    lastName: data.lastName,\n                    password: data.password,\n                });\n                clerkUserId = clerkUser.id;\n                // Set metadata for role\n                await clerkClient.users.updateUserMetadata(clerkUserId, {\n                    publicMetadata: {\n                        role: data.roleName,\n                    },\n                });\n            }\n            catch (clerkError) {\n                console.error('Failed to create user in Clerk:', clerkError);\n                throw new common_1.InternalServerErrorException(`Failed to create user in Clerk: ${clerkError.message}`);\n            }\n        }\n        // Create user in our database\n        const user = await this.userRepository.create({\n            clerkId: clerkUserId || '',\n            email: data.email,\n            firstName: data.firstName,\n            lastName: data.lastName,\n            roleId: role.id,\n        });\n        // Create audit log\n        await this.auditRepository.create({\n            userId: data.createdBy,\n            action: 'ADMIN_STAFF_USER_CREATED',\n            entityType: 'user',\n            entityId: user.id,\n            details: {\n                email: data.email,\n                role: data.roleName,\n                clerkId: clerkUserId,\n            },\n        });\n        return {\n            ...user,\n            clerkCreated: !!clerkUserId,\n        };\n    }\n    async update(id, data) {\n        const user = await this.findById(id);\n        if (data.email && data.email !== user.email) {\n            const existingUser = await this.userRepository.findByEmail(data.email);\n            if (existingUser) {\n                throw new common_1.ConflictException('Email already in use');\n            }\n        }\n        const updatedUser = await this.userRepository.update(id, {\n            email: data.email,\n            firstName: data.firstName,\n            lastName: data.lastName,\n            isActive: data.isActive,\n        });\n        await this.auditRepository.create({\n            userId: data.updatedBy,\n            action: 'USER_UPDATED',\n            entityType: 'user',\n            entityId: id,\n            details: data,\n        });\n        return updatedUser;\n    }\n    async assignRole(userId, roleId, assignedBy) {\n        const user = await this.findById(userId);\n        const role = await this.roleRepository.findById(roleId);\n        if (!role) {\n            throw new common_1.NotFoundException('Role not found');\n        }\n        // Prevent changing admin users by non-admins\n        if (user.role.name === 'ADMIN') {\n            const assigningUser = await this.userRepository.findById(assignedBy);\n            if (assigningUser?.role.name !== 'ADMIN') {\n                throw new common_1.ForbiddenException('Only admins can modify admin users');\n            }\n        }\n        const updatedUser = await this.userRepository.assignRole(userId, roleId);\n        await this.auditRepository.create({\n            userId: assignedBy,\n            action: 'ROLE_ASSIGNED',\n            entityType: 'user',\n            entityId: userId,\n            details: {\n                oldRole: user.role.name,\n                newRole: role.name\n            },\n        });\n        return updatedUser;\n    }\n    async delete(id, deletedBy) {\n        const user = await this.findById(id);\n        // Prevent deleting admin users\n        if (user.role.name === 'ADMIN') {\n            const deletingUser = await this.userRepository.findById(deletedBy);\n            if (deletingUser?.role.name !== 'ADMIN') {\n                throw new common_1.ForbiddenException('Only admins can delete admin users');\n            }\n        }\n        // Soft delete by deactivating\n        const deactivatedUser = await this.userRepository.update(id, {\n            isActive: false,\n        });\n        await this.auditRepository.create({\n            userId: deletedBy,\n            action: 'USER_DEACTIVATED',\n            entityType: 'user',\n            entityId: id,\n            details: { email: user.email },\n        });\n        return deactivatedUser;\n    }\n    async changePassword(_userId, _oldPassword, _newPassword) {\n        // Passwords are managed by Clerk, not our system\n        throw new common_1.ForbiddenException('Password management is handled by Clerk authentication system');\n    }\n    async resetPassword(_userId, _newPassword, _resetBy) {\n        // Passwords are managed by Clerk, not our system\n        throw new common_1.ForbiddenException('Password management is handled by Clerk authentication system');\n    }\n};\nexports.UsersService = UsersService;\nexports.UsersService = UsersService = tslib_1.__decorate([\n    (0, common_1.Injectable)(),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof user_repository_1.UserRepository !== \"undefined\" && user_repository_1.UserRepository) === \"function\" ? _a : Object, typeof (_b = typeof role_repository_1.RoleRepository !== \"undefined\" && role_repository_1.RoleRepository) === \"function\" ? _b : Object, typeof (_c = typeof audit_repository_1.AuditRepository !== \"undefined\" && audit_repository_1.AuditRepository) === \"function\" ? _c : Object, typeof (_d = typeof config_1.ConfigService !== \"undefined\" && config_1.ConfigService) === \"function\" ? _d : Object])\n], UsersService);\n","module.exports = require(\"bcryptjs\");","\"use strict\";\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UsersController = void 0;\nconst tslib_1 = require(\"tslib\");\nconst common_1 = require(\"@nestjs/common\");\nconst users_service_1 = require(\"./users.service\");\nconst jwt_auth_guard_1 = require(\"../auth/guards/jwt-auth.guard\");\nconst role_guard_1 = require(\"../auth/guards/role.guard\");\nconst roles_decorator_1 = require(\"../auth/decorators/roles.decorator\");\nconst current_user_decorator_1 = require(\"../auth/decorators/current-user.decorator\");\nlet UsersController = class UsersController {\n    constructor(usersService) {\n        this.usersService = usersService;\n    }\n    async findAll(roleId, isActive) {\n        const filters = {\n            roleId: roleId || undefined,\n            isActive: isActive === 'true' ? true : isActive === 'false' ? false : undefined,\n        };\n        return this.usersService.findAll(filters);\n    }\n    async findById(id) {\n        return this.usersService.findById(id);\n    }\n    async create(createUserDto, currentUser) {\n        return this.usersService.create({\n            ...createUserDto,\n            createdBy: currentUser.id,\n        });\n    }\n    async createAdminOrStaff(createUserDto, currentUser) {\n        return this.usersService.createAdminOrStaff({\n            ...createUserDto,\n            createdBy: currentUser.id,\n        });\n    }\n    async update(id, updateUserDto, currentUser) {\n        return this.usersService.update(id, {\n            ...updateUserDto,\n            updatedBy: currentUser.id,\n        });\n    }\n    async assignRole(id, roleId, currentUser) {\n        return this.usersService.assignRole(id, roleId, currentUser.id);\n    }\n    async delete(id, currentUser) {\n        return this.usersService.delete(id, currentUser.id);\n    }\n    async changePassword(id, body, currentUser) {\n        // Users can only change their own password\n        if (currentUser.id !== id) {\n            throw new Error('You can only change your own password');\n        }\n        return this.usersService.changePassword(id, body.oldPassword, body.newPassword);\n    }\n    async resetPassword(id, newPassword, currentUser) {\n        return this.usersService.resetPassword(id, newPassword, currentUser.id);\n    }\n    async getMyProfile(currentUser) {\n        return this.usersService.findById(currentUser.id);\n    }\n    async updateMyProfile(updateProfileDto, currentUser) {\n        return this.usersService.update(currentUser.id, {\n            ...updateProfileDto,\n            updatedBy: currentUser.id,\n        });\n    }\n};\nexports.UsersController = UsersController;\ntslib_1.__decorate([\n    (0, common_1.Get)(),\n    (0, roles_decorator_1.Roles)('ADMIN', 'STAFF'),\n    tslib_1.__param(0, (0, common_1.Query)('roleId')),\n    tslib_1.__param(1, (0, common_1.Query)('isActive')),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [String, String]),\n    tslib_1.__metadata(\"design:returntype\", Promise)\n], UsersController.prototype, \"findAll\", null);\ntslib_1.__decorate([\n    (0, common_1.Get)(':id'),\n    (0, roles_decorator_1.Roles)('ADMIN', 'STAFF'),\n    tslib_1.__param(0, (0, common_1.Param)('id')),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [String]),\n    tslib_1.__metadata(\"design:returntype\", Promise)\n], UsersController.prototype, \"findById\", null);\ntslib_1.__decorate([\n    (0, common_1.Post)(),\n    (0, roles_decorator_1.Roles)('ADMIN'),\n    tslib_1.__param(0, (0, common_1.Body)(new common_1.ValidationPipe())),\n    tslib_1.__param(1, (0, current_user_decorator_1.CurrentUser)()),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [Object, Object]),\n    tslib_1.__metadata(\"design:returntype\", Promise)\n], UsersController.prototype, \"create\", null);\ntslib_1.__decorate([\n    (0, common_1.Post)('admin-staff'),\n    (0, roles_decorator_1.Roles)('ADMIN'),\n    tslib_1.__param(0, (0, common_1.Body)(new common_1.ValidationPipe())),\n    tslib_1.__param(1, (0, current_user_decorator_1.CurrentUser)()),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [Object, Object]),\n    tslib_1.__metadata(\"design:returntype\", Promise)\n], UsersController.prototype, \"createAdminOrStaff\", null);\ntslib_1.__decorate([\n    (0, common_1.Put)(':id'),\n    (0, roles_decorator_1.Roles)('ADMIN'),\n    tslib_1.__param(0, (0, common_1.Param)('id')),\n    tslib_1.__param(1, (0, common_1.Body)(new common_1.ValidationPipe())),\n    tslib_1.__param(2, (0, current_user_decorator_1.CurrentUser)()),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [String, Object, Object]),\n    tslib_1.__metadata(\"design:returntype\", Promise)\n], UsersController.prototype, \"update\", null);\ntslib_1.__decorate([\n    (0, common_1.Put)(':id/role'),\n    (0, roles_decorator_1.Roles)('ADMIN'),\n    tslib_1.__param(0, (0, common_1.Param)('id')),\n    tslib_1.__param(1, (0, common_1.Body)('roleId')),\n    tslib_1.__param(2, (0, current_user_decorator_1.CurrentUser)()),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [String, String, Object]),\n    tslib_1.__metadata(\"design:returntype\", Promise)\n], UsersController.prototype, \"assignRole\", null);\ntslib_1.__decorate([\n    (0, common_1.Delete)(':id'),\n    (0, roles_decorator_1.Roles)('ADMIN'),\n    (0, common_1.HttpCode)(common_1.HttpStatus.OK),\n    tslib_1.__param(0, (0, common_1.Param)('id')),\n    tslib_1.__param(1, (0, current_user_decorator_1.CurrentUser)()),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [String, Object]),\n    tslib_1.__metadata(\"design:returntype\", Promise)\n], UsersController.prototype, \"delete\", null);\ntslib_1.__decorate([\n    (0, common_1.Post)(':id/change-password'),\n    (0, common_1.HttpCode)(common_1.HttpStatus.OK),\n    tslib_1.__param(0, (0, common_1.Param)('id')),\n    tslib_1.__param(1, (0, common_1.Body)()),\n    tslib_1.__param(2, (0, current_user_decorator_1.CurrentUser)()),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [String, Object, Object]),\n    tslib_1.__metadata(\"design:returntype\", Promise)\n], UsersController.prototype, \"changePassword\", null);\ntslib_1.__decorate([\n    (0, common_1.Post)(':id/reset-password'),\n    (0, roles_decorator_1.Roles)('ADMIN'),\n    (0, common_1.HttpCode)(common_1.HttpStatus.OK),\n    tslib_1.__param(0, (0, common_1.Param)('id')),\n    tslib_1.__param(1, (0, common_1.Body)('newPassword')),\n    tslib_1.__param(2, (0, current_user_decorator_1.CurrentUser)()),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [String, String, Object]),\n    tslib_1.__metadata(\"design:returntype\", Promise)\n], UsersController.prototype, \"resetPassword\", null);\ntslib_1.__decorate([\n    (0, common_1.Get)('profile/me'),\n    tslib_1.__param(0, (0, current_user_decorator_1.CurrentUser)()),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [Object]),\n    tslib_1.__metadata(\"design:returntype\", Promise)\n], UsersController.prototype, \"getMyProfile\", null);\ntslib_1.__decorate([\n    (0, common_1.Put)('profile/me'),\n    tslib_1.__param(0, (0, common_1.Body)()),\n    tslib_1.__param(1, (0, current_user_decorator_1.CurrentUser)()),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [Object, Object]),\n    tslib_1.__metadata(\"design:returntype\", Promise)\n], UsersController.prototype, \"updateMyProfile\", null);\nexports.UsersController = UsersController = tslib_1.__decorate([\n    (0, common_1.Controller)('api/users'),\n    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, role_guard_1.RoleGuard),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof users_service_1.UsersService !== \"undefined\" && users_service_1.UsersService) === \"function\" ? _a : Object])\n], UsersController);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TiresModule = void 0;\nconst tslib_1 = require(\"tslib\");\nconst common_1 = require(\"@nestjs/common\");\nconst tires_controller_1 = require(\"./tires.controller\");\nconst tires_service_1 = require(\"./tires.service\");\nconst tire_repository_1 = require(\"./repositories/tire.repository\");\nconst audit_repository_1 = require(\"../audit/repositories/audit.repository\");\nconst database_1 = require(\"@gt-automotive/database\");\nlet TiresModule = class TiresModule {\n};\nexports.TiresModule = TiresModule;\nexports.TiresModule = TiresModule = tslib_1.__decorate([\n    (0, common_1.Module)({\n        imports: [database_1.DatabaseModule],\n        controllers: [tires_controller_1.TiresController],\n        providers: [tires_service_1.TiresService, tire_repository_1.TireRepository, audit_repository_1.AuditRepository],\n        exports: [tires_service_1.TiresService, tire_repository_1.TireRepository],\n    })\n], TiresModule);\n","\"use strict\";\nvar _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TiresController = void 0;\nconst tslib_1 = require(\"tslib\");\nconst common_1 = require(\"@nestjs/common\");\nconst tires_service_1 = require(\"./tires.service\");\nconst jwt_auth_guard_1 = require(\"../auth/guards/jwt-auth.guard\");\nconst role_guard_1 = require(\"../auth/guards/role.guard\");\nconst roles_decorator_1 = require(\"../auth/decorators/roles.decorator\");\nconst current_user_decorator_1 = require(\"../auth/decorators/current-user.decorator\");\nconst public_decorator_1 = require(\"../auth/decorators/public.decorator\");\nconst shared_dto_1 = require(\"@gt-automotive/shared-dto\");\nlet TiresController = class TiresController {\n    constructor(tiresService) {\n        this.tiresService = tiresService;\n    }\n    // Public endpoint - customers can view tires\n    async findAll(searchDto, user) {\n        const userRole = user?.role?.name;\n        // If search parameters are provided, use search method\n        if (Object.keys(searchDto).length > 0) {\n            const searchParams = {\n                filters: {\n                    brand: searchDto.brand,\n                    model: searchDto.model,\n                    size: searchDto.size,\n                    type: searchDto.type,\n                    condition: searchDto.condition,\n                    minPrice: searchDto.minPrice,\n                    maxPrice: searchDto.maxPrice,\n                    inStock: searchDto.inStock,\n                    lowStock: searchDto.lowStock,\n                },\n                search: searchDto.search,\n                sortBy: searchDto.sortBy || 'updatedAt',\n                sortOrder: searchDto.sortOrder || 'desc',\n                page: searchDto.page || 1,\n                limit: searchDto.limit || 20,\n            };\n            return this.tiresService.search(searchParams, userRole);\n        }\n        // Simple findAll for basic requests\n        const filters = {\n            inStock: true, // Only show in-stock items by default for public\n        };\n        return this.tiresService.findAll(filters, userRole);\n    }\n    // Public endpoint - get all tire brands\n    async getBrands(user) {\n        const userRole = user?.role?.name;\n        return this.tiresService.getBrands(userRole);\n    }\n    // Public endpoint - get all tire models for a brand\n    async getModelsForBrand(brand, user) {\n        const userRole = user?.role?.name;\n        return this.tiresService.getModelsForBrand(brand, userRole);\n    }\n    // Public endpoint - get all tire sizes\n    async getSizes(user) {\n        const userRole = user?.role?.name;\n        return this.tiresService.getSizes(userRole);\n    }\n    // Public endpoint - customers can view individual tires\n    async findById(id, user) {\n        const userRole = user?.role?.name;\n        return this.tiresService.findById(id, userRole);\n    }\n    // Staff and Admin - Create new tire\n    async create(createTireDto, user) {\n        return this.tiresService.create(createTireDto, user.id, user.role.name);\n    }\n    // Staff and Admin - Update tire\n    async update(id, updateTireDto, user) {\n        return this.tiresService.update(id, updateTireDto, user.id, user.role.name);\n    }\n    // Admin only - Delete tire\n    async delete(id, user) {\n        return this.tiresService.delete(id, user.id, user.role.name);\n    }\n    // Staff and Admin - Adjust stock\n    async adjustStock(id, adjustmentDto, user) {\n        return this.tiresService.adjustStock(id, adjustmentDto, user.id, user.role.name);\n    }\n    // Staff and Admin - Get low stock items\n    async getLowStock(user) {\n        return this.tiresService.getLowStock(user.role.name);\n    }\n    // Admin only - Get inventory report\n    async getInventoryReport(startDate, endDate, user) {\n        const filters = {\n            startDate,\n            endDate,\n        };\n        return this.tiresService.getInventoryReport(filters, user?.role?.name);\n    }\n    // Staff and Admin - Search by brand and model\n    async findByBrandAndModel(brand, model, user) {\n        return this.tiresService.findByBrandAndModel(brand, model, user.role.name);\n    }\n    // Public - Search by size (useful for customers)\n    async findBySize(size, type, user) {\n        const userRole = user?.role?.name;\n        return this.tiresService.findBySizeAndType(size, type, userRole);\n    }\n    // Staff and Admin - Get stock alerts\n    async getStockAlerts() {\n        return this.tiresService.checkLowStockAlerts();\n    }\n};\nexports.TiresController = TiresController;\ntslib_1.__decorate([\n    (0, common_1.Get)(),\n    (0, public_decorator_1.Public)(),\n    tslib_1.__param(0, (0, common_1.Query)(new common_1.ValidationPipe({ transform: true }))),\n    tslib_1.__param(1, (0, current_user_decorator_1.CurrentUser)()),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_b = typeof shared_dto_1.TireSearchDto !== \"undefined\" && shared_dto_1.TireSearchDto) === \"function\" ? _b : Object, Object]),\n    tslib_1.__metadata(\"design:returntype\", typeof (_c = typeof Promise !== \"undefined\" && Promise) === \"function\" ? _c : Object)\n], TiresController.prototype, \"findAll\", null);\ntslib_1.__decorate([\n    (0, common_1.Get)('brands'),\n    (0, public_decorator_1.Public)(),\n    tslib_1.__param(0, (0, current_user_decorator_1.CurrentUser)()),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [Object]),\n    tslib_1.__metadata(\"design:returntype\", typeof (_d = typeof Promise !== \"undefined\" && Promise) === \"function\" ? _d : Object)\n], TiresController.prototype, \"getBrands\", null);\ntslib_1.__decorate([\n    (0, common_1.Get)('brands/:brand/models'),\n    (0, public_decorator_1.Public)(),\n    tslib_1.__param(0, (0, common_1.Param)('brand')),\n    tslib_1.__param(1, (0, current_user_decorator_1.CurrentUser)()),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [String, Object]),\n    tslib_1.__metadata(\"design:returntype\", typeof (_e = typeof Promise !== \"undefined\" && Promise) === \"function\" ? _e : Object)\n], TiresController.prototype, \"getModelsForBrand\", null);\ntslib_1.__decorate([\n    (0, common_1.Get)('sizes'),\n    (0, public_decorator_1.Public)(),\n    tslib_1.__param(0, (0, current_user_decorator_1.CurrentUser)()),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [Object]),\n    tslib_1.__metadata(\"design:returntype\", typeof (_f = typeof Promise !== \"undefined\" && Promise) === \"function\" ? _f : Object)\n], TiresController.prototype, \"getSizes\", null);\ntslib_1.__decorate([\n    (0, common_1.Get)(':id'),\n    (0, public_decorator_1.Public)(),\n    tslib_1.__param(0, (0, common_1.Param)('id')),\n    tslib_1.__param(1, (0, current_user_decorator_1.CurrentUser)()),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [String, Object]),\n    tslib_1.__metadata(\"design:returntype\", typeof (_g = typeof Promise !== \"undefined\" && Promise) === \"function\" ? _g : Object)\n], TiresController.prototype, \"findById\", null);\ntslib_1.__decorate([\n    (0, common_1.Post)(),\n    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, role_guard_1.RoleGuard),\n    (0, roles_decorator_1.Roles)('STAFF', 'ADMIN'),\n    (0, common_1.UsePipes)(new common_1.ValidationPipe({ transform: true })),\n    tslib_1.__param(0, (0, common_1.Body)()),\n    tslib_1.__param(1, (0, current_user_decorator_1.CurrentUser)()),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_h = typeof shared_dto_1.CreateTireDto !== \"undefined\" && shared_dto_1.CreateTireDto) === \"function\" ? _h : Object, Object]),\n    tslib_1.__metadata(\"design:returntype\", typeof (_j = typeof Promise !== \"undefined\" && Promise) === \"function\" ? _j : Object)\n], TiresController.prototype, \"create\", null);\ntslib_1.__decorate([\n    (0, common_1.Put)(':id'),\n    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, role_guard_1.RoleGuard),\n    (0, roles_decorator_1.Roles)('STAFF', 'ADMIN'),\n    (0, common_1.UsePipes)(new common_1.ValidationPipe({ transform: true })),\n    tslib_1.__param(0, (0, common_1.Param)('id')),\n    tslib_1.__param(1, (0, common_1.Body)()),\n    tslib_1.__param(2, (0, current_user_decorator_1.CurrentUser)()),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [String, typeof (_k = typeof shared_dto_1.UpdateTireDto !== \"undefined\" && shared_dto_1.UpdateTireDto) === \"function\" ? _k : Object, Object]),\n    tslib_1.__metadata(\"design:returntype\", typeof (_l = typeof Promise !== \"undefined\" && Promise) === \"function\" ? _l : Object)\n], TiresController.prototype, \"update\", null);\ntslib_1.__decorate([\n    (0, common_1.Delete)(':id'),\n    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, role_guard_1.RoleGuard),\n    (0, roles_decorator_1.Roles)('ADMIN'),\n    (0, common_1.HttpCode)(common_1.HttpStatus.NO_CONTENT),\n    tslib_1.__param(0, (0, common_1.Param)('id')),\n    tslib_1.__param(1, (0, current_user_decorator_1.CurrentUser)()),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [String, Object]),\n    tslib_1.__metadata(\"design:returntype\", typeof (_m = typeof Promise !== \"undefined\" && Promise) === \"function\" ? _m : Object)\n], TiresController.prototype, \"delete\", null);\ntslib_1.__decorate([\n    (0, common_1.Post)(':id/adjust-stock'),\n    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, role_guard_1.RoleGuard),\n    (0, roles_decorator_1.Roles)('STAFF', 'ADMIN'),\n    (0, common_1.UsePipes)(new common_1.ValidationPipe({ transform: true })),\n    tslib_1.__param(0, (0, common_1.Param)('id')),\n    tslib_1.__param(1, (0, common_1.Body)()),\n    tslib_1.__param(2, (0, current_user_decorator_1.CurrentUser)()),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [String, typeof (_o = typeof shared_dto_1.StockAdjustmentDto !== \"undefined\" && shared_dto_1.StockAdjustmentDto) === \"function\" ? _o : Object, Object]),\n    tslib_1.__metadata(\"design:returntype\", typeof (_p = typeof Promise !== \"undefined\" && Promise) === \"function\" ? _p : Object)\n], TiresController.prototype, \"adjustStock\", null);\ntslib_1.__decorate([\n    (0, common_1.Get)('reports/low-stock'),\n    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, role_guard_1.RoleGuard),\n    (0, roles_decorator_1.Roles)('STAFF', 'ADMIN'),\n    tslib_1.__param(0, (0, current_user_decorator_1.CurrentUser)()),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [Object]),\n    tslib_1.__metadata(\"design:returntype\", typeof (_q = typeof Promise !== \"undefined\" && Promise) === \"function\" ? _q : Object)\n], TiresController.prototype, \"getLowStock\", null);\ntslib_1.__decorate([\n    (0, common_1.Get)('reports/inventory'),\n    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, role_guard_1.RoleGuard),\n    (0, roles_decorator_1.Roles)('ADMIN'),\n    tslib_1.__param(0, (0, common_1.Query)('startDate')),\n    tslib_1.__param(1, (0, common_1.Query)('endDate')),\n    tslib_1.__param(2, (0, current_user_decorator_1.CurrentUser)()),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [String, String, Object]),\n    tslib_1.__metadata(\"design:returntype\", typeof (_r = typeof Promise !== \"undefined\" && Promise) === \"function\" ? _r : Object)\n], TiresController.prototype, \"getInventoryReport\", null);\ntslib_1.__decorate([\n    (0, common_1.Get)('search/brand/:brand/model/:model'),\n    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, role_guard_1.RoleGuard),\n    (0, roles_decorator_1.Roles)('STAFF', 'ADMIN'),\n    tslib_1.__param(0, (0, common_1.Param)('brand')),\n    tslib_1.__param(1, (0, common_1.Param)('model')),\n    tslib_1.__param(2, (0, current_user_decorator_1.CurrentUser)()),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [String, String, Object]),\n    tslib_1.__metadata(\"design:returntype\", typeof (_s = typeof Promise !== \"undefined\" && Promise) === \"function\" ? _s : Object)\n], TiresController.prototype, \"findByBrandAndModel\", null);\ntslib_1.__decorate([\n    (0, common_1.Get)('search/size/:size'),\n    (0, public_decorator_1.Public)(),\n    tslib_1.__param(0, (0, common_1.Param)('size')),\n    tslib_1.__param(1, (0, common_1.Query)('type')),\n    tslib_1.__param(2, (0, current_user_decorator_1.CurrentUser)()),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [String, String, Object]),\n    tslib_1.__metadata(\"design:returntype\", typeof (_t = typeof Promise !== \"undefined\" && Promise) === \"function\" ? _t : Object)\n], TiresController.prototype, \"findBySize\", null);\ntslib_1.__decorate([\n    (0, common_1.Get)('alerts/low-stock'),\n    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, role_guard_1.RoleGuard),\n    (0, roles_decorator_1.Roles)('STAFF', 'ADMIN'),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", []),\n    tslib_1.__metadata(\"design:returntype\", typeof (_u = typeof Promise !== \"undefined\" && Promise) === \"function\" ? _u : Object)\n], TiresController.prototype, \"getStockAlerts\", null);\nexports.TiresController = TiresController = tslib_1.__decorate([\n    (0, common_1.Controller)('api/tires'),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof tires_service_1.TiresService !== \"undefined\" && tires_service_1.TiresService) === \"function\" ? _a : Object])\n], TiresController);\n","\"use strict\";\nvar _a, _b;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TiresService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst common_1 = require(\"@nestjs/common\");\nconst tire_repository_1 = require(\"./repositories/tire.repository\");\nconst audit_repository_1 = require(\"../audit/repositories/audit.repository\");\nconst shared_dto_1 = require(\"@gt-automotive/shared-dto\");\nconst library_1 = require(\"@prisma/client/runtime/library\");\nconst class_transformer_1 = require(\"class-transformer\");\nlet TiresService = class TiresService {\n    constructor(tireRepository, auditRepository) {\n        this.tireRepository = tireRepository;\n        this.auditRepository = auditRepository;\n    }\n    async findAll(filters, userRole) {\n        const tires = await this.tireRepository.findAll(filters);\n        return this.formatTireResponse(tires, userRole);\n    }\n    async findById(id, userRole) {\n        const tire = await this.tireRepository.findById(id);\n        if (!tire) {\n            throw new common_1.NotFoundException('Tire not found');\n        }\n        return this.formatSingleTireResponse(tire, userRole);\n    }\n    async search(searchParams, userRole) {\n        const result = await this.tireRepository.search(searchParams);\n        return {\n            items: this.formatTireResponse(result.items, userRole),\n            total: result.total,\n            page: result.page,\n            limit: result.limit,\n            hasMore: result.hasMore,\n        };\n    }\n    async create(createTireDto, userId, userRole) {\n        // Check if user has permission to create tires\n        if (!['STAFF', 'ADMIN'].includes(userRole)) {\n            throw new common_1.ForbiddenException('Insufficient permissions to create tires');\n        }\n        // Check for duplicates (same brand, size, type, condition)\n        const existingTires = await this.tireRepository.findAll({\n            brand: createTireDto.brand,\n            size: createTireDto.size,\n            type: createTireDto.type,\n            condition: createTireDto.condition,\n        });\n        if (existingTires.length > 0) {\n            throw new common_1.ConflictException('Tire with the same specifications already exists. Consider updating the quantity instead.');\n        }\n        // Set default values\n        const tireData = {\n            ...createTireDto,\n            minStock: createTireDto.minStock || 5,\n            price: new library_1.Decimal(createTireDto.price),\n            cost: createTireDto.cost ? new library_1.Decimal(createTireDto.cost) : null,\n        };\n        const tire = await this.tireRepository.create(tireData);\n        // Log the creation\n        await this.auditRepository.create({\n            userId,\n            action: 'TIRE_CREATED',\n            entityType: 'tire',\n            entityId: tire.id,\n            details: {\n                brand: tire.brand,\n                size: tire.size,\n                quantity: tire.quantity,\n            },\n        });\n        return this.formatSingleTireResponse(tire, userRole);\n    }\n    async update(id, updateTireDto, userId, userRole) {\n        // Check if user has permission to update tires\n        if (!['STAFF', 'ADMIN'].includes(userRole)) {\n            throw new common_1.ForbiddenException('Insufficient permissions to update tires');\n        }\n        const existingTire = await this.findById(id, userRole);\n        // Prepare update data\n        const updateData = { ...updateTireDto };\n        if (updateTireDto.price !== undefined) {\n            updateData.price = new library_1.Decimal(updateTireDto.price);\n        }\n        if (updateTireDto.cost !== undefined) {\n            updateData.cost = new library_1.Decimal(updateTireDto.cost);\n        }\n        const updatedTire = await this.tireRepository.update(id, updateData);\n        // Log the update\n        await this.auditRepository.create({\n            userId,\n            action: 'TIRE_UPDATED',\n            entityType: 'tire',\n            entityId: id,\n            details: {\n                changes: updateTireDto,\n                oldValues: {\n                    brand: existingTire.brand,\n                    price: existingTire.price,\n                },\n            },\n        });\n        return this.formatSingleTireResponse(updatedTire, userRole);\n    }\n    async delete(id, userId, userRole) {\n        // Only admin can delete tires\n        if (userRole !== 'ADMIN') {\n            throw new common_1.ForbiddenException('Only administrators can delete tires');\n        }\n        const tire = await this.findById(id, userRole);\n        // Check if tire has been used in any invoices\n        // TODO: Add check for invoice items when invoice module is implemented\n        const success = await this.tireRepository.delete(id);\n        if (!success) {\n            throw new common_1.BadRequestException('Failed to delete tire');\n        }\n        // Log the deletion\n        await this.auditRepository.create({\n            userId,\n            action: 'TIRE_DELETED',\n            entityType: 'tire',\n            entityId: id,\n            details: {\n                brand: tire.brand,\n                size: tire.size,\n            },\n        });\n        return { success: true };\n    }\n    async adjustStock(id, adjustmentDto, userId, userRole) {\n        // Check if user has permission to adjust stock\n        if (!['STAFF', 'ADMIN'].includes(userRole)) {\n            throw new common_1.ForbiddenException('Insufficient permissions to adjust stock');\n        }\n        const existingTire = await this.findById(id, userRole);\n        // Validate adjustment\n        if (adjustmentDto.type === 'remove' && adjustmentDto.quantity > existingTire.quantity) {\n            throw new common_1.BadRequestException(`Cannot remove ${adjustmentDto.quantity} items. Only ${existingTire.quantity} in stock.`);\n        }\n        if (adjustmentDto.quantity < 0 && adjustmentDto.type !== 'remove') {\n            throw new common_1.BadRequestException('Quantity cannot be negative for add/set operations');\n        }\n        const oldQuantity = existingTire.quantity;\n        const updatedTire = await this.tireRepository.adjustStock(id, {\n            quantity: Math.abs(adjustmentDto.quantity),\n            type: adjustmentDto.type,\n        });\n        // Log the stock adjustment\n        await this.auditRepository.create({\n            userId,\n            action: 'STOCK_ADJUSTED',\n            entityType: 'tire',\n            entityId: id,\n            details: {\n                type: adjustmentDto.type,\n                quantity: adjustmentDto.quantity,\n                reason: adjustmentDto.reason,\n                oldQuantity,\n                newQuantity: updatedTire.quantity,\n                brand: updatedTire.brand,\n                model: updatedTire.model,\n                size: updatedTire.size,\n            },\n        });\n        return this.formatSingleTireResponse(updatedTire, userRole);\n    }\n    async getLowStock(userRole) {\n        // Check if user has permission to view stock reports\n        if (!['STAFF', 'ADMIN'].includes(userRole)) {\n            throw new common_1.ForbiddenException('Insufficient permissions to view stock reports');\n        }\n        const lowStockTires = await this.tireRepository.findLowStock();\n        return this.formatTireResponse(lowStockTires, userRole);\n    }\n    async getInventoryReport(filters, userRole) {\n        // Only admin can view inventory reports\n        if (userRole !== 'ADMIN') {\n            throw new common_1.ForbiddenException('Only administrators can view inventory reports');\n        }\n        const dateFilters = {\n            startDate: filters?.startDate ? new Date(filters.startDate) : undefined,\n            endDate: filters?.endDate ? new Date(filters.endDate) : undefined,\n        };\n        const report = await this.tireRepository.getInventoryReport(dateFilters);\n        return {\n            ...report,\n            lowStockItems: this.formatTireResponse(report.lowStockItems, userRole),\n        };\n    }\n    formatTireResponse(tires, userRole) {\n        return tires.map((tire) => this.formatSingleTireResponse(tire, userRole));\n    }\n    formatSingleTireResponse(tire, userRole) {\n        const response = (0, class_transformer_1.plainToClass)(shared_dto_1.TireResponseDto, {\n            ...tire,\n            price: tire.price.toNumber(),\n            cost: tire.cost?.toNumber(),\n            isLowStock: tire.quantity <= tire.minStock,\n        });\n        // Hide cost from non-admin users\n        if (userRole !== 'ADMIN') {\n            delete response.cost;\n        }\n        return response;\n    }\n    // Helper methods for specific searches\n    async findByBrandAndModel(brand, model, userRole) {\n        const tires = await this.tireRepository.findByBrandAndModel(brand, model);\n        return this.formatTireResponse(tires, userRole);\n    }\n    async findBySizeAndType(size, type, userRole) {\n        const tires = await this.tireRepository.findBySizeAndType(size, type);\n        return this.formatTireResponse(tires, userRole);\n    }\n    // Utility method to check low stock alerts\n    async checkLowStockAlerts() {\n        const lowStockTires = await this.tireRepository.findLowStock();\n        return this.formatTireResponse(lowStockTires, 'admin');\n    }\n    // Get all unique brands\n    async getBrands(userRole) {\n        return this.tireRepository.getBrands();\n    }\n    // Get all models for a specific brand\n    async getModelsForBrand(brand, userRole) {\n        return this.tireRepository.getModelsForBrand(brand);\n    }\n    // Get all unique sizes\n    async getSizes(userRole) {\n        return this.tireRepository.getSizes();\n    }\n};\nexports.TiresService = TiresService;\nexports.TiresService = TiresService = tslib_1.__decorate([\n    (0, common_1.Injectable)(),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof tire_repository_1.TireRepository !== \"undefined\" && tire_repository_1.TireRepository) === \"function\" ? _a : Object, typeof (_b = typeof audit_repository_1.AuditRepository !== \"undefined\" && audit_repository_1.AuditRepository) === \"function\" ? _b : Object])\n], TiresService);\n","\"use strict\";\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TireRepository = void 0;\nconst tslib_1 = require(\"tslib\");\nconst common_1 = require(\"@nestjs/common\");\nconst database_1 = require(\"@gt-automotive/database\");\nconst base_repository_1 = require(\"../../common/repositories/base.repository\");\nlet TireRepository = class TireRepository extends base_repository_1.BaseRepository {\n    constructor(prisma) {\n        super(prisma, 'tire');\n    }\n    async findAll(filters) {\n        return this.prisma.tire.findMany({\n            where: this.buildWhereClause(filters),\n            orderBy: { updatedAt: 'desc' },\n        });\n    }\n    async findById(id) {\n        return this.prisma.tire.findUnique({\n            where: { id },\n        });\n    }\n    async create(data) {\n        return this.prisma.tire.create({\n            data,\n        });\n    }\n    async update(id, data) {\n        return this.prisma.tire.update({\n            where: { id },\n            data,\n        });\n    }\n    async delete(id) {\n        try {\n            await this.prisma.tire.delete({\n                where: { id },\n            });\n            return true;\n        }\n        catch (error) {\n            return false;\n        }\n    }\n    async search(params) {\n        const { filters, search, sortBy = 'updatedAt', sortOrder = 'desc', page = 1, limit = 20, } = params;\n        const skip = (page - 1) * limit;\n        const where = this.buildWhereClause(filters, search);\n        const [items, total] = await Promise.all([\n            this.prisma.tire.findMany({\n                where,\n                orderBy: { [sortBy]: sortOrder },\n                skip,\n                take: limit,\n            }),\n            this.prisma.tire.count({ where }),\n        ]);\n        return {\n            items,\n            total,\n            page,\n            limit,\n            hasMore: skip + limit < total,\n        };\n    }\n    async findLowStock() {\n        // Use raw SQL for complex comparison since Prisma doesn't support column comparisons directly\n        return this.prisma.$queryRaw `\n      SELECT * FROM \"Tire\" \n      WHERE quantity <= \"minStock\" OR quantity <= 0\n      ORDER BY quantity ASC\n    `;\n    }\n    async adjustStock(id, adjustment) {\n        return this.prisma.$transaction(async (prisma) => {\n            const tire = await prisma.tire.findUnique({\n                where: { id },\n            });\n            if (!tire) {\n                throw new Error('Tire not found');\n            }\n            let newQuantity;\n            switch (adjustment.type) {\n                case 'add':\n                    newQuantity = tire.quantity + adjustment.quantity;\n                    break;\n                case 'remove':\n                    newQuantity = Math.max(0, tire.quantity - adjustment.quantity);\n                    break;\n                case 'set':\n                    newQuantity = Math.max(0, adjustment.quantity);\n                    break;\n                default:\n                    throw new Error('Invalid adjustment type');\n            }\n            return prisma.tire.update({\n                where: { id },\n                data: { quantity: newQuantity },\n            });\n        });\n    }\n    async getInventoryReport(filters) {\n        const where = {};\n        if (filters?.startDate || filters?.endDate) {\n            where.updatedAt = {};\n            if (filters.startDate)\n                where.updatedAt.gte = filters.startDate;\n            if (filters.endDate)\n                where.updatedAt.lte = filters.endDate;\n        }\n        const [tires, lowStockItems, brandAggregation, typeAggregation,] = await Promise.all([\n            this.prisma.tire.findMany({ where }),\n            this.findLowStock(),\n            this.prisma.tire.groupBy({\n                by: ['brand'],\n                where,\n                _sum: {\n                    quantity: true,\n                },\n            }),\n            this.prisma.tire.groupBy({\n                by: ['type'],\n                where,\n                _sum: {\n                    quantity: true,\n                },\n            }),\n        ]);\n        const totalValue = tires.reduce((sum, tire) => sum + tire.price.toNumber() * tire.quantity, 0);\n        const totalCost = tires.reduce((sum, tire) => sum + (tire.cost?.toNumber() || 0) * tire.quantity, 0);\n        const totalItems = tires.reduce((sum, tire) => sum + tire.quantity, 0);\n        const byBrand = brandAggregation.reduce((acc, item) => {\n            acc[item.brand] = item._sum.quantity || 0;\n            return acc;\n        }, {});\n        const byType = typeAggregation.reduce((acc, item) => {\n            acc[item.type] = item._sum.quantity || 0;\n            return acc;\n        }, {});\n        return {\n            totalValue,\n            totalCost,\n            totalItems,\n            lowStockItems,\n            byBrand,\n            byType,\n        };\n    }\n    async findByBrandAndModel(brand, model) {\n        // Model field has been removed, search by brand only\n        return this.prisma.tire.findMany({\n            where: {\n                brand: {\n                    equals: brand,\n                    mode: 'insensitive',\n                },\n            },\n        });\n    }\n    async findBySizeAndType(size, type) {\n        const where = {\n            size: {\n                equals: size,\n                mode: 'insensitive',\n            },\n        };\n        if (type) {\n            where.type = type;\n        }\n        return this.prisma.tire.findMany({\n            where,\n            orderBy: [{ brand: 'asc' }, { size: 'asc' }],\n        });\n    }\n    buildWhereClause(filters, search) {\n        const where = {};\n        if (filters) {\n            if (filters.brand) {\n                where.brand = {\n                    contains: filters.brand,\n                    mode: 'insensitive',\n                };\n            }\n            if (filters.size) {\n                where.size = {\n                    contains: filters.size,\n                    mode: 'insensitive',\n                };\n            }\n            if (filters.type) {\n                where.type = filters.type;\n            }\n            if (filters.condition) {\n                where.condition = filters.condition;\n            }\n            if (filters.minPrice !== undefined || filters.maxPrice !== undefined) {\n                where.price = {};\n                if (filters.minPrice !== undefined) {\n                    where.price.gte = filters.minPrice;\n                }\n                if (filters.maxPrice !== undefined) {\n                    where.price.lte = filters.maxPrice;\n                }\n            }\n            if (filters.inStock) {\n                where.quantity = { gt: 0 };\n            }\n            if (filters.lowStock) {\n                // Note: For proper low stock filtering, we'll need to handle this in the service layer\n                // or use a separate method since Prisma doesn't support column comparisons directly\n                where.quantity = { lte: 5 }; // Default low stock threshold\n            }\n        }\n        if (search) {\n            where.OR = [\n                {\n                    brand: {\n                        contains: search,\n                        mode: 'insensitive',\n                    },\n                },\n                {\n                    size: {\n                        contains: search,\n                        mode: 'insensitive',\n                    },\n                },\n            ];\n        }\n        return where;\n    }\n    async getBrands() {\n        const result = await this.prisma.tire.findMany({\n            select: { brand: true },\n            distinct: ['brand'],\n            orderBy: { brand: 'asc' },\n        });\n        return result.map((tire) => tire.brand);\n    }\n    async getModelsForBrand(brand) {\n        // Model field has been removed, return empty array\n        return [];\n    }\n    async getSizes() {\n        const result = await this.prisma.tire.findMany({\n            select: { size: true },\n            distinct: ['size'],\n            orderBy: { size: 'asc' },\n        });\n        return result.map((tire) => tire.size);\n    }\n};\nexports.TireRepository = TireRepository;\nexports.TireRepository = TireRepository = tslib_1.__decorate([\n    (0, common_1.Injectable)(),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof database_1.PrismaService !== \"undefined\" && database_1.PrismaService) === \"function\" ? _a : Object])\n], TireRepository);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BaseRepository = void 0;\nclass BaseRepository {\n    constructor(prisma, modelName) {\n        this.prisma = prisma;\n        this.modelName = modelName;\n    }\n    async findAll(args) {\n        return this.prisma[this.modelName].findMany(args);\n    }\n    async findById(id) {\n        return this.prisma[this.modelName].findUnique({\n            where: { id },\n        });\n    }\n    async create(data) {\n        return this.prisma[this.modelName].create({\n            data,\n        });\n    }\n    async update(id, data) {\n        return this.prisma[this.modelName].update({\n            where: { id },\n            data,\n        });\n    }\n    async delete(id) {\n        await this.prisma[this.modelName].delete({\n            where: { id },\n        });\n        return true;\n    }\n}\nexports.BaseRepository = BaseRepository;\n","module.exports = require(\"@gt-automotive/shared-dto\");","module.exports = require(\"@prisma/client/runtime/library\");","module.exports = require(\"class-transformer\");","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CustomersModule = void 0;\nconst tslib_1 = require(\"tslib\");\nconst common_1 = require(\"@nestjs/common\");\nconst customers_service_1 = require(\"./customers.service\");\nconst customers_controller_1 = require(\"./customers.controller\");\nconst customer_repository_1 = require(\"./repositories/customer.repository\");\nconst user_repository_1 = require(\"../users/repositories/user.repository\");\nconst audit_repository_1 = require(\"../audit/repositories/audit.repository\");\nconst database_1 = require(\"@gt-automotive/database\");\nlet CustomersModule = class CustomersModule {\n};\nexports.CustomersModule = CustomersModule;\nexports.CustomersModule = CustomersModule = tslib_1.__decorate([\n    (0, common_1.Module)({\n        imports: [database_1.DatabaseModule],\n        controllers: [customers_controller_1.CustomersController],\n        providers: [\n            customers_service_1.CustomersService,\n            customer_repository_1.CustomerRepository,\n            user_repository_1.UserRepository,\n            audit_repository_1.AuditRepository,\n        ],\n        exports: [customers_service_1.CustomersService, customer_repository_1.CustomerRepository],\n    })\n], CustomersModule);\n","\"use strict\";\nvar _a, _b, _c;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CustomersService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst common_1 = require(\"@nestjs/common\");\nconst customer_repository_1 = require(\"./repositories/customer.repository\");\nconst audit_repository_1 = require(\"../audit/repositories/audit.repository\");\nconst database_1 = require(\"@gt-automotive/database\");\nlet CustomersService = class CustomersService {\n    constructor(customerRepository, auditRepository, prisma) {\n        this.customerRepository = customerRepository;\n        this.auditRepository = auditRepository;\n        this.prisma = prisma;\n    }\n    async create(createCustomerDto, createdBy) {\n        // Check for existing customer with same email if provided\n        if (createCustomerDto.email) {\n            const existingCustomer = await this.customerRepository.findByEmail(createCustomerDto.email);\n            if (existingCustomer) {\n                throw new common_1.BadRequestException('A customer with this email already exists');\n            }\n        }\n        // Create customer directly without user account\n        const customer = await this.prisma.customer.create({\n            data: {\n                firstName: createCustomerDto.firstName,\n                lastName: createCustomerDto.lastName,\n                email: createCustomerDto.email,\n                phone: createCustomerDto.phone,\n                address: createCustomerDto.address,\n                businessName: createCustomerDto.businessName,\n            },\n        });\n        // Log the action\n        await this.auditRepository.create({\n            userId: createdBy,\n            action: 'CREATE_CUSTOMER',\n            entityType: 'customer',\n            entityId: customer.id,\n            details: customer,\n        });\n        return customer;\n    }\n    async findAll(userId, userRole) {\n        // Only staff and admin can see all customers\n        return this.customerRepository.findAllWithDetails();\n    }\n    async findOne(id, userId, userRole) {\n        const customer = await this.customerRepository.findOneWithDetails(id);\n        if (!customer) {\n            throw new common_1.NotFoundException(`Customer with ID ${id} not found`);\n        }\n        // Get customer statistics\n        const stats = await this.customerRepository.getCustomerStats(id);\n        return {\n            ...customer,\n            stats,\n        };\n    }\n    async update(id, updateCustomerDto, userId, userRole) {\n        const customer = await this.customerRepository.findById(id);\n        if (!customer) {\n            throw new common_1.NotFoundException(`Customer with ID ${id} not found`);\n        }\n        // Update customer data directly\n        const updatedCustomer = await this.prisma.customer.update({\n            where: { id },\n            data: {\n                ...(updateCustomerDto.firstName && { firstName: updateCustomerDto.firstName }),\n                ...(updateCustomerDto.lastName && { lastName: updateCustomerDto.lastName }),\n                ...(updateCustomerDto.email !== undefined && { email: updateCustomerDto.email }),\n                ...(updateCustomerDto.phone !== undefined && { phone: updateCustomerDto.phone }),\n                ...(updateCustomerDto.address !== undefined && { address: updateCustomerDto.address }),\n                ...(updateCustomerDto.businessName !== undefined && { businessName: updateCustomerDto.businessName }),\n            },\n            include: {\n                vehicles: true,\n            },\n        });\n        // Log the action\n        await this.auditRepository.create({\n            userId,\n            action: 'UPDATE_CUSTOMER',\n            entityType: 'customer',\n            entityId: id,\n            details: { old: customer, new: updatedCustomer },\n        });\n        return updatedCustomer;\n    }\n    async remove(id, userId) {\n        const customer = await this.customerRepository.findById(id);\n        if (!customer) {\n            throw new common_1.NotFoundException(`Customer with ID ${id} not found`);\n        }\n        // Check for existing invoices or appointments\n        const hasInvoices = await this.prisma.invoice.count({\n            where: { customerId: id },\n        });\n        const hasAppointments = await this.prisma.appointment.count({\n            where: { customerId: id },\n        });\n        if (hasInvoices > 0 || hasAppointments > 0) {\n            throw new common_1.BadRequestException('Cannot delete customer with existing invoices or appointments.');\n        }\n        // Delete customer (vehicles will be cascade deleted)\n        await this.prisma.customer.delete({\n            where: { id },\n        });\n        // Log the action\n        await this.auditRepository.create({\n            userId,\n            action: 'DELETE_CUSTOMER',\n            entityType: 'customer',\n            entityId: id,\n            details: customer,\n        });\n        return { message: 'Customer deleted successfully' };\n    }\n    async search(searchTerm, userId, userRole) {\n        return this.customerRepository.search(searchTerm);\n    }\n};\nexports.CustomersService = CustomersService;\nexports.CustomersService = CustomersService = tslib_1.__decorate([\n    (0, common_1.Injectable)(),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof customer_repository_1.CustomerRepository !== \"undefined\" && customer_repository_1.CustomerRepository) === \"function\" ? _a : Object, typeof (_b = typeof audit_repository_1.AuditRepository !== \"undefined\" && audit_repository_1.AuditRepository) === \"function\" ? _b : Object, typeof (_c = typeof database_1.PrismaService !== \"undefined\" && database_1.PrismaService) === \"function\" ? _c : Object])\n], CustomersService);\n","\"use strict\";\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CustomerRepository = void 0;\nconst tslib_1 = require(\"tslib\");\nconst common_1 = require(\"@nestjs/common\");\nconst database_1 = require(\"@gt-automotive/database\");\nconst base_repository_1 = require(\"../../common/repositories/base.repository\");\nlet CustomerRepository = class CustomerRepository extends base_repository_1.BaseRepository {\n    constructor(prisma) {\n        super(prisma, 'customer');\n    }\n    async findByEmail(email) {\n        return this.prisma.customer.findFirst({\n            where: { email },\n            include: {\n                vehicles: true,\n                _count: {\n                    select: {\n                        invoices: true,\n                        appointments: true,\n                    },\n                },\n            },\n        });\n    }\n    async findAllWithDetails() {\n        return this.prisma.customer.findMany({\n            include: {\n                vehicles: true,\n                _count: {\n                    select: {\n                        invoices: true,\n                        appointments: true,\n                        vehicles: true,\n                    },\n                },\n            },\n            orderBy: {\n                createdAt: 'desc',\n            },\n        });\n    }\n    async findOneWithDetails(id) {\n        return this.prisma.customer.findUnique({\n            where: { id },\n            include: {\n                vehicles: {\n                    orderBy: {\n                        createdAt: 'desc',\n                    },\n                },\n                invoices: {\n                    take: 10,\n                    orderBy: {\n                        createdAt: 'desc',\n                    },\n                    include: {\n                        vehicle: true,\n                        items: true,\n                    },\n                },\n                appointments: {\n                    take: 10,\n                    orderBy: {\n                        scheduledDate: 'desc',\n                    },\n                    include: {\n                        vehicle: true,\n                    },\n                },\n            },\n        });\n    }\n    async search(searchTerm) {\n        return this.prisma.customer.findMany({\n            where: {\n                OR: [\n                    { firstName: { contains: searchTerm, mode: 'insensitive' } },\n                    { lastName: { contains: searchTerm, mode: 'insensitive' } },\n                    { email: { contains: searchTerm, mode: 'insensitive' } },\n                    { phone: { contains: searchTerm, mode: 'insensitive' } },\n                    { address: { contains: searchTerm, mode: 'insensitive' } },\n                    { businessName: { contains: searchTerm, mode: 'insensitive' } },\n                ],\n            },\n            include: {\n                vehicles: true,\n                _count: {\n                    select: {\n                        invoices: true,\n                        appointments: true,\n                        vehicles: true,\n                    },\n                },\n            },\n            orderBy: {\n                createdAt: 'desc',\n            },\n        });\n    }\n    async getCustomerStats(customerId) {\n        const [totalSpent, vehicleCount, appointmentCount, lastVisit] = await Promise.all([\n            // Total amount spent\n            this.prisma.invoice.aggregate({\n                where: {\n                    customerId,\n                    status: 'PAID',\n                },\n                _sum: {\n                    total: true,\n                },\n            }),\n            // Number of vehicles\n            this.prisma.vehicle.count({\n                where: { customerId },\n            }),\n            // Number of appointments\n            this.prisma.appointment.count({\n                where: { customerId },\n            }),\n            // Last visit date\n            this.prisma.invoice.findFirst({\n                where: { customerId },\n                orderBy: { createdAt: 'desc' },\n                select: { createdAt: true },\n            }),\n        ]);\n        return {\n            totalSpent: totalSpent._sum.total || 0,\n            vehicleCount,\n            appointmentCount,\n            lastVisitDate: lastVisit?.createdAt || null,\n        };\n    }\n    async findById(id) {\n        return this.prisma.customer.findUnique({\n            where: { id },\n        });\n    }\n};\nexports.CustomerRepository = CustomerRepository;\nexports.CustomerRepository = CustomerRepository = tslib_1.__decorate([\n    (0, common_1.Injectable)(),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof database_1.PrismaService !== \"undefined\" && database_1.PrismaService) === \"function\" ? _a : Object])\n], CustomerRepository);\n","\"use strict\";\nvar _a, _b, _c;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CustomersController = void 0;\nconst tslib_1 = require(\"tslib\");\nconst common_1 = require(\"@nestjs/common\");\nconst customers_service_1 = require(\"./customers.service\");\nconst create_customer_dto_1 = require(\"./dto/create-customer.dto\");\nconst update_customer_dto_1 = require(\"./dto/update-customer.dto\");\nconst jwt_auth_guard_1 = require(\"../auth/guards/jwt-auth.guard\");\nconst role_guard_1 = require(\"../auth/guards/role.guard\");\nconst roles_decorator_1 = require(\"../auth/decorators/roles.decorator\");\nconst current_user_decorator_1 = require(\"../auth/decorators/current-user.decorator\");\nlet CustomersController = class CustomersController {\n    constructor(customersService) {\n        this.customersService = customersService;\n    }\n    create(createCustomerDto, user) {\n        return this.customersService.create(createCustomerDto, user.id);\n    }\n    findAll(user) {\n        return this.customersService.findAll(user.id, user.role.name);\n    }\n    search(searchTerm, user) {\n        return this.customersService.search(searchTerm, user.id, user.role.name);\n    }\n    findOne(id, user) {\n        return this.customersService.findOne(id, user.id, user.role.name);\n    }\n    update(id, updateCustomerDto, user) {\n        return this.customersService.update(id, updateCustomerDto, user.id, user.role.name);\n    }\n    remove(id, user) {\n        return this.customersService.remove(id, user.id);\n    }\n};\nexports.CustomersController = CustomersController;\ntslib_1.__decorate([\n    (0, common_1.Post)(),\n    (0, common_1.UseGuards)(role_guard_1.RoleGuard),\n    (0, roles_decorator_1.Roles)('STAFF', 'ADMIN'),\n    tslib_1.__param(0, (0, common_1.Body)()),\n    tslib_1.__param(1, (0, current_user_decorator_1.CurrentUser)()),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_b = typeof create_customer_dto_1.CreateCustomerDto !== \"undefined\" && create_customer_dto_1.CreateCustomerDto) === \"function\" ? _b : Object, Object]),\n    tslib_1.__metadata(\"design:returntype\", void 0)\n], CustomersController.prototype, \"create\", null);\ntslib_1.__decorate([\n    (0, common_1.Get)(),\n    tslib_1.__param(0, (0, current_user_decorator_1.CurrentUser)()),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [Object]),\n    tslib_1.__metadata(\"design:returntype\", void 0)\n], CustomersController.prototype, \"findAll\", null);\ntslib_1.__decorate([\n    (0, common_1.Get)('search'),\n    (0, common_1.UseGuards)(role_guard_1.RoleGuard),\n    (0, roles_decorator_1.Roles)('STAFF', 'ADMIN'),\n    tslib_1.__param(0, (0, common_1.Query)('q')),\n    tslib_1.__param(1, (0, current_user_decorator_1.CurrentUser)()),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [String, Object]),\n    tslib_1.__metadata(\"design:returntype\", void 0)\n], CustomersController.prototype, \"search\", null);\ntslib_1.__decorate([\n    (0, common_1.Get)(':id'),\n    tslib_1.__param(0, (0, common_1.Param)('id')),\n    tslib_1.__param(1, (0, current_user_decorator_1.CurrentUser)()),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [String, Object]),\n    tslib_1.__metadata(\"design:returntype\", void 0)\n], CustomersController.prototype, \"findOne\", null);\ntslib_1.__decorate([\n    (0, common_1.Patch)(':id'),\n    tslib_1.__param(0, (0, common_1.Param)('id')),\n    tslib_1.__param(1, (0, common_1.Body)()),\n    tslib_1.__param(2, (0, current_user_decorator_1.CurrentUser)()),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [String, typeof (_c = typeof update_customer_dto_1.UpdateCustomerDto !== \"undefined\" && update_customer_dto_1.UpdateCustomerDto) === \"function\" ? _c : Object, Object]),\n    tslib_1.__metadata(\"design:returntype\", void 0)\n], CustomersController.prototype, \"update\", null);\ntslib_1.__decorate([\n    (0, common_1.Delete)(':id'),\n    (0, common_1.UseGuards)(role_guard_1.RoleGuard),\n    (0, roles_decorator_1.Roles)('ADMIN'),\n    tslib_1.__param(0, (0, common_1.Param)('id')),\n    tslib_1.__param(1, (0, current_user_decorator_1.CurrentUser)()),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [String, Object]),\n    tslib_1.__metadata(\"design:returntype\", void 0)\n], CustomersController.prototype, \"remove\", null);\nexports.CustomersController = CustomersController = tslib_1.__decorate([\n    (0, common_1.Controller)('api/customers'),\n    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof customers_service_1.CustomersService !== \"undefined\" && customers_service_1.CustomersService) === \"function\" ? _a : Object])\n], CustomersController);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CreateCustomerDto = void 0;\nconst tslib_1 = require(\"tslib\");\nconst class_validator_1 = require(\"class-validator\");\nclass CreateCustomerDto {\n}\nexports.CreateCustomerDto = CreateCustomerDto;\ntslib_1.__decorate([\n    (0, class_validator_1.ValidateIf)((o) => o.email !== '' && o.email != null),\n    (0, class_validator_1.IsEmail)({}, { message: 'Please enter a valid email address' }),\n    tslib_1.__metadata(\"design:type\", String)\n], CreateCustomerDto.prototype, \"email\", void 0);\ntslib_1.__decorate([\n    (0, class_validator_1.IsString)(),\n    (0, class_validator_1.IsNotEmpty)(),\n    tslib_1.__metadata(\"design:type\", String)\n], CreateCustomerDto.prototype, \"firstName\", void 0);\ntslib_1.__decorate([\n    (0, class_validator_1.IsString)(),\n    (0, class_validator_1.IsNotEmpty)(),\n    tslib_1.__metadata(\"design:type\", String)\n], CreateCustomerDto.prototype, \"lastName\", void 0);\ntslib_1.__decorate([\n    (0, class_validator_1.IsString)(),\n    (0, class_validator_1.IsOptional)(),\n    tslib_1.__metadata(\"design:type\", String)\n], CreateCustomerDto.prototype, \"phone\", void 0);\ntslib_1.__decorate([\n    (0, class_validator_1.IsString)(),\n    (0, class_validator_1.IsOptional)(),\n    tslib_1.__metadata(\"design:type\", String)\n], CreateCustomerDto.prototype, \"address\", void 0);\ntslib_1.__decorate([\n    (0, class_validator_1.IsString)(),\n    (0, class_validator_1.IsOptional)(),\n    tslib_1.__metadata(\"design:type\", String)\n], CreateCustomerDto.prototype, \"businessName\", void 0);\n","module.exports = require(\"class-validator\");","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UpdateCustomerDto = void 0;\nconst mapped_types_1 = require(\"@nestjs/mapped-types\");\nconst create_customer_dto_1 = require(\"./create-customer.dto\");\nclass UpdateCustomerDto extends (0, mapped_types_1.PartialType)(create_customer_dto_1.CreateCustomerDto) {\n}\nexports.UpdateCustomerDto = UpdateCustomerDto;\n","module.exports = require(\"@nestjs/mapped-types\");","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.VehiclesModule = void 0;\nconst tslib_1 = require(\"tslib\");\nconst common_1 = require(\"@nestjs/common\");\nconst vehicles_service_1 = require(\"./vehicles.service\");\nconst vehicles_controller_1 = require(\"./vehicles.controller\");\nconst vehicle_repository_1 = require(\"./repositories/vehicle.repository\");\nconst customer_repository_1 = require(\"../customers/repositories/customer.repository\");\nconst audit_repository_1 = require(\"../audit/repositories/audit.repository\");\nconst database_1 = require(\"@gt-automotive/database\");\nlet VehiclesModule = class VehiclesModule {\n};\nexports.VehiclesModule = VehiclesModule;\nexports.VehiclesModule = VehiclesModule = tslib_1.__decorate([\n    (0, common_1.Module)({\n        imports: [database_1.DatabaseModule],\n        controllers: [vehicles_controller_1.VehiclesController],\n        providers: [\n            vehicles_service_1.VehiclesService,\n            vehicle_repository_1.VehicleRepository,\n            customer_repository_1.CustomerRepository,\n            audit_repository_1.AuditRepository,\n        ],\n        exports: [vehicles_service_1.VehiclesService, vehicle_repository_1.VehicleRepository],\n    })\n], VehiclesModule);\n","\"use strict\";\nvar _a, _b, _c;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.VehiclesService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst common_1 = require(\"@nestjs/common\");\nconst vehicle_repository_1 = require(\"./repositories/vehicle.repository\");\nconst customer_repository_1 = require(\"../customers/repositories/customer.repository\");\nconst audit_repository_1 = require(\"../audit/repositories/audit.repository\");\nlet VehiclesService = class VehiclesService {\n    constructor(vehicleRepository, customerRepository, auditRepository) {\n        this.vehicleRepository = vehicleRepository;\n        this.customerRepository = customerRepository;\n        this.auditRepository = auditRepository;\n    }\n    async create(createVehicleDto, userId, userRole) {\n        // Verify customer exists\n        const customer = await this.customerRepository.findById(createVehicleDto.customerId);\n        if (!customer) {\n            throw new common_1.NotFoundException('Customer not found');\n        }\n        // Customers can only add vehicles to their own profile\n        if (userRole === 'customer' && customer.userId !== userId) {\n            throw new common_1.ForbiddenException('You can only add vehicles to your own profile');\n        }\n        // Check for duplicate VIN if provided\n        if (createVehicleDto.vin) {\n            const existingVehicle = await this.vehicleRepository.findByVin(createVehicleDto.vin);\n            if (existingVehicle) {\n                throw new common_1.BadRequestException('A vehicle with this VIN already exists');\n            }\n        }\n        const vehicle = await this.vehicleRepository.create({\n            customer: { connect: { id: createVehicleDto.customerId } },\n            make: createVehicleDto.make,\n            model: createVehicleDto.model,\n            year: createVehicleDto.year,\n            vin: createVehicleDto.vin,\n            licensePlate: createVehicleDto.licensePlate,\n            mileage: createVehicleDto.mileage,\n        });\n        // Log the action\n        await this.auditRepository.create({\n            userId,\n            action: 'CREATE_VEHICLE',\n            resource: 'vehicle',\n            resourceId: vehicle.id,\n            newValue: vehicle,\n        });\n        return this.vehicleRepository.findOneWithDetails(vehicle.id);\n    }\n    async findAll(userId, userRole) {\n        // Customers can only see their own vehicles\n        if (userRole === 'customer') {\n            const customer = await this.customerRepository.findByUserId(userId);\n            if (!customer) {\n                return [];\n            }\n            return this.vehicleRepository.findByCustomer(customer.id);\n        }\n        // Staff and admin can see all vehicles\n        return this.vehicleRepository.findAllWithDetails();\n    }\n    async findByCustomer(customerId, userId, userRole) {\n        const customer = await this.customerRepository.findById(customerId);\n        if (!customer) {\n            throw new common_1.NotFoundException('Customer not found');\n        }\n        // Customers can only see their own vehicles\n        if (userRole === 'customer' && customer.userId !== userId) {\n            throw new common_1.ForbiddenException('You can only view your own vehicles');\n        }\n        return this.vehicleRepository.findByCustomer(customerId);\n    }\n    async findOne(id, userId, userRole) {\n        const vehicle = await this.vehicleRepository.findOneWithDetails(id);\n        if (!vehicle) {\n            throw new common_1.NotFoundException(`Vehicle with ID ${id} not found`);\n        }\n        // Customers can only see their own vehicles\n        if (userRole === 'customer') {\n            const customer = await this.customerRepository.findByUserId(userId);\n            if (!customer || vehicle.customerId !== customer.id) {\n                throw new common_1.ForbiddenException('You can only view your own vehicles');\n            }\n        }\n        // Get vehicle statistics\n        const stats = await this.vehicleRepository.getVehicleStats(id);\n        return {\n            ...vehicle,\n            stats,\n        };\n    }\n    async update(id, updateVehicleDto, userId, userRole) {\n        const vehicle = await this.vehicleRepository.findOne({ id });\n        if (!vehicle) {\n            throw new common_1.NotFoundException(`Vehicle with ID ${id} not found`);\n        }\n        // Customers can only update their own vehicles\n        if (userRole === 'customer') {\n            const customer = await this.customerRepository.findByUserId(userId);\n            if (!customer || vehicle.customerId !== customer.id) {\n                throw new common_1.ForbiddenException('You can only update your own vehicles');\n            }\n        }\n        // Check for duplicate VIN if updating\n        if (updateVehicleDto.vin && updateVehicleDto.vin !== vehicle.vin) {\n            const existingVehicle = await this.vehicleRepository.findByVin(updateVehicleDto.vin);\n            if (existingVehicle) {\n                throw new common_1.BadRequestException('A vehicle with this VIN already exists');\n            }\n        }\n        const updatedVehicle = await this.vehicleRepository.update({ id }, {\n            ...(updateVehicleDto.make && { make: updateVehicleDto.make }),\n            ...(updateVehicleDto.model && { model: updateVehicleDto.model }),\n            ...(updateVehicleDto.year && { year: updateVehicleDto.year }),\n            ...(updateVehicleDto.vin !== undefined && { vin: updateVehicleDto.vin }),\n            ...(updateVehicleDto.licensePlate !== undefined && { licensePlate: updateVehicleDto.licensePlate }),\n            ...(updateVehicleDto.mileage !== undefined && { mileage: updateVehicleDto.mileage }),\n        });\n        // Log the action if not a self-update\n        if (userRole !== 'customer') {\n            await this.auditRepository.create({\n                userId,\n                action: 'UPDATE_VEHICLE',\n                resource: 'vehicle',\n                resourceId: id,\n                oldValue: vehicle,\n                newValue: updatedVehicle,\n            });\n        }\n        return this.vehicleRepository.findOneWithDetails(id);\n    }\n    async remove(id, userId, userRole) {\n        const vehicle = await this.vehicleRepository.findOne({ id });\n        if (!vehicle) {\n            throw new common_1.NotFoundException(`Vehicle with ID ${id} not found`);\n        }\n        // Only admin can delete vehicles, or customers can delete their own\n        if (userRole === 'customer') {\n            const customer = await this.customerRepository.findByUserId(userId);\n            if (!customer || vehicle.customerId !== customer.id) {\n                throw new common_1.ForbiddenException('You can only delete your own vehicles');\n            }\n        }\n        else if (userRole !== 'admin') {\n            throw new common_1.ForbiddenException('Only administrators can delete vehicles');\n        }\n        // Check for existing invoices or appointments\n        const hasInvoices = await this.vehicleRepository.prisma.invoice.count({\n            where: { vehicleId: id },\n        });\n        const hasAppointments = await this.vehicleRepository.prisma.appointment.count({\n            where: { vehicleId: id },\n        });\n        if (hasInvoices > 0 || hasAppointments > 0) {\n            throw new common_1.BadRequestException('Cannot delete vehicle with existing service history. Please contact an administrator.');\n        }\n        await this.vehicleRepository.delete({ id });\n        // Log the action\n        await this.auditRepository.create({\n            userId,\n            action: 'DELETE_VEHICLE',\n            resource: 'vehicle',\n            resourceId: id,\n            oldValue: vehicle,\n        });\n        return { message: 'Vehicle deleted successfully' };\n    }\n    async search(searchTerm, userId, userRole) {\n        const vehicles = await this.vehicleRepository.search(searchTerm);\n        // Filter results for customers\n        if (userRole === 'customer') {\n            const customer = await this.customerRepository.findByUserId(userId);\n            if (!customer) {\n                return [];\n            }\n            return vehicles.filter(v => v.customerId === customer.id);\n        }\n        return vehicles;\n    }\n    async updateMileage(id, mileage, userId, userRole) {\n        const vehicle = await this.vehicleRepository.findOne({ id });\n        if (!vehicle) {\n            throw new common_1.NotFoundException(`Vehicle with ID ${id} not found`);\n        }\n        // Validate mileage (cannot decrease)\n        if (vehicle.mileage && mileage < vehicle.mileage) {\n            throw new common_1.BadRequestException('Mileage cannot be decreased');\n        }\n        // Customers can only update their own vehicles\n        if (userRole === 'customer') {\n            const customer = await this.customerRepository.findByUserId(userId);\n            if (!customer || vehicle.customerId !== customer.id) {\n                throw new common_1.ForbiddenException('You can only update your own vehicles');\n            }\n        }\n        const updatedVehicle = await this.vehicleRepository.update({ id }, { mileage });\n        // Log the action\n        await this.auditRepository.create({\n            userId,\n            action: 'UPDATE_VEHICLE_MILEAGE',\n            resource: 'vehicle',\n            resourceId: id,\n            oldValue: { mileage: vehicle.mileage },\n            newValue: { mileage },\n        });\n        return updatedVehicle;\n    }\n};\nexports.VehiclesService = VehiclesService;\nexports.VehiclesService = VehiclesService = tslib_1.__decorate([\n    (0, common_1.Injectable)(),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof vehicle_repository_1.VehicleRepository !== \"undefined\" && vehicle_repository_1.VehicleRepository) === \"function\" ? _a : Object, typeof (_b = typeof customer_repository_1.CustomerRepository !== \"undefined\" && customer_repository_1.CustomerRepository) === \"function\" ? _b : Object, typeof (_c = typeof audit_repository_1.AuditRepository !== \"undefined\" && audit_repository_1.AuditRepository) === \"function\" ? _c : Object])\n], VehiclesService);\n","\"use strict\";\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.VehicleRepository = void 0;\nconst tslib_1 = require(\"tslib\");\nconst common_1 = require(\"@nestjs/common\");\nconst database_1 = require(\"@gt-automotive/database\");\nconst base_repository_1 = require(\"../../common/repositories/base.repository\");\nlet VehicleRepository = class VehicleRepository extends base_repository_1.BaseRepository {\n    constructor(prisma) {\n        super(prisma, 'vehicle');\n    }\n    async findAllWithDetails() {\n        return this.prisma.vehicle.findMany({\n            include: {\n                customer: {\n                    include: {\n                        user: true,\n                    },\n                },\n                _count: {\n                    select: {\n                        invoices: true,\n                        appointments: true,\n                    },\n                },\n            },\n            orderBy: {\n                createdAt: 'desc',\n            },\n        });\n    }\n    async findByCustomer(customerId) {\n        return this.prisma.vehicle.findMany({\n            where: { customerId },\n            include: {\n                _count: {\n                    select: {\n                        invoices: true,\n                        appointments: true,\n                    },\n                },\n            },\n            orderBy: {\n                createdAt: 'desc',\n            },\n        });\n    }\n    async findOneWithDetails(id) {\n        return this.prisma.vehicle.findUnique({\n            where: { id },\n            include: {\n                customer: {\n                    include: {\n                        user: true,\n                    },\n                },\n                invoices: {\n                    take: 10,\n                    orderBy: {\n                        createdAt: 'desc',\n                    },\n                    include: {\n                        items: true,\n                    },\n                },\n                appointments: {\n                    take: 10,\n                    orderBy: {\n                        scheduledDate: 'desc',\n                    },\n                },\n            },\n        });\n    }\n    async findByVin(vin) {\n        return this.prisma.vehicle.findUnique({\n            where: { vin },\n            include: {\n                customer: {\n                    include: {\n                        user: true,\n                    },\n                },\n            },\n        });\n    }\n    async search(searchTerm) {\n        return this.prisma.vehicle.findMany({\n            where: {\n                OR: [\n                    { make: { contains: searchTerm, mode: 'insensitive' } },\n                    { model: { contains: searchTerm, mode: 'insensitive' } },\n                    { vin: { contains: searchTerm, mode: 'insensitive' } },\n                    { licensePlate: { contains: searchTerm, mode: 'insensitive' } },\n                ],\n            },\n            include: {\n                customer: {\n                    include: {\n                        user: true,\n                    },\n                },\n                _count: {\n                    select: {\n                        invoices: true,\n                        appointments: true,\n                    },\n                },\n            },\n            orderBy: {\n                createdAt: 'desc',\n            },\n        });\n    }\n    async getVehicleStats(vehicleId) {\n        const [serviceCount, totalSpent, lastService, nextAppointment] = await Promise.all([\n            // Number of services\n            this.prisma.invoice.count({\n                where: { vehicleId },\n            }),\n            // Total amount spent on this vehicle\n            this.prisma.invoice.aggregate({\n                where: {\n                    vehicleId,\n                    status: 'PAID',\n                },\n                _sum: {\n                    total: true,\n                },\n            }),\n            // Last service date\n            this.prisma.invoice.findFirst({\n                where: { vehicleId },\n                orderBy: { createdAt: 'desc' },\n                select: { createdAt: true },\n            }),\n            // Next scheduled appointment\n            this.prisma.appointment.findFirst({\n                where: {\n                    vehicleId,\n                    status: { in: ['SCHEDULED', 'CONFIRMED'] },\n                    scheduledDate: { gte: new Date() },\n                },\n                orderBy: { scheduledDate: 'asc' },\n                select: {\n                    scheduledDate: true,\n                    scheduledTime: true,\n                    serviceType: true,\n                },\n            }),\n        ]);\n        return {\n            serviceCount,\n            totalSpent: totalSpent._sum.total || 0,\n            lastServiceDate: lastService?.createdAt || null,\n            nextAppointment,\n        };\n    }\n};\nexports.VehicleRepository = VehicleRepository;\nexports.VehicleRepository = VehicleRepository = tslib_1.__decorate([\n    (0, common_1.Injectable)(),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof database_1.PrismaService !== \"undefined\" && database_1.PrismaService) === \"function\" ? _a : Object])\n], VehicleRepository);\n","\"use strict\";\nvar _a, _b, _c;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.VehiclesController = void 0;\nconst tslib_1 = require(\"tslib\");\nconst common_1 = require(\"@nestjs/common\");\nconst vehicles_service_1 = require(\"./vehicles.service\");\nconst create_vehicle_dto_1 = require(\"./dto/create-vehicle.dto\");\nconst update_vehicle_dto_1 = require(\"./dto/update-vehicle.dto\");\nconst jwt_auth_guard_1 = require(\"../auth/guards/jwt-auth.guard\");\nconst current_user_decorator_1 = require(\"../auth/decorators/current-user.decorator\");\nlet VehiclesController = class VehiclesController {\n    constructor(vehiclesService) {\n        this.vehiclesService = vehiclesService;\n    }\n    create(createVehicleDto, user) {\n        return this.vehiclesService.create(createVehicleDto, user.id, user.role.name);\n    }\n    findAll(user) {\n        return this.vehiclesService.findAll(user.id, user.role.name);\n    }\n    search(searchTerm, user) {\n        return this.vehiclesService.search(searchTerm, user.id, user.role.name);\n    }\n    findByCustomer(customerId, user) {\n        return this.vehiclesService.findByCustomer(customerId, user.id, user.role.name);\n    }\n    findOne(id, user) {\n        return this.vehiclesService.findOne(id, user.id, user.role.name);\n    }\n    update(id, updateVehicleDto, user) {\n        return this.vehiclesService.update(id, updateVehicleDto, user.id, user.role.name);\n    }\n    updateMileage(id, mileage, user) {\n        return this.vehiclesService.updateMileage(id, mileage, user.id, user.role.name);\n    }\n    remove(id, user) {\n        return this.vehiclesService.remove(id, user.id, user.role.name);\n    }\n};\nexports.VehiclesController = VehiclesController;\ntslib_1.__decorate([\n    (0, common_1.Post)(),\n    tslib_1.__param(0, (0, common_1.Body)()),\n    tslib_1.__param(1, (0, current_user_decorator_1.CurrentUser)()),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_b = typeof create_vehicle_dto_1.CreateVehicleDto !== \"undefined\" && create_vehicle_dto_1.CreateVehicleDto) === \"function\" ? _b : Object, Object]),\n    tslib_1.__metadata(\"design:returntype\", void 0)\n], VehiclesController.prototype, \"create\", null);\ntslib_1.__decorate([\n    (0, common_1.Get)(),\n    tslib_1.__param(0, (0, current_user_decorator_1.CurrentUser)()),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [Object]),\n    tslib_1.__metadata(\"design:returntype\", void 0)\n], VehiclesController.prototype, \"findAll\", null);\ntslib_1.__decorate([\n    (0, common_1.Get)('search'),\n    tslib_1.__param(0, (0, common_1.Query)('q')),\n    tslib_1.__param(1, (0, current_user_decorator_1.CurrentUser)()),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [String, Object]),\n    tslib_1.__metadata(\"design:returntype\", void 0)\n], VehiclesController.prototype, \"search\", null);\ntslib_1.__decorate([\n    (0, common_1.Get)('customer/:customerId'),\n    tslib_1.__param(0, (0, common_1.Param)('customerId')),\n    tslib_1.__param(1, (0, current_user_decorator_1.CurrentUser)()),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [String, Object]),\n    tslib_1.__metadata(\"design:returntype\", void 0)\n], VehiclesController.prototype, \"findByCustomer\", null);\ntslib_1.__decorate([\n    (0, common_1.Get)(':id'),\n    tslib_1.__param(0, (0, common_1.Param)('id')),\n    tslib_1.__param(1, (0, current_user_decorator_1.CurrentUser)()),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [String, Object]),\n    tslib_1.__metadata(\"design:returntype\", void 0)\n], VehiclesController.prototype, \"findOne\", null);\ntslib_1.__decorate([\n    (0, common_1.Patch)(':id'),\n    tslib_1.__param(0, (0, common_1.Param)('id')),\n    tslib_1.__param(1, (0, common_1.Body)()),\n    tslib_1.__param(2, (0, current_user_decorator_1.CurrentUser)()),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [String, typeof (_c = typeof update_vehicle_dto_1.UpdateVehicleDto !== \"undefined\" && update_vehicle_dto_1.UpdateVehicleDto) === \"function\" ? _c : Object, Object]),\n    tslib_1.__metadata(\"design:returntype\", void 0)\n], VehiclesController.prototype, \"update\", null);\ntslib_1.__decorate([\n    (0, common_1.Patch)(':id/mileage'),\n    tslib_1.__param(0, (0, common_1.Param)('id')),\n    tslib_1.__param(1, (0, common_1.Body)('mileage')),\n    tslib_1.__param(2, (0, current_user_decorator_1.CurrentUser)()),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [String, Number, Object]),\n    tslib_1.__metadata(\"design:returntype\", void 0)\n], VehiclesController.prototype, \"updateMileage\", null);\ntslib_1.__decorate([\n    (0, common_1.Delete)(':id'),\n    tslib_1.__param(0, (0, common_1.Param)('id')),\n    tslib_1.__param(1, (0, current_user_decorator_1.CurrentUser)()),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [String, Object]),\n    tslib_1.__metadata(\"design:returntype\", void 0)\n], VehiclesController.prototype, \"remove\", null);\nexports.VehiclesController = VehiclesController = tslib_1.__decorate([\n    (0, common_1.Controller)('api/vehicles'),\n    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof vehicles_service_1.VehiclesService !== \"undefined\" && vehicles_service_1.VehiclesService) === \"function\" ? _a : Object])\n], VehiclesController);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CreateVehicleDto = void 0;\nconst tslib_1 = require(\"tslib\");\nconst class_validator_1 = require(\"class-validator\");\nclass CreateVehicleDto {\n}\nexports.CreateVehicleDto = CreateVehicleDto;\ntslib_1.__decorate([\n    (0, class_validator_1.IsString)(),\n    (0, class_validator_1.IsNotEmpty)(),\n    tslib_1.__metadata(\"design:type\", String)\n], CreateVehicleDto.prototype, \"customerId\", void 0);\ntslib_1.__decorate([\n    (0, class_validator_1.IsString)(),\n    (0, class_validator_1.IsNotEmpty)(),\n    tslib_1.__metadata(\"design:type\", String)\n], CreateVehicleDto.prototype, \"make\", void 0);\ntslib_1.__decorate([\n    (0, class_validator_1.IsString)(),\n    (0, class_validator_1.IsNotEmpty)(),\n    tslib_1.__metadata(\"design:type\", String)\n], CreateVehicleDto.prototype, \"model\", void 0);\ntslib_1.__decorate([\n    (0, class_validator_1.IsInt)(),\n    (0, class_validator_1.Min)(1900),\n    (0, class_validator_1.Max)(new Date().getFullYear() + 1),\n    tslib_1.__metadata(\"design:type\", Number)\n], CreateVehicleDto.prototype, \"year\", void 0);\ntslib_1.__decorate([\n    (0, class_validator_1.IsString)(),\n    (0, class_validator_1.IsOptional)(),\n    tslib_1.__metadata(\"design:type\", String)\n], CreateVehicleDto.prototype, \"vin\", void 0);\ntslib_1.__decorate([\n    (0, class_validator_1.IsString)(),\n    (0, class_validator_1.IsOptional)(),\n    tslib_1.__metadata(\"design:type\", String)\n], CreateVehicleDto.prototype, \"licensePlate\", void 0);\ntslib_1.__decorate([\n    (0, class_validator_1.IsInt)(),\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.Min)(0),\n    tslib_1.__metadata(\"design:type\", Number)\n], CreateVehicleDto.prototype, \"mileage\", void 0);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UpdateVehicleDto = void 0;\nconst mapped_types_1 = require(\"@nestjs/mapped-types\");\nconst create_vehicle_dto_1 = require(\"./create-vehicle.dto\");\nclass UpdateVehicleDto extends (0, mapped_types_1.PartialType)((0, mapped_types_1.OmitType)(create_vehicle_dto_1.CreateVehicleDto, ['customerId'])) {\n}\nexports.UpdateVehicleDto = UpdateVehicleDto;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InvoicesModule = void 0;\nconst tslib_1 = require(\"tslib\");\nconst common_1 = require(\"@nestjs/common\");\nconst invoices_service_1 = require(\"./invoices.service\");\nconst invoices_controller_1 = require(\"./invoices.controller\");\nconst invoice_repository_1 = require(\"./repositories/invoice.repository\");\nconst audit_repository_1 = require(\"../audit/repositories/audit.repository\");\nconst customer_repository_1 = require(\"../customers/repositories/customer.repository\");\nconst database_1 = require(\"@gt-automotive/database\");\nlet InvoicesModule = class InvoicesModule {\n};\nexports.InvoicesModule = InvoicesModule;\nexports.InvoicesModule = InvoicesModule = tslib_1.__decorate([\n    (0, common_1.Module)({\n        controllers: [invoices_controller_1.InvoicesController],\n        providers: [\n            invoices_service_1.InvoicesService,\n            invoice_repository_1.InvoiceRepository,\n            audit_repository_1.AuditRepository,\n            customer_repository_1.CustomerRepository,\n            database_1.PrismaService,\n        ],\n        exports: [invoices_service_1.InvoicesService],\n    })\n], InvoicesModule);\n","\"use strict\";\nvar _a, _b, _c;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InvoicesService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst common_1 = require(\"@nestjs/common\");\nconst invoice_repository_1 = require(\"./repositories/invoice.repository\");\nconst audit_repository_1 = require(\"../audit/repositories/audit.repository\");\nconst customer_repository_1 = require(\"../customers/repositories/customer.repository\");\nlet InvoicesService = class InvoicesService {\n    constructor(invoiceRepository, auditRepository, customerRepository) {\n        this.invoiceRepository = invoiceRepository;\n        this.auditRepository = auditRepository;\n        this.customerRepository = customerRepository;\n    }\n    async create(createInvoiceDto, userId) {\n        console.log('Creating invoice with data:', JSON.stringify(createInvoiceDto, null, 2));\n        let customerId = createInvoiceDto.customerId;\n        // Create customer ONLY if customerData is provided AND no customerId exists\n        // This prevents creating duplicate customers when an existing customer is selected\n        if (!customerId && createInvoiceDto.customerData) {\n            const { firstName, lastName, businessName, address, phone, email } = createInvoiceDto.customerData;\n            try {\n                console.log('Creating customer with firstName:', firstName, 'lastName:', lastName);\n                // Create customer directly without user relationship\n                const customerData = {\n                    firstName,\n                    lastName,\n                    email: email || '', // Empty string instead of generated email\n                    phone: phone || null,\n                    address: address || null,\n                    businessName: businessName || null,\n                };\n                console.log('Customer data to create:', JSON.stringify(customerData, null, 2));\n                const newCustomer = await this.customerRepository.create(customerData);\n                customerId = newCustomer.id;\n                console.log('Customer created with ID:', customerId);\n            }\n            catch (error) {\n                console.error('Error creating customer:', error);\n                throw new common_1.BadRequestException(`Failed to create customer: ${error instanceof Error ? error.message : 'Unknown error'}`);\n            }\n        }\n        // Validate that we have a customerId\n        if (!customerId) {\n            throw new common_1.BadRequestException('Either customerId or customerData must be provided');\n        }\n        // Calculate totals\n        let subtotal = 0;\n        const items = createInvoiceDto.items.map(item => {\n            const total = item.quantity * item.unitPrice;\n            subtotal += total;\n            return {\n                ...item,\n                total,\n            };\n        });\n        // Handle tax calculations - support both combined and separate rates\n        let taxRate;\n        let gstRate;\n        let pstRate;\n        let gstAmount;\n        let pstAmount;\n        if (createInvoiceDto.gstRate !== undefined || createInvoiceDto.pstRate !== undefined) {\n            // Use separate GST/PST rates\n            gstRate = createInvoiceDto.gstRate ?? 0;\n            pstRate = createInvoiceDto.pstRate ?? 0;\n            gstAmount = subtotal * gstRate;\n            pstAmount = subtotal * pstRate;\n            taxRate = gstRate + pstRate;\n        }\n        else {\n            // Use combined tax rate (backward compatibility)\n            taxRate = createInvoiceDto.taxRate ?? 0.0825;\n        }\n        const taxAmount = subtotal * taxRate;\n        const total = subtotal + taxAmount;\n        console.log('Calculated tax values:', {\n            gstRate,\n            pstRate,\n            gstAmount,\n            pstAmount,\n            taxRate,\n            taxAmount\n        });\n        // Generate invoice number\n        const invoiceNumber = await this.invoiceRepository.generateInvoiceNumber();\n        // Create invoice with items\n        const invoice = await this.invoiceRepository.createWithItems({\n            invoiceNumber,\n            customer: { connect: { id: customerId } },\n            vehicle: createInvoiceDto.vehicleId ? { connect: { id: createInvoiceDto.vehicleId } } : undefined,\n            subtotal,\n            taxRate,\n            taxAmount,\n            ...(gstRate !== undefined && { gstRate }),\n            ...(gstAmount !== undefined && { gstAmount }),\n            ...(pstRate !== undefined && { pstRate }),\n            ...(pstAmount !== undefined && { pstAmount }),\n            total,\n            status: createInvoiceDto.paymentMethod ? 'PAID' : 'PENDING',\n            paymentMethod: createInvoiceDto.paymentMethod,\n            notes: createInvoiceDto.notes,\n            createdBy: userId,\n            paidAt: createInvoiceDto.paymentMethod ? new Date() : undefined,\n        }, items);\n        // Log the creation\n        await this.auditRepository.create({\n            userId,\n            action: 'CREATE_INVOICE',\n            entityType: 'invoice',\n            entityId: invoice.id,\n            details: invoice,\n        });\n        return invoice;\n    }\n    async findAll(user) {\n        // If customer, only show their invoices\n        if (user.role === 'CUSTOMER') {\n            const customerId = user.customerId;\n            if (!customerId) {\n                return [];\n            }\n            return this.invoiceRepository.findByCustomer(customerId, true);\n        }\n        // Staff and Admin can see all invoices\n        return this.invoiceRepository.findAll({\n            include: {\n                customer: true,\n                vehicle: true,\n                items: {\n                    include: {\n                        tire: true,\n                    },\n                },\n            },\n            orderBy: { createdAt: 'desc' },\n        });\n    }\n    async findOne(id, user) {\n        const invoice = await this.invoiceRepository.findWithDetails(id);\n        if (!invoice) {\n            throw new common_1.NotFoundException(`Invoice with ID ${id} not found`);\n        }\n        // Check if customer can access this invoice\n        if (user.role === 'CUSTOMER' && invoice.customerId !== user.customerId) {\n            throw new common_1.ForbiddenException('You can only view your own invoices');\n        }\n        return invoice;\n    }\n    async update(id, updateInvoiceDto, userId) {\n        const invoice = await this.invoiceRepository.findById(id);\n        if (!invoice) {\n            throw new common_1.NotFoundException(`Invoice with ID ${id} not found`);\n        }\n        // Cannot update paid or cancelled invoices\n        if (invoice.status === 'PAID' || invoice.status === 'CANCELLED') {\n            throw new common_1.BadRequestException(`Cannot update invoice with status ${invoice.status}`);\n        }\n        const oldValue = { ...invoice };\n        const updated = await this.invoiceRepository.updateStatus(id, updateInvoiceDto.status || invoice.status, updateInvoiceDto.paidAt ? new Date(updateInvoiceDto.paidAt) : undefined);\n        // Log the update\n        await this.auditRepository.create({\n            userId,\n            action: 'UPDATE_INVOICE',\n            entityType: 'invoice',\n            resourceId: id,\n            oldValue: oldValue,\n            newValue: updated,\n        });\n        return updated;\n    }\n    async remove(id, userId) {\n        const invoice = await this.invoiceRepository.findById(id);\n        if (!invoice) {\n            throw new common_1.NotFoundException(`Invoice with ID ${id} not found`);\n        }\n        // Only allow cancellation, not deletion\n        if (invoice.status === 'PAID') {\n            throw new common_1.BadRequestException('Cannot cancel a paid invoice');\n        }\n        await this.invoiceRepository.updateStatus(id, 'CANCELLED');\n        // Log the cancellation\n        await this.auditRepository.create({\n            userId,\n            action: 'CANCEL_INVOICE',\n            entityType: 'invoice',\n            resourceId: id,\n            oldValue: invoice,\n        });\n    }\n    async searchInvoices(searchParams, user) {\n        const params = { ...searchParams };\n        if (searchParams.startDate) {\n            params.startDate = new Date(searchParams.startDate);\n        }\n        if (searchParams.endDate) {\n            params.endDate = new Date(searchParams.endDate);\n        }\n        const invoices = await this.invoiceRepository.searchInvoices(params);\n        // Filter for customers\n        if (user.role === 'CUSTOMER') {\n            return invoices.filter(inv => inv.customerId === user.customerId);\n        }\n        return invoices;\n    }\n    async getDailyCashReport(date, user) {\n        // Only staff and admin can view cash reports\n        if (user.role === 'CUSTOMER') {\n            throw new common_1.ForbiddenException('You do not have permission to view cash reports');\n        }\n        const reportDate = new Date(date);\n        return this.invoiceRepository.getDailyCashReport(reportDate);\n    }\n    async getCustomerInvoices(customerId, user) {\n        // Customers can only see their own invoices\n        if (user.role === 'CUSTOMER' && user.customerId !== customerId) {\n            throw new common_1.ForbiddenException('You can only view your own invoices');\n        }\n        return this.invoiceRepository.findByCustomer(customerId, true);\n    }\n    async markAsPaid(id, paymentMethod, userId) {\n        const invoice = await this.invoiceRepository.findById(id);\n        if (!invoice) {\n            throw new common_1.NotFoundException(`Invoice with ID ${id} not found`);\n        }\n        if (invoice.status === 'PAID') {\n            throw new common_1.BadRequestException('Invoice is already paid');\n        }\n        const updated = await this.invoiceRepository.update(id, {\n            status: 'PAID',\n            paymentMethod,\n            paidAt: new Date(),\n        });\n        // Log the payment\n        await this.auditRepository.create({\n            userId,\n            action: 'MARK_INVOICE_PAID',\n            entityType: 'invoice',\n            resourceId: id,\n            newValue: { paymentMethod, paidAt: new Date() },\n        });\n        return updated;\n    }\n};\nexports.InvoicesService = InvoicesService;\nexports.InvoicesService = InvoicesService = tslib_1.__decorate([\n    (0, common_1.Injectable)(),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof invoice_repository_1.InvoiceRepository !== \"undefined\" && invoice_repository_1.InvoiceRepository) === \"function\" ? _a : Object, typeof (_b = typeof audit_repository_1.AuditRepository !== \"undefined\" && audit_repository_1.AuditRepository) === \"function\" ? _b : Object, typeof (_c = typeof customer_repository_1.CustomerRepository !== \"undefined\" && customer_repository_1.CustomerRepository) === \"function\" ? _c : Object])\n], InvoicesService);\n","\"use strict\";\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InvoiceRepository = void 0;\nconst tslib_1 = require(\"tslib\");\nconst common_1 = require(\"@nestjs/common\");\nconst base_repository_1 = require(\"../../common/repositories/base.repository\");\nconst database_1 = require(\"@gt-automotive/database\");\nlet InvoiceRepository = class InvoiceRepository extends base_repository_1.BaseRepository {\n    constructor(prisma) {\n        super(prisma, 'invoice');\n    }\n    async findByCustomer(customerId, includeItems = false) {\n        return this.prisma.invoice.findMany({\n            where: { customerId },\n            include: {\n                customer: true,\n                vehicle: true,\n                items: includeItems ? {\n                    include: {\n                        tire: true,\n                    },\n                } : false,\n            },\n            orderBy: { createdAt: 'desc' },\n        });\n    }\n    async findByStatus(status) {\n        return this.prisma.invoice.findMany({\n            where: { status },\n            include: {\n                customer: true,\n                vehicle: true,\n            },\n            orderBy: { createdAt: 'desc' },\n        });\n    }\n    async findWithDetails(id) {\n        return this.prisma.invoice.findUnique({\n            where: { id },\n            include: {\n                customer: true,\n                vehicle: true,\n                items: {\n                    include: {\n                        tire: true,\n                    },\n                },\n            },\n        });\n    }\n    async createWithItems(invoiceData, items) {\n        return this.prisma.$transaction(async (tx) => {\n            const invoice = await tx.invoice.create({\n                data: {\n                    ...invoiceData,\n                    items: {\n                        create: items,\n                    },\n                },\n                include: {\n                    customer: true,\n                    vehicle: true,\n                    items: {\n                        include: {\n                            tire: true,\n                        },\n                    },\n                },\n            });\n            // Deduct tire inventory for tire items\n            for (const item of items) {\n                if (item.itemType === 'TIRE' && item.tireId) {\n                    await tx.tire.update({\n                        where: { id: item.tireId },\n                        data: {\n                            quantity: {\n                                decrement: item.quantity,\n                            },\n                        },\n                    });\n                }\n            }\n            return invoice;\n        });\n    }\n    async updateStatus(id, status, paidAt) {\n        return this.prisma.invoice.update({\n            where: { id },\n            data: {\n                status,\n                paidAt: status === 'PAID' ? (paidAt || new Date()) : undefined,\n            },\n            include: {\n                customer: true,\n                vehicle: true,\n                items: {\n                    include: {\n                        tire: true,\n                    },\n                },\n            },\n        });\n    }\n    async getDailyCashReport(date) {\n        const startOfDay = new Date(date);\n        startOfDay.setHours(0, 0, 0, 0);\n        const endOfDay = new Date(date);\n        endOfDay.setHours(23, 59, 59, 999);\n        const invoices = await this.prisma.invoice.findMany({\n            where: {\n                createdAt: {\n                    gte: startOfDay,\n                    lte: endOfDay,\n                },\n                status: 'PAID',\n            },\n            include: {\n                customer: true,\n            },\n        });\n        const byPaymentMethod = await this.prisma.invoice.groupBy({\n            by: ['paymentMethod'],\n            where: {\n                createdAt: {\n                    gte: startOfDay,\n                    lte: endOfDay,\n                },\n                status: 'PAID',\n            },\n            _sum: {\n                total: true,\n            },\n            _count: true,\n        });\n        return {\n            date: date.toISOString().split('T')[0],\n            totalInvoices: invoices.length,\n            totalRevenue: invoices.reduce((sum, inv) => sum + Number(inv.total), 0),\n            byPaymentMethod,\n            invoices,\n        };\n    }\n    async searchInvoices(searchParams) {\n        const where = {};\n        if (searchParams.invoiceNumber) {\n            where.invoiceNumber = {\n                contains: searchParams.invoiceNumber,\n                mode: 'insensitive',\n            };\n        }\n        if (searchParams.status) {\n            where.status = searchParams.status;\n        }\n        if (searchParams.startDate || searchParams.endDate) {\n            where.createdAt = {};\n            if (searchParams.startDate) {\n                where.createdAt.gte = searchParams.startDate;\n            }\n            if (searchParams.endDate) {\n                where.createdAt.lte = searchParams.endDate;\n            }\n        }\n        if (searchParams.customerName) {\n            where.customer = {\n                OR: [\n                    {\n                        firstName: {\n                            contains: searchParams.customerName,\n                            mode: 'insensitive',\n                        },\n                    },\n                    {\n                        lastName: {\n                            contains: searchParams.customerName,\n                            mode: 'insensitive',\n                        },\n                    },\n                ],\n            };\n        }\n        return this.prisma.invoice.findMany({\n            where,\n            include: {\n                customer: true,\n                vehicle: true,\n                items: true,\n            },\n            orderBy: { createdAt: 'desc' },\n        });\n    }\n    async generateInvoiceNumber() {\n        const date = new Date();\n        const year = date.getFullYear();\n        const month = String(date.getMonth() + 1).padStart(2, '0');\n        const lastInvoice = await this.prisma.invoice.findFirst({\n            where: {\n                invoiceNumber: {\n                    startsWith: `INV-${year}${month}`,\n                },\n            },\n            orderBy: {\n                invoiceNumber: 'desc',\n            },\n        });\n        let sequence = 1;\n        if (lastInvoice) {\n            const lastSequence = parseInt(lastInvoice.invoiceNumber.split('-').pop() || '0');\n            sequence = lastSequence + 1;\n        }\n        return `INV-${year}${month}-${String(sequence).padStart(4, '0')}`;\n    }\n};\nexports.InvoiceRepository = InvoiceRepository;\nexports.InvoiceRepository = InvoiceRepository = tslib_1.__decorate([\n    (0, common_1.Injectable)(),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof database_1.PrismaService !== \"undefined\" && database_1.PrismaService) === \"function\" ? _a : Object])\n], InvoiceRepository);\n","\"use strict\";\nvar _a, _b, _c, _d, _e;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InvoicesController = void 0;\nconst tslib_1 = require(\"tslib\");\nconst common_1 = require(\"@nestjs/common\");\nconst invoices_service_1 = require(\"./invoices.service\");\nconst create_invoice_dto_1 = require(\"./dto/create-invoice.dto\");\nconst update_invoice_dto_1 = require(\"./dto/update-invoice.dto\");\nconst jwt_auth_guard_1 = require(\"../auth/guards/jwt-auth.guard\");\nconst role_guard_1 = require(\"../auth/guards/role.guard\");\nconst roles_decorator_1 = require(\"../auth/decorators/roles.decorator\");\nconst current_user_decorator_1 = require(\"../auth/decorators/current-user.decorator\");\nconst client_1 = require(\"@prisma/client\");\nlet InvoicesController = class InvoicesController {\n    constructor(invoicesService) {\n        this.invoicesService = invoicesService;\n    }\n    create(createInvoiceDto, user) {\n        return this.invoicesService.create(createInvoiceDto, user.id);\n    }\n    findAll(user) {\n        return this.invoicesService.findAll(user);\n    }\n    search(customerName, invoiceNumber, startDate, endDate, status, user) {\n        return this.invoicesService.searchInvoices({\n            customerName,\n            invoiceNumber,\n            startDate,\n            endDate,\n            status,\n        }, user);\n    }\n    getDailyCashReport(date, user) {\n        const reportDate = date || new Date().toISOString().split('T')[0];\n        return this.invoicesService.getDailyCashReport(reportDate, user);\n    }\n    getCustomerInvoices(customerId, user) {\n        return this.invoicesService.getCustomerInvoices(customerId, user);\n    }\n    findOne(id, user) {\n        return this.invoicesService.findOne(id, user);\n    }\n    update(id, updateInvoiceDto, user) {\n        return this.invoicesService.update(id, updateInvoiceDto, user.id);\n    }\n    markAsPaid(id, paymentMethod, user) {\n        return this.invoicesService.markAsPaid(id, paymentMethod, user.id);\n    }\n    remove(id, user) {\n        return this.invoicesService.remove(id, user.id);\n    }\n};\nexports.InvoicesController = InvoicesController;\ntslib_1.__decorate([\n    (0, common_1.Post)(),\n    (0, common_1.UseGuards)(role_guard_1.RoleGuard),\n    (0, roles_decorator_1.Roles)('STAFF', 'ADMIN'),\n    tslib_1.__param(0, (0, common_1.Body)()),\n    tslib_1.__param(1, (0, current_user_decorator_1.CurrentUser)()),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_b = typeof create_invoice_dto_1.CreateInvoiceDto !== \"undefined\" && create_invoice_dto_1.CreateInvoiceDto) === \"function\" ? _b : Object, Object]),\n    tslib_1.__metadata(\"design:returntype\", void 0)\n], InvoicesController.prototype, \"create\", null);\ntslib_1.__decorate([\n    (0, common_1.Get)(),\n    tslib_1.__param(0, (0, current_user_decorator_1.CurrentUser)()),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [Object]),\n    tslib_1.__metadata(\"design:returntype\", void 0)\n], InvoicesController.prototype, \"findAll\", null);\ntslib_1.__decorate([\n    (0, common_1.Get)('search'),\n    tslib_1.__param(0, (0, common_1.Query)('customerName')),\n    tslib_1.__param(1, (0, common_1.Query)('invoiceNumber')),\n    tslib_1.__param(2, (0, common_1.Query)('startDate')),\n    tslib_1.__param(3, (0, common_1.Query)('endDate')),\n    tslib_1.__param(4, (0, common_1.Query)('status')),\n    tslib_1.__param(5, (0, current_user_decorator_1.CurrentUser)()),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [String, String, String, String, typeof (_c = typeof client_1.InvoiceStatus !== \"undefined\" && client_1.InvoiceStatus) === \"function\" ? _c : Object, Object]),\n    tslib_1.__metadata(\"design:returntype\", void 0)\n], InvoicesController.prototype, \"search\", null);\ntslib_1.__decorate([\n    (0, common_1.Get)('cash-report'),\n    (0, common_1.UseGuards)(role_guard_1.RoleGuard),\n    (0, roles_decorator_1.Roles)('STAFF', 'ADMIN'),\n    tslib_1.__param(0, (0, common_1.Query)('date')),\n    tslib_1.__param(1, (0, current_user_decorator_1.CurrentUser)()),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [String, Object]),\n    tslib_1.__metadata(\"design:returntype\", void 0)\n], InvoicesController.prototype, \"getDailyCashReport\", null);\ntslib_1.__decorate([\n    (0, common_1.Get)('customer/:customerId'),\n    tslib_1.__param(0, (0, common_1.Param)('customerId')),\n    tslib_1.__param(1, (0, current_user_decorator_1.CurrentUser)()),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [String, Object]),\n    tslib_1.__metadata(\"design:returntype\", void 0)\n], InvoicesController.prototype, \"getCustomerInvoices\", null);\ntslib_1.__decorate([\n    (0, common_1.Get)(':id'),\n    tslib_1.__param(0, (0, common_1.Param)('id')),\n    tslib_1.__param(1, (0, current_user_decorator_1.CurrentUser)()),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [String, Object]),\n    tslib_1.__metadata(\"design:returntype\", void 0)\n], InvoicesController.prototype, \"findOne\", null);\ntslib_1.__decorate([\n    (0, common_1.Patch)(':id'),\n    (0, common_1.UseGuards)(role_guard_1.RoleGuard),\n    (0, roles_decorator_1.Roles)('STAFF', 'ADMIN'),\n    tslib_1.__param(0, (0, common_1.Param)('id')),\n    tslib_1.__param(1, (0, common_1.Body)()),\n    tslib_1.__param(2, (0, current_user_decorator_1.CurrentUser)()),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [String, typeof (_d = typeof update_invoice_dto_1.UpdateInvoiceDto !== \"undefined\" && update_invoice_dto_1.UpdateInvoiceDto) === \"function\" ? _d : Object, Object]),\n    tslib_1.__metadata(\"design:returntype\", void 0)\n], InvoicesController.prototype, \"update\", null);\ntslib_1.__decorate([\n    (0, common_1.Post)(':id/pay'),\n    (0, common_1.UseGuards)(role_guard_1.RoleGuard),\n    (0, roles_decorator_1.Roles)('STAFF', 'ADMIN'),\n    tslib_1.__param(0, (0, common_1.Param)('id')),\n    tslib_1.__param(1, (0, common_1.Body)('paymentMethod')),\n    tslib_1.__param(2, (0, current_user_decorator_1.CurrentUser)()),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [String, typeof (_e = typeof client_1.PaymentMethod !== \"undefined\" && client_1.PaymentMethod) === \"function\" ? _e : Object, Object]),\n    tslib_1.__metadata(\"design:returntype\", void 0)\n], InvoicesController.prototype, \"markAsPaid\", null);\ntslib_1.__decorate([\n    (0, common_1.Delete)(':id'),\n    (0, common_1.UseGuards)(role_guard_1.RoleGuard),\n    (0, roles_decorator_1.Roles)('ADMIN'),\n    tslib_1.__param(0, (0, common_1.Param)('id')),\n    tslib_1.__param(1, (0, current_user_decorator_1.CurrentUser)()),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [String, Object]),\n    tslib_1.__metadata(\"design:returntype\", void 0)\n], InvoicesController.prototype, \"remove\", null);\nexports.InvoicesController = InvoicesController = tslib_1.__decorate([\n    (0, common_1.Controller)('api/invoices'),\n    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof invoices_service_1.InvoicesService !== \"undefined\" && invoices_service_1.InvoicesService) === \"function\" ? _a : Object])\n], InvoicesController);\n","\"use strict\";\nvar _a, _b;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CreateInvoiceDto = exports.CreateCustomerDto = exports.CreateInvoiceItemDto = void 0;\nconst tslib_1 = require(\"tslib\");\nconst class_validator_1 = require(\"class-validator\");\nconst class_transformer_1 = require(\"class-transformer\");\nconst client_1 = require(\"@prisma/client\");\nclass CreateInvoiceItemDto {\n}\nexports.CreateInvoiceItemDto = CreateInvoiceItemDto;\ntslib_1.__decorate([\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsString)(),\n    tslib_1.__metadata(\"design:type\", String)\n], CreateInvoiceItemDto.prototype, \"tireId\", void 0);\ntslib_1.__decorate([\n    (0, class_validator_1.IsEnum)(client_1.InvoiceItemType),\n    tslib_1.__metadata(\"design:type\", typeof (_a = typeof client_1.InvoiceItemType !== \"undefined\" && client_1.InvoiceItemType) === \"function\" ? _a : Object)\n], CreateInvoiceItemDto.prototype, \"itemType\", void 0);\ntslib_1.__decorate([\n    (0, class_validator_1.IsString)(),\n    tslib_1.__metadata(\"design:type\", String)\n], CreateInvoiceItemDto.prototype, \"description\", void 0);\ntslib_1.__decorate([\n    (0, class_validator_1.IsNumber)(),\n    (0, class_validator_1.Min)(1),\n    tslib_1.__metadata(\"design:type\", Number)\n], CreateInvoiceItemDto.prototype, \"quantity\", void 0);\ntslib_1.__decorate([\n    (0, class_validator_1.IsNumber)(),\n    (0, class_validator_1.Min)(0),\n    tslib_1.__metadata(\"design:type\", Number)\n], CreateInvoiceItemDto.prototype, \"unitPrice\", void 0);\nclass CreateCustomerDto {\n}\nexports.CreateCustomerDto = CreateCustomerDto;\ntslib_1.__decorate([\n    (0, class_validator_1.IsString)(),\n    tslib_1.__metadata(\"design:type\", String)\n], CreateCustomerDto.prototype, \"firstName\", void 0);\ntslib_1.__decorate([\n    (0, class_validator_1.IsString)(),\n    tslib_1.__metadata(\"design:type\", String)\n], CreateCustomerDto.prototype, \"lastName\", void 0);\ntslib_1.__decorate([\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsString)(),\n    tslib_1.__metadata(\"design:type\", String)\n], CreateCustomerDto.prototype, \"businessName\", void 0);\ntslib_1.__decorate([\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsString)(),\n    tslib_1.__metadata(\"design:type\", String)\n], CreateCustomerDto.prototype, \"address\", void 0);\ntslib_1.__decorate([\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsString)(),\n    tslib_1.__metadata(\"design:type\", String)\n], CreateCustomerDto.prototype, \"phone\", void 0);\ntslib_1.__decorate([\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsEmail)(),\n    tslib_1.__metadata(\"design:type\", String)\n], CreateCustomerDto.prototype, \"email\", void 0);\nclass CreateInvoiceDto {\n}\nexports.CreateInvoiceDto = CreateInvoiceDto;\ntslib_1.__decorate([\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsString)(),\n    tslib_1.__metadata(\"design:type\", String)\n], CreateInvoiceDto.prototype, \"customerId\", void 0);\ntslib_1.__decorate([\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.ValidateNested)(),\n    (0, class_transformer_1.Type)(() => CreateCustomerDto),\n    tslib_1.__metadata(\"design:type\", CreateCustomerDto)\n], CreateInvoiceDto.prototype, \"customerData\", void 0);\ntslib_1.__decorate([\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsString)(),\n    tslib_1.__metadata(\"design:type\", String)\n], CreateInvoiceDto.prototype, \"vehicleId\", void 0);\ntslib_1.__decorate([\n    (0, class_validator_1.IsArray)(),\n    (0, class_validator_1.ValidateNested)({ each: true }),\n    (0, class_transformer_1.Type)(() => CreateInvoiceItemDto),\n    tslib_1.__metadata(\"design:type\", Array)\n], CreateInvoiceDto.prototype, \"items\", void 0);\ntslib_1.__decorate([\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsNumber)(),\n    (0, class_validator_1.Min)(0),\n    tslib_1.__metadata(\"design:type\", Number)\n], CreateInvoiceDto.prototype, \"taxRate\", void 0);\ntslib_1.__decorate([\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsNumber)(),\n    (0, class_validator_1.Min)(0),\n    tslib_1.__metadata(\"design:type\", Number)\n], CreateInvoiceDto.prototype, \"gstRate\", void 0);\ntslib_1.__decorate([\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsNumber)(),\n    (0, class_validator_1.Min)(0),\n    tslib_1.__metadata(\"design:type\", Number)\n], CreateInvoiceDto.prototype, \"pstRate\", void 0);\ntslib_1.__decorate([\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsEnum)(client_1.PaymentMethod),\n    tslib_1.__metadata(\"design:type\", typeof (_b = typeof client_1.PaymentMethod !== \"undefined\" && client_1.PaymentMethod) === \"function\" ? _b : Object)\n], CreateInvoiceDto.prototype, \"paymentMethod\", void 0);\ntslib_1.__decorate([\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsString)(),\n    tslib_1.__metadata(\"design:type\", String)\n], CreateInvoiceDto.prototype, \"notes\", void 0);\n","\"use strict\";\nvar _a, _b;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UpdateInvoiceDto = void 0;\nconst tslib_1 = require(\"tslib\");\nconst class_validator_1 = require(\"class-validator\");\nconst client_1 = require(\"@prisma/client\");\nclass UpdateInvoiceDto {\n}\nexports.UpdateInvoiceDto = UpdateInvoiceDto;\ntslib_1.__decorate([\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsEnum)(client_1.InvoiceStatus),\n    tslib_1.__metadata(\"design:type\", typeof (_a = typeof client_1.InvoiceStatus !== \"undefined\" && client_1.InvoiceStatus) === \"function\" ? _a : Object)\n], UpdateInvoiceDto.prototype, \"status\", void 0);\ntslib_1.__decorate([\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsEnum)(client_1.PaymentMethod),\n    tslib_1.__metadata(\"design:type\", typeof (_b = typeof client_1.PaymentMethod !== \"undefined\" && client_1.PaymentMethod) === \"function\" ? _b : Object)\n], UpdateInvoiceDto.prototype, \"paymentMethod\", void 0);\ntslib_1.__decorate([\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsString)(),\n    tslib_1.__metadata(\"design:type\", String)\n], UpdateInvoiceDto.prototype, \"notes\", void 0);\ntslib_1.__decorate([\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsDateString)(),\n    tslib_1.__metadata(\"design:type\", String)\n], UpdateInvoiceDto.prototype, \"paidAt\", void 0);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.QuotationsModule = void 0;\nconst tslib_1 = require(\"tslib\");\nconst common_1 = require(\"@nestjs/common\");\nconst quotations_service_1 = require(\"./quotations.service\");\nconst quotations_controller_1 = require(\"./quotations.controller\");\nconst quotation_repository_1 = require(\"./repositories/quotation.repository\");\nconst database_1 = require(\"@gt-automotive/database\");\nlet QuotationsModule = class QuotationsModule {\n};\nexports.QuotationsModule = QuotationsModule;\nexports.QuotationsModule = QuotationsModule = tslib_1.__decorate([\n    (0, common_1.Module)({\n        controllers: [quotations_controller_1.QuotationsController],\n        providers: [quotations_service_1.QuotationsService, quotation_repository_1.QuotationRepository, database_1.PrismaService],\n        exports: [quotations_service_1.QuotationsService],\n    })\n], QuotationsModule);\n","\"use strict\";\nvar _a, _b;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.QuotationsService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst common_1 = require(\"@nestjs/common\");\nconst quotation_repository_1 = require(\"./repositories/quotation.repository\");\nconst database_1 = require(\"@gt-automotive/database\");\nlet QuotationsService = class QuotationsService {\n    constructor(quotationRepository, prisma) {\n        this.quotationRepository = quotationRepository;\n        this.prisma = prisma;\n    }\n    async create(createQuoteDto, userId) {\n        console.log('Service: Starting quotation creation...');\n        console.log('Service: Received data:', JSON.stringify(createQuoteDto, null, 2));\n        try {\n            const { items, ...quoteData } = createQuoteDto;\n            // Generate quotation number\n            const quotationNumber = `Q${Date.now().toString().slice(-8)}-${Math.random().toString(36).substr(2, 4).toUpperCase()}`;\n            console.log('Service: Generated quotation number:', quotationNumber);\n            // Calculate totals\n            let subtotal = 0;\n            const processedItems = items.map(item => {\n                const total = item.quantity * item.unitPrice;\n                subtotal += total;\n                return {\n                    ...item,\n                    total,\n                };\n            });\n            console.log('Service: Processed items count:', processedItems.length);\n            // Calculate taxes\n            const gstRate = quoteData.gstRate ?? 0.05; // Default 5% GST\n            const pstRate = quoteData.pstRate ?? 0.07; // Default 7% PST\n            const gstAmount = subtotal * gstRate;\n            const pstAmount = subtotal * pstRate;\n            const taxRate = gstRate + pstRate;\n            const taxAmount = gstAmount + pstAmount;\n            const total = subtotal + taxAmount;\n            console.log('Service: Calculated totals - subtotal:', subtotal, 'total:', total);\n            // Set valid until date if not provided (30 days from now)\n            const validUntil = quoteData.validUntil\n                ? new Date(quoteData.validUntil)\n                : new Date(Date.now() + 30 * 24 * 60 * 60 * 1000);\n            console.log('Service: About to call repository create...');\n            const result = await this.quotationRepository.create({\n                ...quoteData,\n                quotationNumber,\n                subtotal,\n                gstRate,\n                gstAmount,\n                pstRate,\n                pstAmount,\n                taxRate,\n                taxAmount,\n                total,\n                validUntil,\n                status: quoteData.status || 'DRAFT',\n                createdBy: userId,\n                items: {\n                    create: processedItems,\n                },\n            });\n            console.log('Service: Successfully created quotation:', result.id);\n            return result;\n        }\n        catch (error) {\n            console.error('Service: Error creating quotation:', error);\n            throw error;\n        }\n    }\n    async findAll() {\n        return this.quotationRepository.findAll();\n    }\n    async findOne(id) {\n        const quotation = await this.quotationRepository.findOne(id);\n        if (!quotation) {\n            throw new common_1.NotFoundException(`Quotation with ID ${id} not found`);\n        }\n        return quotation;\n    }\n    async update(id, updateQuoteDto) {\n        const existingQuotation = await this.findOne(id);\n        const { items, ...quoteData } = updateQuoteDto;\n        // If items are being updated, recalculate totals\n        if (items) {\n            // Delete existing items\n            await this.quotationRepository.deleteItems(id);\n            // Calculate new totals\n            let subtotal = 0;\n            const processedItems = items.map(item => {\n                const total = item.quantity * item.unitPrice;\n                subtotal += total;\n                return {\n                    ...item,\n                    quotationId: id,\n                    total,\n                };\n            });\n            // Calculate taxes\n            const gstRate = quoteData.gstRate ?? existingQuotation.gstRate ?? 0.05;\n            const pstRate = quoteData.pstRate ?? existingQuotation.pstRate ?? 0.07;\n            const gstAmount = subtotal * Number(gstRate);\n            const pstAmount = subtotal * Number(pstRate);\n            const taxRate = Number(gstRate) + Number(pstRate);\n            const taxAmount = gstAmount + pstAmount;\n            const total = subtotal + taxAmount;\n            // Create new items\n            await this.quotationRepository.createItems(processedItems);\n            // Update quotation with new totals\n            return this.quotationRepository.update(id, {\n                ...quoteData,\n                subtotal,\n                gstRate,\n                gstAmount,\n                pstRate,\n                pstAmount,\n                taxRate,\n                taxAmount,\n                total,\n            });\n        }\n        // If no items update, just update the quotation data\n        return this.quotationRepository.update(id, quoteData);\n    }\n    async remove(id) {\n        await this.findOne(id); // Check if exists\n        await this.quotationRepository.delete(id);\n    }\n    async search(params) {\n        return this.quotationRepository.search(params);\n    }\n    async convertToInvoice(quotationId, customerId, vehicleId) {\n        const quotation = await this.findOne(quotationId);\n        if (quotation.status === 'CONVERTED') {\n            throw new Error('Quotation has already been converted to an invoice');\n        }\n        // Create invoice from quotation\n        const invoice = await this.prisma.invoice.create({\n            data: {\n                customerId,\n                vehicleId,\n                subtotal: quotation.subtotal,\n                taxRate: quotation.taxRate,\n                taxAmount: quotation.taxAmount,\n                gstRate: quotation.gstRate,\n                gstAmount: quotation.gstAmount,\n                pstRate: quotation.pstRate,\n                pstAmount: quotation.pstAmount,\n                total: quotation.total,\n                status: 'PENDING',\n                notes: quotation.notes,\n                createdBy: quotation.createdBy,\n                items: {\n                    create: quotation.items.map(item => ({\n                        tireId: item.tireId,\n                        itemType: item.itemType,\n                        description: item.description,\n                        quantity: item.quantity,\n                        unitPrice: item.unitPrice,\n                        total: item.total,\n                    })),\n                },\n            },\n            include: {\n                customer: true,\n                vehicle: true,\n                items: {\n                    include: {\n                        tire: true,\n                    },\n                },\n            },\n        });\n        // Update quotation status\n        await this.quotationRepository.convertToInvoice(quotationId, invoice.id);\n        return invoice;\n    }\n};\nexports.QuotationsService = QuotationsService;\nexports.QuotationsService = QuotationsService = tslib_1.__decorate([\n    (0, common_1.Injectable)(),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof quotation_repository_1.QuotationRepository !== \"undefined\" && quotation_repository_1.QuotationRepository) === \"function\" ? _a : Object, typeof (_b = typeof database_1.PrismaService !== \"undefined\" && database_1.PrismaService) === \"function\" ? _b : Object])\n], QuotationsService);\n","\"use strict\";\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.QuotationRepository = void 0;\nconst tslib_1 = require(\"tslib\");\nconst common_1 = require(\"@nestjs/common\");\nconst database_1 = require(\"@gt-automotive/database\");\nlet QuotationRepository = class QuotationRepository {\n    constructor(prisma) {\n        this.prisma = prisma;\n    }\n    async create(data) {\n        return this.prisma.quotation.create({\n            data,\n            include: {\n                items: {\n                    include: {\n                        tire: true,\n                    },\n                },\n            },\n        });\n    }\n    async findAll() {\n        return this.prisma.quotation.findMany({\n            include: {\n                items: {\n                    include: {\n                        tire: true,\n                    },\n                },\n            },\n            orderBy: {\n                createdAt: 'desc',\n            },\n        });\n    }\n    async findOne(id) {\n        return this.prisma.quotation.findUnique({\n            where: { id },\n            include: {\n                items: {\n                    include: {\n                        tire: true,\n                    },\n                },\n            },\n        });\n    }\n    async findByNumber(quotationNumber) {\n        return this.prisma.quotation.findUnique({\n            where: { quotationNumber },\n            include: {\n                items: {\n                    include: {\n                        tire: true,\n                    },\n                },\n            },\n        });\n    }\n    async update(id, data) {\n        return this.prisma.quotation.update({\n            where: { id },\n            data,\n            include: {\n                items: {\n                    include: {\n                        tire: true,\n                    },\n                },\n            },\n        });\n    }\n    async delete(id) {\n        return this.prisma.quotation.delete({\n            where: { id },\n        });\n    }\n    async deleteItems(quotationId) {\n        await this.prisma.quotationItem.deleteMany({\n            where: { quotationId },\n        });\n    }\n    async createItems(items) {\n        await this.prisma.quotationItem.createMany({\n            data: items,\n        });\n    }\n    async search(params) {\n        const where = {};\n        if (params.customerName) {\n            where.OR = [\n                {\n                    customerName: {\n                        contains: params.customerName,\n                        mode: 'insensitive',\n                    },\n                },\n                {\n                    businessName: {\n                        contains: params.customerName,\n                        mode: 'insensitive',\n                    },\n                },\n            ];\n        }\n        if (params.quotationNumber) {\n            where.quotationNumber = {\n                contains: params.quotationNumber,\n                mode: 'insensitive',\n            };\n        }\n        if (params.status) {\n            where.status = params.status;\n        }\n        if (params.startDate || params.endDate) {\n            where.createdAt = {};\n            if (params.startDate) {\n                where.createdAt.gte = new Date(params.startDate);\n            }\n            if (params.endDate) {\n                where.createdAt.lte = new Date(params.endDate);\n            }\n        }\n        return this.prisma.quotation.findMany({\n            where,\n            include: {\n                items: {\n                    include: {\n                        tire: true,\n                    },\n                },\n            },\n            orderBy: {\n                createdAt: 'desc',\n            },\n        });\n    }\n    async convertToInvoice(quotationId, invoiceId) {\n        return this.prisma.quotation.update({\n            where: { id: quotationId },\n            data: {\n                status: 'CONVERTED',\n                convertedToInvoiceId: invoiceId,\n            },\n        });\n    }\n};\nexports.QuotationRepository = QuotationRepository;\nexports.QuotationRepository = QuotationRepository = tslib_1.__decorate([\n    (0, common_1.Injectable)(),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof database_1.PrismaService !== \"undefined\" && database_1.PrismaService) === \"function\" ? _a : Object])\n], QuotationRepository);\n","\"use strict\";\nvar _a, _b, _c;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.QuotationsController = void 0;\nconst tslib_1 = require(\"tslib\");\nconst common_1 = require(\"@nestjs/common\");\nconst quotations_service_1 = require(\"./quotations.service\");\nconst create_quotation_dto_1 = require(\"./dto/create-quotation.dto\");\nconst update_quotation_dto_1 = require(\"./dto/update-quotation.dto\");\nconst jwt_auth_guard_1 = require(\"../auth/guards/jwt-auth.guard\");\nconst role_guard_1 = require(\"../auth/guards/role.guard\");\nconst roles_decorator_1 = require(\"../auth/decorators/roles.decorator\");\nlet QuotationsController = class QuotationsController {\n    constructor(quotationsService) {\n        this.quotationsService = quotationsService;\n    }\n    create(createQuoteDto, req) {\n        const userId = req.user?.sub || req.user?.id || 'system';\n        console.log('Creating quotation with userId:', userId, 'user object:', req.user);\n        return this.quotationsService.create(createQuoteDto, userId);\n    }\n    findAll() {\n        return this.quotationsService.findAll();\n    }\n    search(customerName, quotationNumber, status, startDate, endDate) {\n        return this.quotationsService.search({\n            customerName,\n            quotationNumber,\n            status,\n            startDate,\n            endDate,\n        });\n    }\n    findOne(id) {\n        return this.quotationsService.findOne(id);\n    }\n    update(id, updateQuoteDto) {\n        return this.quotationsService.update(id, updateQuoteDto);\n    }\n    remove(id) {\n        return this.quotationsService.remove(id);\n    }\n    convertToInvoice(id, body) {\n        return this.quotationsService.convertToInvoice(id, body.customerId, body.vehicleId);\n    }\n};\nexports.QuotationsController = QuotationsController;\ntslib_1.__decorate([\n    (0, common_1.Post)(),\n    (0, roles_decorator_1.Roles)('ADMIN', 'STAFF'),\n    tslib_1.__param(0, (0, common_1.Body)()),\n    tslib_1.__param(1, (0, common_1.Request)()),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_b = typeof create_quotation_dto_1.CreateQuoteDto !== \"undefined\" && create_quotation_dto_1.CreateQuoteDto) === \"function\" ? _b : Object, Object]),\n    tslib_1.__metadata(\"design:returntype\", void 0)\n], QuotationsController.prototype, \"create\", null);\ntslib_1.__decorate([\n    (0, common_1.Get)(),\n    (0, roles_decorator_1.Roles)('ADMIN', 'STAFF'),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", []),\n    tslib_1.__metadata(\"design:returntype\", void 0)\n], QuotationsController.prototype, \"findAll\", null);\ntslib_1.__decorate([\n    (0, common_1.Get)('search'),\n    (0, roles_decorator_1.Roles)('ADMIN', 'STAFF'),\n    tslib_1.__param(0, (0, common_1.Query)('customerName')),\n    tslib_1.__param(1, (0, common_1.Query)('quotationNumber')),\n    tslib_1.__param(2, (0, common_1.Query)('status')),\n    tslib_1.__param(3, (0, common_1.Query)('startDate')),\n    tslib_1.__param(4, (0, common_1.Query)('endDate')),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [String, String, String, String, String]),\n    tslib_1.__metadata(\"design:returntype\", void 0)\n], QuotationsController.prototype, \"search\", null);\ntslib_1.__decorate([\n    (0, common_1.Get)(':id'),\n    (0, roles_decorator_1.Roles)('ADMIN', 'STAFF'),\n    tslib_1.__param(0, (0, common_1.Param)('id')),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [String]),\n    tslib_1.__metadata(\"design:returntype\", void 0)\n], QuotationsController.prototype, \"findOne\", null);\ntslib_1.__decorate([\n    (0, common_1.Patch)(':id'),\n    (0, roles_decorator_1.Roles)('ADMIN', 'STAFF'),\n    tslib_1.__param(0, (0, common_1.Param)('id')),\n    tslib_1.__param(1, (0, common_1.Body)()),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [String, typeof (_c = typeof update_quotation_dto_1.UpdateQuoteDto !== \"undefined\" && update_quotation_dto_1.UpdateQuoteDto) === \"function\" ? _c : Object]),\n    tslib_1.__metadata(\"design:returntype\", void 0)\n], QuotationsController.prototype, \"update\", null);\ntslib_1.__decorate([\n    (0, common_1.Delete)(':id'),\n    (0, roles_decorator_1.Roles)('ADMIN', 'STAFF'),\n    tslib_1.__param(0, (0, common_1.Param)('id')),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [String]),\n    tslib_1.__metadata(\"design:returntype\", void 0)\n], QuotationsController.prototype, \"remove\", null);\ntslib_1.__decorate([\n    (0, common_1.Post)(':id/convert'),\n    (0, roles_decorator_1.Roles)('ADMIN', 'STAFF'),\n    tslib_1.__param(0, (0, common_1.Param)('id')),\n    tslib_1.__param(1, (0, common_1.Body)()),\n    tslib_1.__metadata(\"design:type\", Function),\n    tslib_1.__metadata(\"design:paramtypes\", [String, Object]),\n    tslib_1.__metadata(\"design:returntype\", void 0)\n], QuotationsController.prototype, \"convertToInvoice\", null);\nexports.QuotationsController = QuotationsController = tslib_1.__decorate([\n    (0, common_1.Controller)('api/quotations'),\n    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, role_guard_1.RoleGuard),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof quotations_service_1.QuotationsService !== \"undefined\" && quotations_service_1.QuotationsService) === \"function\" ? _a : Object])\n], QuotationsController);\n","\"use strict\";\nvar _a, _b;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CreateQuoteDto = exports.CreateQuoteItemDto = void 0;\nconst tslib_1 = require(\"tslib\");\nconst class_validator_1 = require(\"class-validator\");\nconst class_transformer_1 = require(\"class-transformer\");\nconst client_1 = require(\"@prisma/client\");\nclass CreateQuoteItemDto {\n}\nexports.CreateQuoteItemDto = CreateQuoteItemDto;\ntslib_1.__decorate([\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsString)(),\n    tslib_1.__metadata(\"design:type\", String)\n], CreateQuoteItemDto.prototype, \"tireId\", void 0);\ntslib_1.__decorate([\n    (0, class_validator_1.IsEnum)(client_1.InvoiceItemType),\n    tslib_1.__metadata(\"design:type\", typeof (_a = typeof client_1.InvoiceItemType !== \"undefined\" && client_1.InvoiceItemType) === \"function\" ? _a : Object)\n], CreateQuoteItemDto.prototype, \"itemType\", void 0);\ntslib_1.__decorate([\n    (0, class_validator_1.IsString)(),\n    tslib_1.__metadata(\"design:type\", String)\n], CreateQuoteItemDto.prototype, \"description\", void 0);\ntslib_1.__decorate([\n    (0, class_validator_1.IsNumber)(),\n    tslib_1.__metadata(\"design:type\", Number)\n], CreateQuoteItemDto.prototype, \"quantity\", void 0);\ntslib_1.__decorate([\n    (0, class_validator_1.IsNumber)(),\n    tslib_1.__metadata(\"design:type\", Number)\n], CreateQuoteItemDto.prototype, \"unitPrice\", void 0);\nclass CreateQuoteDto {\n}\nexports.CreateQuoteDto = CreateQuoteDto;\ntslib_1.__decorate([\n    (0, class_validator_1.IsString)(),\n    tslib_1.__metadata(\"design:type\", String)\n], CreateQuoteDto.prototype, \"customerName\", void 0);\ntslib_1.__decorate([\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsString)(),\n    tslib_1.__metadata(\"design:type\", String)\n], CreateQuoteDto.prototype, \"businessName\", void 0);\ntslib_1.__decorate([\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsString)(),\n    tslib_1.__metadata(\"design:type\", String)\n], CreateQuoteDto.prototype, \"phone\", void 0);\ntslib_1.__decorate([\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsString)(),\n    tslib_1.__metadata(\"design:type\", String)\n], CreateQuoteDto.prototype, \"email\", void 0);\ntslib_1.__decorate([\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsString)(),\n    tslib_1.__metadata(\"design:type\", String)\n], CreateQuoteDto.prototype, \"address\", void 0);\ntslib_1.__decorate([\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsString)(),\n    tslib_1.__metadata(\"design:type\", String)\n], CreateQuoteDto.prototype, \"vehicleMake\", void 0);\ntslib_1.__decorate([\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsString)(),\n    tslib_1.__metadata(\"design:type\", String)\n], CreateQuoteDto.prototype, \"vehicleModel\", void 0);\ntslib_1.__decorate([\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsNumber)(),\n    tslib_1.__metadata(\"design:type\", Number)\n], CreateQuoteDto.prototype, \"vehicleYear\", void 0);\ntslib_1.__decorate([\n    (0, class_validator_1.IsArray)(),\n    (0, class_validator_1.ValidateNested)({ each: true }),\n    (0, class_transformer_1.Type)(() => CreateQuoteItemDto),\n    tslib_1.__metadata(\"design:type\", Array)\n], CreateQuoteDto.prototype, \"items\", void 0);\ntslib_1.__decorate([\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsNumber)(),\n    tslib_1.__metadata(\"design:type\", Number)\n], CreateQuoteDto.prototype, \"gstRate\", void 0);\ntslib_1.__decorate([\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsNumber)(),\n    tslib_1.__metadata(\"design:type\", Number)\n], CreateQuoteDto.prototype, \"pstRate\", void 0);\ntslib_1.__decorate([\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsString)(),\n    tslib_1.__metadata(\"design:type\", String)\n], CreateQuoteDto.prototype, \"notes\", void 0);\ntslib_1.__decorate([\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsEnum)(client_1.QuotationStatus),\n    tslib_1.__metadata(\"design:type\", typeof (_b = typeof client_1.QuotationStatus !== \"undefined\" && client_1.QuotationStatus) === \"function\" ? _b : Object)\n], CreateQuoteDto.prototype, \"status\", void 0);\ntslib_1.__decorate([\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsDateString)(),\n    tslib_1.__metadata(\"design:type\", String)\n], CreateQuoteDto.prototype, \"validUntil\", void 0);\n","\"use strict\";\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UpdateQuoteDto = void 0;\nconst tslib_1 = require(\"tslib\");\nconst class_validator_1 = require(\"class-validator\");\nconst class_transformer_1 = require(\"class-transformer\");\nconst client_1 = require(\"@prisma/client\");\nconst create_quotation_dto_1 = require(\"./create-quotation.dto\");\nclass UpdateQuoteDto {\n}\nexports.UpdateQuoteDto = UpdateQuoteDto;\ntslib_1.__decorate([\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsString)(),\n    tslib_1.__metadata(\"design:type\", String)\n], UpdateQuoteDto.prototype, \"customerName\", void 0);\ntslib_1.__decorate([\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsString)(),\n    tslib_1.__metadata(\"design:type\", String)\n], UpdateQuoteDto.prototype, \"businessName\", void 0);\ntslib_1.__decorate([\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsString)(),\n    tslib_1.__metadata(\"design:type\", String)\n], UpdateQuoteDto.prototype, \"phone\", void 0);\ntslib_1.__decorate([\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsString)(),\n    tslib_1.__metadata(\"design:type\", String)\n], UpdateQuoteDto.prototype, \"email\", void 0);\ntslib_1.__decorate([\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsString)(),\n    tslib_1.__metadata(\"design:type\", String)\n], UpdateQuoteDto.prototype, \"address\", void 0);\ntslib_1.__decorate([\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsString)(),\n    tslib_1.__metadata(\"design:type\", String)\n], UpdateQuoteDto.prototype, \"vehicleMake\", void 0);\ntslib_1.__decorate([\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsString)(),\n    tslib_1.__metadata(\"design:type\", String)\n], UpdateQuoteDto.prototype, \"vehicleModel\", void 0);\ntslib_1.__decorate([\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsNumber)(),\n    tslib_1.__metadata(\"design:type\", Number)\n], UpdateQuoteDto.prototype, \"vehicleYear\", void 0);\ntslib_1.__decorate([\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsArray)(),\n    (0, class_validator_1.ValidateNested)({ each: true }),\n    (0, class_transformer_1.Type)(() => create_quotation_dto_1.CreateQuoteItemDto),\n    tslib_1.__metadata(\"design:type\", Array)\n], UpdateQuoteDto.prototype, \"items\", void 0);\ntslib_1.__decorate([\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsNumber)(),\n    tslib_1.__metadata(\"design:type\", Number)\n], UpdateQuoteDto.prototype, \"gstRate\", void 0);\ntslib_1.__decorate([\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsNumber)(),\n    tslib_1.__metadata(\"design:type\", Number)\n], UpdateQuoteDto.prototype, \"pstRate\", void 0);\ntslib_1.__decorate([\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsString)(),\n    tslib_1.__metadata(\"design:type\", String)\n], UpdateQuoteDto.prototype, \"notes\", void 0);\ntslib_1.__decorate([\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsEnum)(client_1.QuotationStatus),\n    tslib_1.__metadata(\"design:type\", typeof (_a = typeof client_1.QuotationStatus !== \"undefined\" && client_1.QuotationStatus) === \"function\" ? _a : Object)\n], UpdateQuoteDto.prototype, \"status\", void 0);\ntslib_1.__decorate([\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsDateString)(),\n    tslib_1.__metadata(\"design:type\", String)\n], UpdateQuoteDto.prototype, \"validUntil\", void 0);\n","module.exports = require(\"@clerk/clerk-sdk-node\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","\"use strict\";\n/**\n * This is not a production server yet!\n * This is only a minimal backend to get started.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst common_1 = require(\"@nestjs/common\");\nconst core_1 = require(\"@nestjs/core\");\nconst app_module_1 = require(\"./app/app.module\");\nasync function bootstrap() {\n    const app = await core_1.NestFactory.create(app_module_1.AppModule);\n    // Enable CORS\n    app.enableCors({\n        origin: process.env.FRONTEND_URL || 'http://localhost:4200',\n        credentials: true,\n    });\n    // Global validation pipe\n    app.useGlobalPipes(new common_1.ValidationPipe({\n        whitelist: true,\n        transform: true,\n    }));\n    const port = process.env.PORT || 3000;\n    await app.listen(port);\n    common_1.Logger.log(`🚀 Application is running on: http://localhost:${port}`);\n}\nbootstrap();\n"],"names":[],"sourceRoot":""}