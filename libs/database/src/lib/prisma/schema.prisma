generator client {
  provider = "prisma-client-js"
  output   = "../../../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                  @id @default(cuid())
  clerkId               String                  @unique
  email                 String                  @unique
  firstName             String?
  lastName              String?
  phone                 String?
  roleId                String
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  lastLogin             DateTime?
  isActive              Boolean                 @default(true)
  role                  Role                    @relation(fields: [roleId], references: [id])
  jobs                  Job[]                   // Jobs assigned to this user (for STAFF role)
  payments              Payment[]               // Payments made to this user (for STAFF role)
  appointments          Appointment[]           // Appointments assigned to this employee (deprecated)
  appointmentEmployees  AppointmentEmployee[]   @relation("AppointmentEmployees") // Multiple appointment assignments
  availability          EmployeeAvailability[]  // Weekly recurring schedule
  timeSlotOverrides     TimeSlotOverride[]      // Date-specific exceptions (time-off, extra shifts)
  smsMessages           SmsMessage[]            // SMS messages sent to this user (staff/admin notifications)
  smsPreference         SmsPreference?          // SMS notification preferences for staff/admin
}

model Role {
  id          String           @id @default(cuid())
  name        RoleName         @unique
  displayName String
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  permissions RolePermission[]
  users       User[]
}

model Permission {
  id          String           @id @default(cuid())
  resource    String
  action      String
  description String?
  createdAt   DateTime         @default(now())
  roles       RolePermission[]

  @@unique([resource, action])
}

model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
}

model Customer {
  id           String          @id @default(cuid())
  firstName    String
  lastName     String
  email        String?
  phone        String?
  address      String?
  businessName String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  appointments Appointment[]
  invoices     Invoice[]
  vehicles     Vehicle[]
  smsMessages  SmsMessage[]
  smsPreference SmsPreference?
  emailLogs    EmailLog[]     // Email logs related to this customer
}

model Vehicle {
  id           String        @id @default(cuid())
  customerId   String
  make         String
  model        String
  year         Int
  vin          String?       @unique
  licensePlate String?
  mileage      Int?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  appointments Appointment[]
  invoices     Invoice[]
  customer     Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

model Tire {
  id            String          @id @default(cuid())
  name          String?
  sku           String?
  brandId       String
  sizeId        String
  locationId    String?
  type          TireType
  condition     TireCondition
  quantity      Int             @default(0)
  price         Decimal         @db.Decimal(10, 2)
  cost          Decimal?        @db.Decimal(10, 2)
  minStock      Int             @default(5)
  imageUrl      String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  invoiceItems  InvoiceItem[]
  quotationItems QuotationItem[]
  brand         TireBrand       @relation(fields: [brandId], references: [id])
  size          TireSize        @relation(fields: [sizeId], references: [id])
  location      Location?       @relation(fields: [locationId], references: [id])

  @@index([brandId, sizeId])
  @@index([sku])
}

model TireBrand {
  id        String   @id @default(cuid())
  name      String   @unique
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tires     Tire[]
}

model TireSize {
  id        String   @id @default(cuid())
  size      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tires     Tire[]
}

model Location {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tires     Tire[]
}

model Service {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  unitPrice   Decimal  @db.Decimal(10, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Company {
  id                 String    @id @default(cuid())
  name               String
  registrationNumber String    @unique
  businessType       String?
  address            String?
  phone              String?
  email              String?
  isDefault          Boolean   @default(false)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  invoices           Invoice[]
}

model Invoice {
  id            String         @id @default(cuid())
  invoiceNumber String         @unique @default(cuid())
  customerId    String
  vehicleId     String?
  companyId     String
  subtotal      Decimal        @db.Decimal(10, 2)
  taxRate       Decimal        @db.Decimal(5, 4)
  taxAmount     Decimal        @db.Decimal(10, 2)
  total         Decimal        @db.Decimal(10, 2)
  status        InvoiceStatus
  paymentMethod PaymentMethod?
  notes         String?
  invoiceDate   DateTime       @default(now())
  createdBy     String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  paidAt        DateTime?
  gstAmount     Decimal?       @db.Decimal(10, 2)
  gstRate       Decimal?       @db.Decimal(5, 4)
  pstAmount     Decimal?       @db.Decimal(10, 2)
  pstRate       Decimal?       @db.Decimal(5, 4)
  customer      Customer       @relation(fields: [customerId], references: [id])
  vehicle       Vehicle?       @relation(fields: [vehicleId], references: [id])
  company       Company        @relation(fields: [companyId], references: [id])
  items         InvoiceItem[]
  emailLogs     EmailLog[]     // Email logs related to this invoice

  @@index([customerId])
  @@index([status])
  @@index([companyId])
}

model InvoiceItem {
  id          String          @id @default(cuid())
  invoiceId   String
  tireId      String?
  tireName    String?
  itemType    InvoiceItemType
  description String
  quantity    Int
  unitPrice   Decimal         @db.Decimal(10, 2)
  total       Decimal         @db.Decimal(10, 2)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  invoice     Invoice         @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  tire        Tire?           @relation(fields: [tireId], references: [id])
}

model Quotation {
  id               String           @id @default(cuid())
  quotationNumber  String           @unique @default(cuid())
  customerName     String
  businessName     String?
  phone            String?
  email            String?
  address          String?
  vehicleMake      String?
  vehicleModel     String?
  vehicleYear      Int?
  subtotal         Decimal          @db.Decimal(10, 2)
  gstRate          Decimal?         @db.Decimal(5, 4)
  gstAmount        Decimal?         @db.Decimal(10, 2)
  pstRate          Decimal?         @db.Decimal(5, 4)
  pstAmount        Decimal?         @db.Decimal(10, 2)
  taxRate          Decimal          @db.Decimal(5, 4)
  taxAmount        Decimal          @db.Decimal(10, 2)
  total            Decimal          @db.Decimal(10, 2)
  status           QuotationStatus  @default(DRAFT)
  validUntil       DateTime?
  notes            String?
  createdBy        String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  convertedToInvoiceId String?      @unique
  items            QuotationItem[]
  emailLogs        EmailLog[]       // Email logs related to this quotation

  @@index([status])
  @@index([customerName])
}

model QuotationItem {
  id          String          @id @default(cuid())
  quotationId String
  tireId      String?
  tireName    String?
  itemType    InvoiceItemType
  description String
  quantity    Int
  unitPrice   Decimal         @db.Decimal(10, 2)
  total       Decimal         @db.Decimal(10, 2)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  quotation   Quotation       @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  tire        Tire?           @relation(fields: [tireId], references: [id])
}

model Appointment {
  id              String                  @id @default(cuid())
  customerId      String
  vehicleId       String?
  employeeId      String?                 // Deprecated: Use employees relation instead
  scheduledDate   DateTime
  scheduledTime   String                  // "09:00" format (24-hour)
  endTime         String?                 // "10:30" format (calculated from duration)
  duration        Int                     @default(60) // minutes
  serviceType     String
  appointmentType AppointmentType         @default(AT_GARAGE)
  status          AppointmentStatus
  notes           String?
  paymentAmount   Float?                  // Total payment amount collected
  paymentBreakdown Json?                  // Array of payment entries: [{id: 'uuid', method: 'CASH', amount: 50}, {id: 'uuid', method: 'E_TRANSFER', amount: 30}]
  paymentNotes    String?                 // Additional payment notes
  expectedAmount  Float?                  // Expected total amount for tracking partial payments
  reminderSent    Boolean                 @default(false)
  bookedBy        String?                 // User ID who created the booking
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
  customer        Customer                @relation(fields: [customerId], references: [id])
  vehicle         Vehicle?                @relation(fields: [vehicleId], references: [id])
  employee        User?                   @relation(fields: [employeeId], references: [id])
  employees       AppointmentEmployee[]   // Multiple employees assigned to this appointment
  smsMessages     SmsMessage[]            // SMS messages related to this appointment
  emailLogs       EmailLog[]              // Email logs related to this appointment

  @@index([scheduledDate, status])
  @@index([employeeId, scheduledDate])
  @@index([customerId])
}

model AppointmentEmployee {
  id            String      @id @default(cuid())
  appointmentId String
  employeeId    String
  createdAt     DateTime    @default(now())
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  employee      User        @relation("AppointmentEmployees", fields: [employeeId], references: [id], onDelete: Cascade)

  @@unique([appointmentId, employeeId])
  @@index([appointmentId])
  @@index([employeeId])
}

model EmployeeAvailability {
  id          String   @id @default(cuid())
  employeeId  String
  dayOfWeek   Int      // 0=Sunday, 1=Monday, ..., 6=Saturday
  startTime   String   // "09:00" (24-hour format)
  endTime     String   // "17:00" (24-hour format)
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  employee    User     @relation(fields: [employeeId], references: [id])

  @@unique([employeeId, dayOfWeek, startTime])
  @@index([employeeId, dayOfWeek])
}

model TimeSlotOverride {
  id          String   @id @default(cuid())
  employeeId  String
  date        DateTime // Specific date (date only, no time)
  startTime   String   // "09:00" (24-hour format)
  endTime     String   // "17:00" (24-hour format)
  isAvailable Boolean  // false = blocked (vacation), true = additional availability
  reason      String?  // "Vacation", "Sick Leave", "Extra Shift", etc.
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  employee    User     @relation(fields: [employeeId], references: [id])

  @@index([employeeId, date])
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String
  action     String
  resource   String
  resourceId String
  oldValue   Json?
  newValue   Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  @@index([userId])
  @@index([resource, resourceId])
  @@index([createdAt])
}

model Job {
  id          String      @id @default(cuid())
  jobNumber   String      @unique @default(cuid())
  employeeId  String      // Foreign key to User (where role = STAFF)
  title       String      // Job description/title
  description String?     // Detailed job description
  payAmount   Decimal     @db.Decimal(10, 2)
  status      JobStatus   @default(PENDING)
  jobType     JobType     // Regular, Overtime, Bonus, Commission
  dueDate     DateTime?   // When payment is due
  completedAt DateTime?   // When job was completed
  createdBy   String      // Who assigned the job
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  employee    User        @relation(fields: [employeeId], references: [id])
  payments    Payment[]   // One job can have multiple payments (partial payments)

  @@index([employeeId])
  @@index([status])
  @@index([createdAt])
}

model Payment {
  id            String        @id @default(cuid())
  jobId         String
  employeeId    String        // Denormalized for faster queries
  amount        Decimal       @db.Decimal(10, 2)
  paymentMethod PaymentMethod
  status        PaymentStatus @default(PENDING)
  paidAt        DateTime?
  paidBy        String?       // Who processed the payment
  notes         String?
  reference     String?       // Check number, transaction ID, etc.
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  job           Job           @relation(fields: [jobId], references: [id], onDelete: Cascade)
  employee      User          @relation(fields: [employeeId], references: [id])

  @@index([employeeId])
  @@index([status])
  @@index([paidAt])
}

model PayrollPeriod {
  id        String   @id @default(cuid())
  startDate DateTime
  endDate   DateTime
  name      String   // "January 2025", "Week 1 Jan 2025"
  type      PeriodType // WEEKLY, MONTHLY, YEARLY
  createdAt DateTime @default(now())

  @@unique([startDate, endDate, type])
  @@index([startDate, endDate])
}

enum JobStatus {
  PENDING     // Job assigned, payment not yet due
  READY       // Job completed, ready for payment
  PAID        // Fully paid
  CANCELLED   // Job cancelled
  PARTIALLY_PAID // Some payments made, balance remaining
}

enum JobType {
  REGULAR     // Regular hourly/salary work
  OVERTIME    // Overtime pay
  BONUS       // Performance bonus
  COMMISSION  // Sales commission
  EXPENSE     // Expense reimbursement
  OTHER       // Other compensation
}

enum PaymentStatus {
  PENDING     // Payment scheduled but not made
  PAID        // Payment completed
  FAILED      // Payment failed
  CANCELLED   // Payment cancelled
}

enum PeriodType {
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

enum RoleName {
  CUSTOMER
  STAFF
  ADMIN
}

enum TireType {
  ALL_SEASON
  SUMMER
  WINTER
  WINTER_STUDDED
  PERFORMANCE
  OFF_ROAD
  RUN_FLAT
}

enum TireCondition {
  NEW
  USED_EXCELLENT
  USED_GOOD
  USED_FAIR
}

enum InvoiceStatus {
  DRAFT
  PENDING
  PAID
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  CHECK
  E_TRANSFER
  FINANCING
}

enum InvoiceItemType {
  TIRE
  SERVICE
  PART
  OTHER
  LEVY
  DISCOUNT
  DISCOUNT_PERCENTAGE
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum AppointmentType {
  AT_GARAGE
  MOBILE_SERVICE
}

enum QuotationStatus {
  DRAFT
  SENT
  ACCEPTED
  REJECTED
  EXPIRED
  CONVERTED
}

// ============================================
// Purchase & Expense Invoice System Models
// ============================================

model Vendor {
  id                String             @id @default(cuid())
  name              String             @unique
  contactPerson     String?
  email             String?
  phone             String?
  address           String?
  taxId             String?            // Tax ID / Business Number
  paymentTerms      String?            // "Net 30", "Due on receipt", etc.
  isActive          Boolean            @default(true)
  notes             String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  purchaseInvoices  PurchaseInvoice[]
  expenseInvoices   ExpenseInvoice[]

  @@index([name])
  @@index([isActive])
}

model PurchaseInvoice {
  id              String               @id @default(cuid())
  vendorId        String?              // Optional vendor relationship
  vendorName      String               // Free-text vendor name (if no vendorId)
  description     String               // What was purchased
  invoiceDate     DateTime             // Date on the invoice
  dueDate         DateTime?            // Payment due date
  amount          Decimal              @db.Decimal(10, 2)
  taxAmount       Decimal?             @db.Decimal(10, 2)
  totalAmount     Decimal              @db.Decimal(10, 2)
  category        PurchaseCategory     // Categorization
  status          PurchaseInvoiceStatus @default(PENDING)
  paymentDate     DateTime?            // When it was paid
  paymentMethod   PaymentMethod?
  notes           String?              // Additional notes
  imageUrl        String?              // Azure Blob Storage URL
  imageName       String?              // Original filename
  imageSize       Int?                 // File size in bytes
  createdBy       String               // User who created it
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt

  vendor          Vendor?              @relation(fields: [vendorId], references: [id])

  @@index([invoiceDate])
  @@index([vendorId])
  @@index([category])
  @@index([status])
  @@index([createdBy])
}

model ExpenseInvoice {
  id              String               @id @default(cuid())
  invoiceNumber   String?              // Vendor's invoice number
  vendorId        String?              // Optional vendor relationship
  vendorName      String               // Free-text vendor name
  description     String               // Expense description
  invoiceDate     DateTime             // Date on the invoice
  amount          Decimal              @db.Decimal(10, 2)
  taxAmount       Decimal?             @db.Decimal(10, 2)
  totalAmount     Decimal              @db.Decimal(10, 2)
  category        ExpenseCategory      // Categorization
  status          PurchaseInvoiceStatus @default(PENDING)
  paymentDate     DateTime?            // When it was paid
  paymentMethod   PaymentMethod?
  isRecurring     Boolean              @default(false) // Rent, utilities, etc.
  recurringPeriod RecurringPeriod?     // MONTHLY, QUARTERLY, YEARLY
  notes           String?
  imageUrl        String?              // Azure Blob Storage URL
  imageName       String?              // Original filename
  imageSize       Int?                 // File size in bytes
  createdBy       String               // User who created it
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt

  vendor          Vendor?              @relation(fields: [vendorId], references: [id])

  @@index([invoiceDate])
  @@index([vendorId])
  @@index([category])
  @@index([status])
  @@index([createdBy])
  @@index([isRecurring])
}

// ============================================
// Enums for Purchase & Expense System
// ============================================

enum PurchaseCategory {
  TIRES              // Tire inventory purchases
  PARTS              // Auto parts
  TOOLS              // Tools and equipment
  SUPPLIES           // Shop supplies
  OTHER              // Other purchases
}

enum ExpenseCategory {
  RENT               // Shop rent
  UTILITIES          // Electricity, water, gas, internet
  INSURANCE          // Business insurance
  ADVERTISING        // Marketing and advertising
  OFFICE_SUPPLIES    // Office supplies
  PROFESSIONAL_FEES  // Accounting, legal, etc.
  MAINTENANCE        // Building/equipment maintenance
  VEHICLE            // Company vehicle expenses
  TRAVEL             // Travel expenses
  TRAINING           // Staff training
  SOFTWARE           // Software subscriptions
  OTHER              // Other expenses
}

enum PurchaseInvoiceStatus {
  PENDING            // Not yet paid
  PAID               // Fully paid
  OVERDUE            // Past due date
  CANCELLED          // Cancelled invoice
}

enum RecurringPeriod {
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

// ============================================
// SMS Messaging System
// ============================================

model SmsMessage {
  id            String        @id @default(cuid())
  to            String        // Phone number in E.164 format (+1XXXXXXXXXX)
  from          String        // Telnyx phone number
  body          String        // Message content
  status        SmsStatus     @default(PENDING)
  type          SmsType       // APPOINTMENT_REMINDER, STATUS_UPDATE, etc.

  // Telnyx specific fields
  telnyxMessageId String?     @unique
  cost          Decimal?      @db.Decimal(10, 6)
  segments      Int?          @default(1)
  errorMessage  String?

  // Relationships - can be sent to either Customer or User (staff/admin)
  appointmentId String?
  appointment   Appointment?  @relation(fields: [appointmentId], references: [id])
  customerId    String?
  customer      Customer?     @relation(fields: [customerId], references: [id])
  userId        String?
  user          User?         @relation(fields: [userId], references: [id])

  // Timestamps
  sentAt        DateTime?
  deliveredAt   DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([appointmentId])
  @@index([customerId])
  @@index([userId])
  @@index([status])
  @@index([type])
  @@index([createdAt])
  @@map("sms_messages")
}

enum SmsStatus {
  PENDING      // Queued for sending
  QUEUED       // Accepted by Telnyx
  SENT         // Sent to carrier
  DELIVERED    // Delivered to phone
  FAILED       // Failed to send
  UNDELIVERED  // Carrier couldn't deliver
}

enum SmsType {
  APPOINTMENT_REMINDER     // 7-day, 3-day, 24-hour reminders (to customers)
  APPOINTMENT_CONFIRMATION // Immediate booking confirmation (to customers)
  APPOINTMENT_CANCELLATION // Appointment cancelled notification (to customers)
  SERVICE_STATUS           // Service started, in progress, etc. (to customers)
  SERVICE_COMPLETE         // Ready for pickup (to customers)
  PROMOTIONAL              // Marketing messages (to customers)
  EMERGENCY                // Urgent notifications (to customers)
  STAFF_APPOINTMENT_ALERT  // New appointment assigned to staff
  STAFF_SCHEDULE_REMINDER  // Daily schedule summary to staff
  ADMIN_DAILY_SUMMARY      // End of day summary to admin
  ADMIN_URGENT_ALERT       // Urgent issues requiring admin attention
}

model SmsPreference {
  id                  String    @id @default(cuid())

  // Can be associated with either Customer or User (staff/admin)
  customerId          String?   @unique
  customer            Customer? @relation(fields: [customerId], references: [id], onDelete: Cascade)
  userId              String?   @unique
  user                User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Opt-in/out tracking
  optedIn             Boolean   @default(false)
  optedInAt           DateTime?
  optedOutAt          DateTime?

  // Customer preference toggles
  appointmentReminders Boolean  @default(true)
  serviceUpdates       Boolean  @default(true)
  promotional          Boolean  @default(false)

  // Staff/Admin preference toggles
  appointmentAlerts    Boolean  @default(true)  // Staff: new appointments assigned
  scheduleReminders    Boolean  @default(true)  // Staff: daily schedule summary
  dailySummary         Boolean  @default(true)  // Admin: end of day summary
  urgentAlerts         Boolean  @default(true)  // Admin: urgent issues

  // Timestamps
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@map("sms_preferences")
}

// ==========================================
// EMAIL MODELS
// ==========================================

model EmailLog {
  id            String        @id @default(cuid())
  to            String        // Recipient email
  from          String        // Sender email
  subject       String        // Email subject
  type          EmailType     // Type of email
  status        EmailStatus   @default(PENDING)

  // Brevo specific
  brevoMessageId String?      @unique

  // Relationships
  appointmentId String?
  appointment   Appointment?  @relation(fields: [appointmentId], references: [id])
  invoiceId     String?
  invoice       Invoice?      @relation(fields: [invoiceId], references: [id])
  quotationId   String?
  quotation     Quotation?    @relation(fields: [quotationId], references: [id])
  customerId    String?
  customer      Customer?     @relation(fields: [customerId], references: [id])

  // Timestamps
  sentAt        DateTime?
  deliveredAt   DateTime?
  openedAt      DateTime?     // If tracking enabled
  clickedAt     DateTime?     // If tracking enabled
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([appointmentId])
  @@index([invoiceId])
  @@index([quotationId])
  @@index([customerId])
  @@index([status])
  @@index([type])
  @@map("email_logs")
}

enum EmailStatus {
  PENDING
  QUEUED
  SENT
  DELIVERED
  OPENED
  CLICKED
  BOUNCED
  COMPLAINED
  FAILED
}

enum EmailType {
  APPOINTMENT_CONFIRMATION
  APPOINTMENT_REMINDER
  APPOINTMENT_CANCELLATION
  INVOICE_DELIVERY
  QUOTATION
  PAYMENT_RECEIPT
  SERVICE_COMPLETE
  PROMOTIONAL
}
