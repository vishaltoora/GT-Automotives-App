# Multi-stage Dockerfile for GT Automotive Backend
# Designed for Nx monorepo structure

# Stage 1: Dependencies
FROM node:18-alpine AS deps
WORKDIR /app

# Copy package files
COPY package.json yarn.lock ./
COPY server/package.json ./server/
COPY libs/database/package.json ./libs/database/
COPY libs/shared/package.json ./libs/shared/

# Install all dependencies
RUN yarn install --frozen-lockfile --network-timeout 100000

# Stage 2: Builder
FROM node:18-alpine AS builder
WORKDIR /app

# Copy dependencies from previous stage
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/server/node_modules ./server/node_modules

# Copy source code
COPY . .

# Build the server
RUN yarn nx build server --prod

# Generate Prisma client
RUN cd libs/database && npx prisma generate

# Stage 3: Runner
FROM node:18-alpine AS runner
WORKDIR /app

# Install dumb-init for proper signal handling
RUN apk add --no-cache dumb-init

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# Copy necessary files from builder
COPY --from=builder --chown=nodejs:nodejs /app/server/dist ./dist
COPY --from=builder --chown=nodejs:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=nodejs:nodejs /app/server/package.json ./package.json
COPY --from=builder --chown=nodejs:nodejs /app/libs/database/src/lib/prisma ./prisma
COPY --from=builder --chown=nodejs:nodejs /app/libs/database/node_modules/.prisma ./node_modules/.prisma

# Switch to non-root user
USER nodejs

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3000/api/health', (r) => {if (r.statusCode !== 200) throw new Error()})"

# Start the application
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "dist/main.js"]