// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../../../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model with role management
model User {
  id           String         @id @default(cuid())
  clerkId      String         @unique    // Clerk user ID for auth
  email        String         @unique
  firstName    String?
  lastName     String?
  roleId       String
  role         Role           @relation(fields: [roleId], references: [id])
  customer     Customer?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  lastLogin    DateTime?
  isActive     Boolean        @default(true)
}

// Role model for authorization
model Role {
  id           String         @id @default(cuid())
  name         RoleName       @unique
  displayName  String
  description  String?
  permissions  RolePermission[]
  users        User[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

enum RoleName {
  CUSTOMER
  STAFF
  ADMIN
}

// Permission model for granular access control
model Permission {
  id           String         @id @default(cuid())
  resource     String         // e.g., "invoices", "customers", "reports"
  action       String         // e.g., "create", "read", "update", "delete"
  description  String?
  roles        RolePermission[]
  createdAt    DateTime       @default(now())
  
  @@unique([resource, action])
}

// Many-to-many relationship between roles and permissions
model RolePermission {
  id           String         @id @default(cuid())
  roleId       String
  role         Role           @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permissionId String
  permission   Permission     @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  
  @@unique([roleId, permissionId])
}

// Customer model
model Customer {
  id           String         @id @default(cuid())
  userId       String         @unique
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  phone        String
  address      String?
  vehicles     Vehicle[]
  invoices     Invoice[]
  appointments Appointment[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

// Vehicle model
model Vehicle {
  id           String         @id @default(cuid())
  customerId   String
  customer     Customer       @relation(fields: [customerId], references: [id], onDelete: Cascade)
  make         String
  model        String
  year         Int
  vin          String?        @unique
  licensePlate String?
  mileage      Int?
  invoices     Invoice[]
  appointments Appointment[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

// Tire inventory model
model Tire {
  id           String         @id @default(cuid())
  brand        String
  model        String
  size         String
  type         TireType
  condition    TireCondition
  quantity     Int            @default(0)
  price        Decimal        @db.Decimal(10, 2)
  cost         Decimal?       @db.Decimal(10, 2)
  location     String?        // Storage location in warehouse
  minStock     Int            @default(5)
  imageUrl     String?
  invoiceItems InvoiceItem[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  
  @@index([brand, model, size])
}

enum TireType {
  ALL_SEASON
  SUMMER
  WINTER
  PERFORMANCE
  OFF_ROAD
  RUN_FLAT
}

enum TireCondition {
  NEW
  USED_EXCELLENT
  USED_GOOD
  USED_FAIR
}

// Invoice model
model Invoice {
  id           String         @id @default(cuid())
  invoiceNumber String        @unique @default(cuid())
  customerId   String
  customer     Customer       @relation(fields: [customerId], references: [id])
  vehicleId    String?
  vehicle      Vehicle?       @relation(fields: [vehicleId], references: [id])
  items        InvoiceItem[]
  subtotal     Decimal        @db.Decimal(10, 2)
  taxRate      Decimal        @db.Decimal(5, 4)
  taxAmount    Decimal        @db.Decimal(10, 2)
  total        Decimal        @db.Decimal(10, 2)
  status       InvoiceStatus
  paymentMethod PaymentMethod?
  notes        String?
  createdBy    String         // User ID who created the invoice
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  paidAt       DateTime?
  
  @@index([customerId])
  @@index([status])
}

enum InvoiceStatus {
  DRAFT
  PENDING
  PAID
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  CHECK
  E_TRANSFER
  FINANCING
}

// Invoice line items
model InvoiceItem {
  id           String         @id @default(cuid())
  invoiceId    String
  invoice      Invoice        @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  tireId       String?
  tire         Tire?          @relation(fields: [tireId], references: [id])
  itemType     InvoiceItemType
  description  String
  quantity     Int
  unitPrice    Decimal        @db.Decimal(10, 2)
  total        Decimal        @db.Decimal(10, 2)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

enum InvoiceItemType {
  TIRE
  SERVICE
  PART
  OTHER
}

// Appointment model
model Appointment {
  id           String         @id @default(cuid())
  customerId   String
  customer     Customer       @relation(fields: [customerId], references: [id])
  vehicleId    String?
  vehicle      Vehicle?       @relation(fields: [vehicleId], references: [id])
  scheduledDate DateTime
  scheduledTime String         // Store time as string (e.g., "14:30")
  duration     Int            @default(60) // Duration in minutes
  serviceType  String
  status       AppointmentStatus
  notes        String?
  reminderSent Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  
  @@index([scheduledDate, status])
  @@index([customerId])
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

// Audit log for tracking important actions
model AuditLog {
  id           String         @id @default(cuid())
  userId       String         // User who performed the action
  action       String         // e.g., "CREATE_INVOICE", "UPDATE_PRICE", "DELETE_CUSTOMER"
  resource     String         // e.g., "invoice", "tire", "customer"
  resourceId   String         // ID of the affected resource
  oldValue     Json?          // Previous value (for updates)
  newValue     Json?          // New value (for updates/creates)
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime       @default(now())
  
  @@index([userId])
  @@index([resource, resourceId])
  @@index([createdAt])
}