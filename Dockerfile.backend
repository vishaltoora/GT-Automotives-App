FROM node:20-alpine

WORKDIR /app

# Copy all source code (simpler approach)
COPY . .

# Install dependencies with retry and timeout handling
RUN yarn install --frozen-lockfile --production=false --network-timeout 100000 || \
    yarn install --frozen-lockfile --production=false --network-timeout 100000 || \
    yarn install --frozen-lockfile --production=false --network-timeout 100000

# Generate Prisma client
RUN yarn db:generate

# Build the server using TypeScript with lenient settings (match local environment)
WORKDIR /app/server

# Create a lenient tsconfig for Docker build
RUN echo '{\
  "extends": "./tsconfig.app.json",\
  "compilerOptions": {\
    "noEmitOnError": false,\
    "skipLibCheck": true,\
    "strict": false,\
    "noImplicitAny": false,\
    "noImplicitReturns": false,\
    "noUnusedLocals": false,\
    "noUnusedParameters": false\
  }\
}' > tsconfig.docker.json

# Build with lenient settings and verify output
RUN npx tsc -p tsconfig.docker.json --outDir dist && \
    echo "TypeScript build completed" && \
    ls -la dist/ && \
    echo "Checking main.js exists:" && \
    ls -la dist/main.js

# Go back to app root
WORKDIR /app

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S backend -u 1001 && \
    chown -R backend:nodejs /app

USER backend

# Expose port
EXPOSE 3000

# Health check to ensure container is working
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD node -e "const http = require('http'); const req = http.request({hostname: 'localhost', port: 3000, path: '/', method: 'GET', timeout: 5000}, (res) => process.exit(res.statusCode === 200 || res.statusCode === 401 ? 0 : 1)); req.on('error', () => process.exit(1)); req.on('timeout', () => process.exit(1)); req.end();" || exit 1

# Start the application with better error handling and environment validation
CMD ["sh", "-c", "\
  echo 'Starting GT Automotive Backend...' && \
  echo 'Node version:' && node --version && \
  echo 'Environment: NODE_ENV='$NODE_ENV && \
  echo 'Port: PORT='$PORT && \
  echo 'Database URL configured:' && \
  if [ -n \"$DATABASE_URL\" ]; then echo 'DATABASE_URL is set'; else echo 'ERROR: DATABASE_URL is not set'; fi && \
  if [ -n \"$CLERK_SECRET_KEY\" ] && [ \"$CLERK_SECRET_KEY\" != \"sk_live_YOUR_ACTUAL_CLERK_SECRET_KEY_HERE\" ]; then echo 'CLERK_SECRET_KEY is configured'; else echo 'ERROR: CLERK_SECRET_KEY is not properly configured'; fi && \
  if [ -n \"$JWT_SECRET\" ] && [ \"$JWT_SECRET\" != \"GENERATE_WITH_OPENSSL_RAND_BASE64_32\" ]; then echo 'JWT_SECRET is configured'; else echo 'ERROR: JWT_SECRET is not properly configured'; fi && \
  echo 'Starting server...' && \
  cd server && node dist/main.js || (echo 'Server failed to start - check environment variables and database connection' && exit 1) \
"]