# Build stage for GT Automotive backend
FROM node:20-alpine AS builder

# Set working directory
WORKDIR /app

# Copy all files
COPY . .

# Install dependencies
RUN yarn install --frozen-lockfile --production=false --network-timeout 100000 || \
    yarn install --frozen-lockfile --production=false --network-timeout 100000 || \
    yarn install --frozen-lockfile --production=false --network-timeout 100000

# Generate Prisma client
RUN yarn db:generate

# Sync Nx workspace
RUN npx nx sync || true

# Build the server using Nx (handles all dependencies and produces main.js)
RUN npx nx build server --skip-nx-cache && \
    echo "Build completed" && \
    ls -la server/dist/ && \
    echo "Checking main.js exists:" && \
    ls -la server/dist/main.js

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S backend -u 1001 && \
    chown -R backend:nodejs /app

# Production stage
FROM node:20-alpine

# Install dumb-init for proper signal handling
RUN apk add --no-cache dumb-init

# Create app directory
WORKDIR /app

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S backend -u 1001

# Copy application files from builder
COPY --from=builder --chown=backend:nodejs /app/server/dist ./server/dist
COPY --from=builder --chown=backend:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=backend:nodejs /app/libs ./libs
COPY --from=builder --chown=backend:nodejs /app/package.json ./package.json

# Switch to non-root user
USER backend

# Expose port
EXPOSE 3000

# Set NODE_ENV
ENV NODE_ENV=production

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3000/api/health', (r) => {r.statusCode === 200 ? process.exit(0) : process.exit(1)})"

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start the application
CMD ["node", "server/dist/main.js"]